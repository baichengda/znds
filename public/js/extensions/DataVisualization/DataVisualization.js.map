{"version":3,"file":"DataVisualization/DataVisualization.js","sources":["webpack://Autodesk.Extensions.[name]/webpack/bootstrap","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/Constants.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/CustomViewables.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/ModelStructureInfo.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/SceneTool.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/SpriteAtlas.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/SpriteMeshBuilder.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/TextureUtils.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/heatmap/HeatmapMaterial.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/heatmap/IDWDataProcessor.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/heatmap/PlanarHeatmap.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/heatmap/SurfaceShading.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/heatmap/SurfaceShadingData.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/index.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/node_modules/heatmap.js/build/heatmap.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/node_modules/q/q.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/streamline/StreamLine.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/streamline/StreamLineBuilder.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/streamline/StreamLineMaterial.js","webpack://Autodesk.Extensions.[name]/./extensions/DataVisualization/streamline/StreamLineShaders.js","webpack://Autodesk.Extensions.[name]/./node_modules/maxrects-packer/dist/maxrects-packer.mjs","webpack://Autodesk.Extensions.[name]/./node_modules/process/browser.js","webpack://Autodesk.Extensions.[name]/./node_modules/setimmediate/setImmediate.js","webpack://Autodesk.Extensions.[name]/./node_modules/timers-browserify/main.js","webpack://Autodesk.Extensions.[name]/(webpack)/buildin/global.js","webpack://Autodesk.Extensions.[name]/(webpack)/buildin/module.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./extensions/DataVisualization/index.js\");\n","module.exports = {\n  MOUSE_HOVERING: \"DATAVIZ_OBJECT_HOVERING\",\n  MOUSE_CLICK: \"DATAVIZ_OBJECT_CLICK\",\n  MOUSE_CLICK_OUT: \"DATAVIZ_CLICK_OUT\" };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { SpriteAtlas } from \"./SpriteAtlas\";\n\nvar ViewableType = {\n  SPRITE: 1,\n  GEOMETRY: 2 };\n\n\n/**\n                  * A visual style definition for a CustomViewable object.\n                  *\n                  * @class\n                  * @memberof Autodesk.DataVisualization.Core\n                  * @alias Autodesk.DataVisualization.Core.ViewableStyle\n                  */var\nViewableStyle = /*#__PURE__*/function () {\n  /**\n                                           * Constructs an instance of `ViewableStyle` object that describes the style\n                                           * to be applied for any given `CustomViewable` object.\n                                           *\n                                           * @param {number} type The type of viewable. Possible values are listed\n                                           * in `ViewableType`.\n                                           * @param {THREE.Color} color The color of the viewable, default to white.\n                                           * @param {string} url The URL of the sprite to be used for the viewable.\n                                           * Image formats supported are the same as those of `HTMLImageElement`.\n                                           * @param {THREE.Color} highlightedColor The highlighted color of the viewable,\n                                           * default to white. This color will be used when a `CustomViewable` is\n                                           * highlighted with a call to `highlightViewables` API.\n                                           * @param {string} highlightedUrl The URL of the highlighted sprite to be used\n                                           * for the viewable. This sprite will be used when a `CustomViewable` is\n                                           * highlighted with a call to `highlightViewables` API. Image formats\n                                           * supported are the same as those of `HTMLImageElement`.\n                                           * @param {string[]} animatedUrls Array of sprite urls that can be used to \n                                           * animate the icon.\n                                           * \n                                           * @example\n                                           *  const white = 0xffffff;\n                                           *  const iconUrl = \"http://localhost:9081/images/device-type-01.svg\";\n                                           *\n                                           *  const style = new Autodesk.DataVisualization.Core.ViewableStyle(\n                                           *      \"DeviceType01\",\n                                           *      Autodesk.DataVisualization.Core.ViewableType.SPRITE,\n                                           *      new THREE.Color(white),\n                                           *      iconUrl\n                                           *  );\n                                           */\n  function ViewableStyle()\n\n\n\n\n\n\n  {var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ViewableType.SPRITE;var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Color(0xffffff);var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";var highlightedColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new THREE.Color(0xffffff);var highlightedUrl = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";var animatedUrls = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];_classCallCheck(this, ViewableStyle);\n    this.type = type;\n    this.color = color;\n    this.url = url;\n    this.highlightedColor = highlightedColor;\n    this.highlightedUrl = highlightedUrl;\n\n    /** @type {Set<string>} */\n    this.spriteUrls = new Set(animatedUrls);\n  }\n\n  /**\n     * An array of sprite URL strings to be preloaded.\n     * @returns {string[]} An array of sprite URL strings to be preloaded.\n     */_createClass(ViewableStyle, [{ key: \"preloadSprite\",\n\n\n\n\n    /**\n                                                             * Preloads a sprite into `ViewableStyle` object for later use.\n                                                             *\n                                                             * @param {string} spriteUrl The URL of the sprite image to be preloaded for\n                                                             * subsequent use in `CustomViewable` objects. Image formats supported are\n                                                             * the same as those of `HTMLImageElement`. Calling this method with the same\n                                                             * URL will only preload the image once.\n                                                             *\n                                                             * @alias Autodesk.DataVisualization.Core.ViewableStyle#preloadSprite\n                                                             */value: function preloadSprite(\n    spriteUrl) {\n      this.spriteUrls.add(spriteUrl);\n    } }, { key: \"preloadedSprites\", get: function get() {return _toConsumableArray(this.spriteUrls.values());} }]);return ViewableStyle;}();\n\n\n/**\n                                                                                                                                              * The generic base class of custom viewable types.\n                                                                                                                                              *\n                                                                                                                                              * @class\n                                                                                                                                              * @memberof Autodesk.DataVisualization.Core\n                                                                                                                                              * @alias Autodesk.DataVisualization.Core.CustomViewable\n                                                                                                                                              */var\nCustomViewable = /*#__PURE__*/function () {\n  /**\n                                            * Constructs an instance of `CustomViewable` object. This class is not meant to be\n                                            * used directly, use the `SpriteViewable` class instead.\n                                            *\n                                            * @param {THREE.Vector3} position The position of the viewable in world coordinates.\n                                            * @param {ViewableStyle} style The style definition of this custom viewable object.\n                                            * @param {number} dbId The `DbId` of this custom viewable object. This value is used\n                                            * to identify the viewable when user input events such as mouse clicks are handled.\n                                            */\n  function CustomViewable(position, style, dbId) {_classCallCheck(this, CustomViewable);\n    this._style = style;\n    this._position = position;\n    this._dbId = dbId;\n  }\n\n  /**\n     * The style definition of this viewable object.\n     * @returns {ViewableStyle} The style definition of this viewable object.\n     */_createClass(CustomViewable, [{ key: \"style\", get: function get()\n    {\n      return this._style;\n    }\n\n    /**\n       * The position of the viewable object in world coordinates.\n       * @returns {THREE.Vector3} The position of the viewable object in world coordinates.\n       */ }, { key: \"position\", get: function get()\n    {\n      return this._position;\n    }\n\n    /**\n       * The `DbId` of this viewable object. This value is used to identify the\n       * viewable when user input events such as mouse clicks are handled.\n       * @returns {number} The `DbId` of this viewable object. This value is used to\n       * identify the viewable when user input events such as mouse clicks are handled.\n       */ }, { key: \"dbId\", get: function get()\n    {\n      return this._dbId;\n    } }]);return CustomViewable;}();\n\n\n/**\n                                      * A sprite (image) based custom viewable object.\n                                      *\n                                      * @class\n                                      * @memberof Autodesk.DataVisualization.Core\n                                      * @alias Autodesk.DataVisualization.Core.SpriteViewable\n                                      * @augments CustomViewable\n                                      */var\nSpriteViewable = /*#__PURE__*/function (_CustomViewable) {_inherits(SpriteViewable, _CustomViewable);var _super = _createSuper(SpriteViewable);\n  /**\n                                                                                                                                                 * Constructs an instance of `SpriteViewable` object\n                                                                                                                                                 *\n                                                                                                                                                 * @param {THREE.Vector3} position The position of the viewable in world coordinates.\n                                                                                                                                                 * @param {ViewableStyle} style The style definition of this custom viewable object.\n                                                                                                                                                 * @param {number} dbId The `DbId` of this custom viewable object. This value is used\n                                                                                                                                                 * to identify the viewable when user input events such as mouse clicks are handled.\n                                                                                                                                                 *\n                                                                                                                                                 * @example\n                                                                                                                                                 *  const dbId = 100;\n                                                                                                                                                 *  const positions = [\n                                                                                                                                                 *      {\n                                                                                                                                                 *          x: -97.94954550038506,\n                                                                                                                                                 *          y: -50.21776820050724,\n                                                                                                                                                 *          z: 12.444056161946492,\n                                                                                                                                                 *      },\n                                                                                                                                                 *      {\n                                                                                                                                                 *          x: -12.59026829087645,\n                                                                                                                                                 *          y: -50.20446526068116,\n                                                                                                                                                 *          z: 14.35526278705748,\n                                                                                                                                                 *      },\n                                                                                                                                                 *  ];\n                                                                                                                                                 *\n                                                                                                                                                 *  const viewables = [];\n                                                                                                                                                 *\n                                                                                                                                                 *  // Create multiple SpriteViewable that share the same 'style'.\n                                                                                                                                                 *  positions.forEach((pos) => {\n                                                                                                                                                 *      const viewable = new Autodesk.DataVisualization.Core.SpriteViewable(\n                                                                                                                                                 *          pos, style, dbId);\n                                                                                                                                                 *\n                                                                                                                                                 *      dbId++; // Assign each viewable a unique identifier\n                                                                                                                                                 *      viewables.push(viewable);\n                                                                                                                                                 *  });\n                                                                                                                                                 */\n  function SpriteViewable(position, style, dbId) {_classCallCheck(this, SpriteViewable);\n    // eslint-disable-next-line no-console\n    console.assert(style.type == ViewableType.SPRITE);return _super.call(this,\n    position, style, dbId);\n  }\n\n  /**\n     * The type of this `SpriteViewable` object. This value will always\n     * be equal to `ViewableType.SPRITE`.\n     * @returns {number} The type of this `SpriteViewable` object.\n     * This value will always be equal to `ViewableType.SPRITE`.\n     */_createClass(SpriteViewable, [{ key: \"type\", get: function get()\n    {\n      return ViewableType.SPRITE;\n    }\n\n    /**\n       * The color of this `SpriteViewable` object. The color is multiplied with\n       * the sprite pixel colors in shader prior to display.\n       * @returns {THREE.Color} The color of this `SpriteViewable` object. The color\n       * is multiplied with the sprite pixel colors in shader prior to display.\n       */ }, { key: \"color\", get: function get()\n    {\n      return this.style.color;\n    }\n\n    /**\n       * The color of this sprite viewable object. The color is multiplied with the\n       * highlighted sprite pixel colors in shader for display.\n       * @returns {THREE.Color} The color of this sprite viewable object. The color is\n       * multiplied with the highlighted sprite pixel colors in shader for display.\n       */ }, { key: \"highlightedColor\", get: function get()\n    {\n      return this.style.highlightedColor;\n    } }]);return SpriteViewable;}(CustomViewable);\n\n\n/**\n                                                    * An object that manages a collection of `CustomViewable` object. A `ViewableData`\n                                                    * object is added for display through `DataVisualization.addViewables` API before\n                                                    * any of its `CustomViewable` can be displayed.\n                                                    *\n                                                    * @class\n                                                    * @memberof Autodesk.DataVisualization.Core\n                                                    * @alias Autodesk.DataVisualization.Core.ViewableData\n                                                    */var\nViewableData = /*#__PURE__*/function () {\n  /**\n                                          * Constructs an instance of `ViewableData` object\n                                          *\n                                          * @param {Object} options The options to configure `ViewableData` object with.\n                                          * @param {number} options.atlasWidth The initial sprite atlas width in\n                                          * pixels, to accommodate subsequent `CustomViewable` object that are added.\n                                          * If not specified, the atlas width of `1920` pixels is used.\n                                          * @param {number} options.atlasHeight The initial sprite atlas height in\n                                          * pixels, to accommodate subsequent `CustomViewable` object that are added.\n                                          * If not specified, the atlas height of `1080` pixels is used.\n                                          *\n                                          * @example\n                                          *  const viewableData = new Autodesk.DataVisualization.Core.ViewableData({\n                                          *    atlasWidth: 512,\n                                          *    atlasHeight: 512\n                                          *  });\n                                          */\n  function ViewableData() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};_classCallCheck(this, ViewableData);\n    this._styleMap = new Map();\n    this._viewablesMap = new Map();\n    this._spriteAtlas = new SpriteAtlas(\n    options.atlasWidth || 1920,\n    options.atlasHeight || 1080,\n    2);\n\n  }\n\n  /**\n     * All the `CustomViewable` that are added to this `ViewableData` object.\n     * @returns {CustomViewable[]} All the `CustomViewable` that are added to\n     * this `ViewableData` object.\n     */_createClass(ViewableData, [{ key: \"addViewable\",\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n                                                          * Adds a custom viewable object to the `ViewableData`.\n                                                          *\n                                                          * @param {CustomViewable} viewable The custom viewable to be added\n                                                          * to the `ViewableData` object.\n                                                          */value: function addViewable(\n    viewable) {var _this = this;\n      if (viewable.type == ViewableType.SPRITE) {\n        /** @type {Set<string>} */\n        var spriteUrls = new Set();\n        spriteUrls.add(viewable.style.url);\n\n        if (viewable.style.highlightedUrl) {\n          spriteUrls.add(viewable.style.highlightedUrl);\n        }\n\n        viewable.style.preloadedSprites.forEach(function (url) {return spriteUrls.add(url);});\n        spriteUrls.forEach(function (url) {return _this.spriteAtlas.addSprite(url);});\n      }\n\n      this._viewablesMap.set(viewable.dbId, viewable);\n    }\n\n    /**\n       * @private\n       * Gets the texture coordinates corresponding to a given sprite URL.\n       *\n       * @param {string} url A URL of sprite for which UV texture coordinates is\n       * to be obtained. This URL should be one of the values specified through\n       * the constructor of `ViewableStyle` or `preloadSprite` API.\n       *\n       * @returns {{ x: number, y: number, w: number, h: number}} The texture\n       * coordinates of the top-left and bottom-right corner of the sprite. Note\n       * that `w` and `h` represent the actual texture coordinates of the\n       * bottom-right corner of the sprite, not its width or height.\n       */ }, { key: \"getSpriteUV\", value: function getSpriteUV(\n    url) {\n      return this._spriteAtlas.spriteUV(url);\n    }\n\n    /**\n       * Get the UV values of a viewable from the sprite atlas\n       *\n       * @param {String} dbId Id of the viewable to obtain the UV of.\n       * @param {boolean} highlighted Boolean value to obtain the normal sprite UV or the highlighted version\n       * @returns {Object} UV values of the requested viewable\n       */ }, { key: \"getViewableUV\", value: function getViewableUV(\n    dbId, highlighted) {\n      var style = this._viewablesMap.get(dbId).style;\n      if (highlighted && style.highlightedUrl) {\n        return this._spriteAtlas.spriteUV(style.highlightedUrl);\n      } else {\n        return this._spriteAtlas.spriteUV(style.url);\n      }\n    }\n\n    /**\n       * Get the color values of a viewable\n       *\n       * @param {String} dbId Id of the viewable to obtain the UV of.\n       * @param {boolean} highlighted Boolean value to obtain the normal sprite UV or the highlighted version\n       * @returns {THREE.Color} Color of the requested viewable\n       */ }, { key: \"getViewableColor\", value: function getViewableColor(\n    dbId, highlighted) {\n      var style = this._viewablesMap.get(dbId).style;\n      if (highlighted) {\n        return style.highlightedColor;\n      } else {\n        return style.color;\n      }\n    }\n\n    /**\n       * Marks the `ViewableData` as completed. The final sprite atlas will be\n       * generated based on all the `CustomViewable` objects added prior to this.\n       * This function must be called before the `ViewableData` is added for display\n       * through `DataVisualization.addViewables` API.\n       */ }, { key: \"finish\", value: function () {var _finish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (\n\n                  this._spriteAtlas.finish());case 2:case \"end\":return _context.stop();}}}, _callee, this);}));function finish() {return _finish.apply(this, arguments);}return finish;}() }, { key: \"viewables\", get: function get() {return _toConsumableArray(this._viewablesMap.values());} /**\n                                                                                                                                                                                                                                                                                                 * @private\n                                                                                                                                                                                                                                                                                                 * @returns {SpriteAtlas} For internal use only.\n                                                                                                                                                                                                                                                                                                 */ }, { key: \"spriteAtlas\", get: function get() {return this._spriteAtlas;} }]);return ViewableData;}();\nexport {\nViewableStyle,\nSpriteViewable,\nCustomViewable,\nViewableData,\nViewableType };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import {\nSurfaceShadingNode,\nSurfaceShadingGroup,\nSurfaceShadingData,\nSurfaceShadingPoint } from\n\"./heatmap/SurfaceShadingData\";\n\n/**\n                                 * The object that defines the structure of a Device in a Room.\n                                 *\n                                 * @typedef {Object} RoomDevice\n                                 * @property {string} id An ID to identify this device\n                                 * @property {Object} position World coordinates of this device\n                                 * @property {number} position.x X coordinates of this device\n                                 * @property {number} position.y Y coordinates of this device\n                                 * @property {number} position.z Z coordinates of this device\n                                 * @property {Array.<string>} sensorTypes The types/properties this device exposes\n                                 * @property {string} type A type identifier for this device. Ex: Thermometer\n                                 * @property {string} [name] An optional name identifier for the device\n                                 * @example\n                                 *  {\n                                 *      id: \"cafeteria-entrace-01\",\n                                 *      position: { x: -159.2782, y: -50.4998, z: -16.9196 },\n                                 *      sensorTypes: [\"temperature\", \"humidity\"],\n                                 *      type: 'thermometer'\n                                 *  },\n                                 */\n\n/**\n                                     * A class that represents a room found in the model. See\n                                     * {@link Autodesk.DataVisualization.Core.LevelRoomsMap|LevelRoomsMap} for more details.\n                                     *\n                                     * @class\n                                     * @memberof Autodesk.DataVisualization.Core\n                                     * @alias Autodesk.DataVisualization.Core.Room\n                                     */var\nRoom = /*#__PURE__*/function () {\n  /**\n                                  * Constructs an instance of `Room` object. Client code should not construct\n                                  * rooms directly, but to obtain them from `LevelRoomsMap.getRoomsOnLevel` API.\n                                  *\n                                  * @param {number} id The `DbId` of the room\n                                  * @param {string} name The name of the room\n                                  * @param {THREE.Box3} bounds The bounding box of the room\n                                  */\n  function Room(id, name, bounds) {_classCallCheck(this, Room);\n    this._id = id;\n    this._name = name;\n    this._bounds = bounds;\n\n    /**\n                            * @private\n                            * @type {RoomDevice[]}\n                            */\n    this._devices = [];\n  }\n\n  /**\n     * @private\n     * @param {{properties: any[]}} value For internal use only\n     */_createClass(Room, [{ key: \"addDevice\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n                                                * Adds a {@link RoomDevice} to the {@link Room}\n                                                *\n                                                * @param {RoomDevice} device The `Device` to be added to the room\n                                                */value: function addDevice(\n    device) {\n      this._devices.push(device);\n    } }, { key: \"info\", set: function set(value) {this._info = value;} /**\n                                                                        * Returns the `DbId` of the room\n                                                                        * @returns {number} The `DbId` of the room\n                                                                        */, /**\n                                                                             * @private\n                                                                             * @returns {{properties: any[]}} For internal use only\n                                                                             */get: function get() {return this._info;} }, { key: \"id\", get: function get() {return this._id;} /**\n                                                                                                                                                                                * Returns the name of the room\n                                                                                                                                                                                * @returns {string} The name of the room\n                                                                                                                                                                                */ }, { key: \"name\", get: function get() {return this._name;} /**\n                                                                                                                                                                                                                                               * Returns the bounding box of the room\n                                                                                                                                                                                                                                               * @returns {THREE.Box3} The bounding box of the room\n                                                                                                                                                                                                                                               */ }, { key: \"bounds\", get: function get() {return this._bounds;} /**\n                                                                                                                                                                                                                                                                                                                  * Gets the list of all `Device` objects in the room. If the room does\n                                                                                                                                                                                                                                                                                                                  * not contain any devices, an empty array will be returned.\n                                                                                                                                                                                                                                                                                                                  * @returns {RoomDevice[]} The list of all `Device` objects in the room.\n                                                                                                                                                                                                                                                                                                                  * If the room does not contain any devices, an empty array\n                                                                                                                                                                                                                                                                                                                  * will be returned.\n                                                                                                                                                                                                                                                                                                                  */ }, { key: \"devices\", get: function get() {return this._devices;} }]);return Room;}(); /**\n                                                                                                                                                                                                                                                                                                                                                                                                            * A class that maps level names to one or more `Room` objects that are found\n                                                                                                                                                                                                                                                                                                                                                                                                            * on the corresponding levels. See\n                                                                                                                                                                                                                                                                                                                                                                                                            * {@link Autodesk.DataVisualization.Core.Room|Room} for details\n                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                            * @class\n                                                                                                                                                                                                                                                                                                                                                                                                            * @memberof Autodesk.DataVisualization.Core\n                                                                                                                                                                                                                                                                                                                                                                                                            * @alias Autodesk.DataVisualization.Core.LevelRoomsMap\n                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                                                                                                                                                            * @example\n                                                                                                                                                                                                                                                                                                                                                                                                            *  // Gets the level-to-rooms mapping from the structural model\n                                                                                                                                                                                                                                                                                                                                                                                                            *  const info = new Autodesk.DataVisualization.Core.ModelStructureInfo(model);\n                                                                                                                                                                                                                                                                                                                                                                                                            *  const levelRoomsMap = await info.getLevelRoomsMap();\n                                                                                                                                                                                                                                                                                                                                                                                                            */var LevelRoomsMap = /*#__PURE__*/function () {function LevelRoomsMap() {_classCallCheck(this, LevelRoomsMap);}_createClass(LevelRoomsMap, [{ key: \"addRoomToLevel\", /**\ndds a {@link Room} object to a named level.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * @param {string} levelName Name of the level to add the `Room` to.\nparam {Autodesk.DataVisualization.Core.Room} room The `Room`\nobject to be added to the level.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *\nalias Autodesk.DataVisualization.Core.LevelRoomsMap#addRoomToLevel\nvalue: function addRoomToLevel(levelName, room) {if (!this[levelName]) {this[levelName] = [];}this[levelName].push(room);} /**\nets all the rooms on a given level.\nnparam {string} levelName Name of the level for which rooms\nare to be retrieved.\nparam {boolean} onlyRoomsWithDevices Set this to `true` to return only rooms\nwith devices in them, or `false` to return all rooms on the level.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * @returns {Room[]} List of all the rooms found on the level, or an empty list\nif no room is found.\nnalias Autodesk.DataVisualization.Core.LevelRoomsMap#getRoomsOnLevel\nnexample\net all Room objects on \"Level 1\", with or without devices\nconst roomsOnLevelOne = levelRoomsMap.getRoomsOnLevel(\"Level 1\", false);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *\net only Room objects on \"Level 1\" that contain devices\nconst roomsWithDevices = levelRoomsMap.getRoomsOnLevel(\"Level 1\", true);\n}, { key: \"getRoomsOnLevel\", value: function getRoomsOnLevel(levelName, onlyRoomsWithDevices) {/** @type {Room[]} */var rooms = this[levelName] || [];\n      if (onlyRoomsWithDevices) {\n        return rooms.filter(function (room) {return room.devices.length > 0;});\n      } else {\n        return rooms;\n      }\n    } }]);return LevelRoomsMap;}();\n\n\n/**\n                                     * Data class to deal with the structural information of a model.\n                                     *\n                                     * @class\n                                     * @memberof Autodesk.DataVisualization.Core\n                                     * @alias Autodesk.DataVisualization.Core.ModelStructureInfo\n                                     */var\nModelStructureInfo = /*#__PURE__*/function () {\n  /**\n                                                * Constructs an instance of `ModelStructureInfo` object.\n                                                *\n                                                * @param {Model} model The model from which structural information\n                                                * is to be generated.\n                                                *\n                                                * @example\n                                                *  function onModelLoaded(event) {\n                                                *    const model = event.model;\n                                                *    const info = new Autodesk.DataVisualization.Core.ModelStructureInfo(model);\n                                                *  }\n                                                *\n                                                *  // Register to be notified when the model is fully loaded\n                                                *  viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n                                                *    onModelLoaded, { once: true });\n                                                */\n  function ModelStructureInfo(model) {_classCallCheck(this, ModelStructureInfo);\n    this.model = model;\n\n    /**\n                         * @private\n                         * @type {Room[]}\n                         */\n    this.rooms = null;\n  }\n\n  /**\n     * @private\n     * Given a parent node, gets the immediate child nodes by its name.\n     *\n     * @param {string} name Name to filter the child node with.\n     * @param {number} [parentId] An optional parent node `DbId` for which the\n     * immediate child nodes are to be searched. Root ID of the model will\n     * be used if this parameter is omitted.\n     *\n     * @returns {Array.<number>} A list of all child node `DbId`s that match\n     * the filter name.\n     * @memberof Autodesk.DataVisualization.Core\n     * @alias Autodesk.DataVisualization.Core.ModelStructureInfo#getImmediateChildNodesByName\n     */_createClass(ModelStructureInfo, [{ key: \"getImmediateChildNodesByName\", value: function getImmediateChildNodesByName(\n    name, parentId) {\n      var model = this.model;\n      var it = model.getInstanceTree();\n      var childIds = [];\n\n      if (it) {\n        parentId = parentId == undefined ? it.getRootId() : parentId;\n\n        it.enumNodeChildren(\n        parentId,\n        function (id) {\n          var n = it.getNodeName(id, true);\n\n          // some time, the name is `Rooms (11)`\n          if (n && n.indexOf && n.indexOf(name) >= 0) {\n            childIds.push(id);\n          }\n        },\n        false);\n\n      }\n\n      return childIds;\n    }\n\n    /**\n       * Gets the structural info and build level-to-rooms map.\n       *\n       * @param {boolean} [keepRoomDetail=false] Whether to keep the room\n       * detailed properties after this call completes.\n       * @param {string} [nodeName] Optional. Name of the node whose immediate\n       * child nodes are to be retrieved. If this parameter is not supplied, or\n       * if it is an empty string, then the default value \"Rooms\" will be used.\n       *\n       * @returns {LevelRoomsMap} The level-to-rooms map\n       */ }, { key: \"getLevelRoomsMap\", value: function () {var _getLevelRoomsMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var _this = this;var keepRoomDetail,nodeName,levelRoomsMap,rooms,_args = arguments;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n                keepRoomDetail = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;nodeName = _args.length > 1 ? _args[1] : undefined;if (\n                this.levelRoomsMap) {_context.next = 9;break;}\n                levelRoomsMap = new LevelRoomsMap();_context.next = 6;return (\n                  this.getRoomList(nodeName));case 6:rooms = _context.sent;\n                rooms.forEach(function (room) {\n                  var levelName = _this.getLevel(room);\n                  if (!keepRoomDetail) {\n                    room.info = undefined;\n                  }\n\n                  if (levelName != undefined) {\n                    levelRoomsMap.addRoomToLevel(levelName, room);\n                  }\n                });\n\n                this.levelRoomsMap = levelRoomsMap;case 9:return _context.abrupt(\"return\",\n\n\n                this.levelRoomsMap);case 10:case \"end\":return _context.stop();}}}, _callee, this);}));function getLevelRoomsMap() {return _getLevelRoomsMap.apply(this, arguments);}return getLevelRoomsMap;}()\n\n\n    /**\n                                                                                                                                                                                                                 * @private\n                                                                                                                                                                                                                 * Gets the name of the level from the given room, if any is specified.\n                                                                                                                                                                                                                 *\n                                                                                                                                                                                                                 * @param {Room} room The room for which the level name is to be retrieved.\n                                                                                                                                                                                                                 * @returns {string|undefined} The name of level if one is specified,\n                                                                                                                                                                                                                 * or `undefined` otherwise.\n                                                                                                                                                                                                                 */ }, { key: \"getLevel\", value: function getLevel(\n    room) {\n      if (room && room.info && room.info.properties) {\n        var prop = room.info.properties.find(function (p) {\n          return p.type == 20 && p.attributeName == \"Level\";\n        });\n\n        return prop ? prop.displayValue : undefined;\n      }\n    }\n\n    /**\n       * @private\n       * Gets a list of rooms found in the current model.\n       *\n       * @param {string} [nodeName] Optional. Name of the node whose immediate\n       * child nodes are to be retrieved. If this parameter is not supplied, or\n       * if it is an empty string, then the default value \"Rooms\" will be used.\n       *\n       * @returns {Room[]}\n       */ }, { key: \"getRoomList\", value: function () {var _getRoomList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(\n      nodeName) {var _this2 = this;var roomNode, model, rooms, roomsRootId, it, promises;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (\n                this.rooms) {_context2.next = 10;break;}\n                // Default value for parameter does not prevent empty\n                // string from being passed in, so this check is necessary.\n                nodeName = nodeName ? nodeName : \"Rooms\";\n\n                roomNode = this.getImmediateChildNodesByName(nodeName);\n                model = this.model;\n\n                /** @type {Room[]} */\n                rooms = [];\n\n                if (roomNode && roomNode.length > 0) {\n                  roomsRootId = roomNode[0];\n\n                  it = model.getInstanceTree();\n                  if (it) {\n                    it.enumNodeChildren(\n                    roomsRootId,\n                    function (id) {\n                      var name = it.getNodeName(id, true);\n                      var bounds = _this2.getRoomBounds(id);\n                      rooms.push(new Room(id, name, bounds));\n                    },\n                    false);\n\n                  }\n                }\n\n                // Extract detailed room properties.\n                promises = rooms.map(function (room) {\n                  return new Promise(function (resolve, reject) {\n                    model.getProperties2(\n                    room.id,\n                    function (info) {\n                      room.info = info;\n                      resolve(room);\n                    },\n                    function (error) {\n                      resolve(room);\n                    });\n\n                  });\n                });_context2.next = 9;return (\n\n                  Promise.all(promises));case 9:\n                this.rooms = rooms;case 10:return _context2.abrupt(\"return\",\n\n\n                this.rooms);case 11:case \"end\":return _context2.stop();}}}, _callee2, this);}));function getRoomList(_x) {return _getRoomList.apply(this, arguments);}return getRoomList;}()\n\n\n    /**\n                                                                                                                                                                                              * @private\n                                                                                                                                                                                              * Gets the bounding box of a room given its `DbId`. The bounding box is\n                                                                                                                                                                                              * expanded to include bounding boxes of all the fragments that made up\n                                                                                                                                                                                              * the room.\n                                                                                                                                                                                              *\n                                                                                                                                                                                              * @param {number} roomId The `DbId` of the room.\n                                                                                                                                                                                              * @returns {THREE.Box3} The bounding box of the room with given `DbId`.\n                                                                                                                                                                                              */ }, { key: \"getRoomBounds\", value: function getRoomBounds(\n    roomId) {\n      var bounds = new THREE.Box3();\n      var fragBounds = new THREE.Box3();\n      var it = this.model.getInstanceTree();\n      var fragList = this.model.getFragmentList();\n\n      if (it) {\n        it.enumNodeFragments(\n        roomId,\n        function (fragId) {\n          fragList.getWorldBounds(fragId, fragBounds);\n          bounds.union(fragBounds);\n        },\n        true);\n\n      }\n\n      return bounds;\n    }\n\n    /**\n       * @private\n       * Assign cient-defined devices to rooms based on their 3D space positions\n       * and the bounding box of each room.\n       *\n       * @param {RoomDevice[]} [devices] The devices to be assigned to loaded rooms.\n       * @param {string} [nodeName] Optional. Name of the node whose immediate\n       * child nodes are to be retrieved. If this parameter is not supplied, or\n       * if it is an empty string, then the default value \"Rooms\" will be used.\n       */ }, { key: \"mapDevicesInRoom\", value: function () {var _mapDevicesInRoom = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {var devices,nodeName,rooms,i,room,j,device,names,_args3 = arguments;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:\n                devices = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : [];nodeName = _args3.length > 1 ? _args3[1] : undefined;_context3.next = 4;return (\n\n\n\n                  this.getRoomList(nodeName));case 4:rooms = _context3.sent;\n                devices = devices.slice(0);\n\n                for (i = 0; devices.length > 0 && i < rooms.length; i++) {\n                  room = rooms[i];\n\n                  for (j = 0; j < devices.length; j++) {\n                    device = devices[j];\n\n                    if (this.roomGeomContainsPoint(room, device.position)) {\n                      // Build bi-directional references\n                      device.roomId = room.id;\n                      room.addDevice(device);\n\n                      // Remove the device from the list, to avoid future iteration\n                      devices.splice(j, 1);\n                      j--;\n                    }\n                  }\n                }\n\n                if (devices.length > 0) {\n                  names = devices.map(function (dev) {return \"\".concat(dev.id, \" (\").concat(dev.name, \")\");});\n                  console.warn(\"Some devices did not map to a room: \".concat(names.join(\", \")));\n                }case 8:case \"end\":return _context3.stop();}}}, _callee3, this);}));function mapDevicesInRoom() {return _mapDevicesInRoom.apply(this, arguments);}return mapDevicesInRoom;}()\n\n\n    /**\n                                                                                                                                                                                               * Assigns client-defined devices to rooms based on their 3D space positions\n                                                                                                                                                                                               * and the bounding box of each room, then generate hierarchical shading data\n                                                                                                                                                                                               * based on the assignment.\n                                                                                                                                                                                               *\n                                                                                                                                                                                               * @param {RoomDevice[]} devices The devices to be assigned to loaded rooms.\n                                                                                                                                                                                               * @param {LevelRoomsMap} [levels] Optional. The level-to-rooms map. If none\n                                                                                                                                                                                               * is supplied, one will be generated internally.\n                                                                                                                                                                                               * @param {string} [nodeName] Optional. Name of the node whose immediate\n                                                                                                                                                                                               * child nodes are to be retrieved. If this parameter is not supplied, or\n                                                                                                                                                                                               * if it is an empty string, then the default value \"Rooms\" will be used.\n                                                                                                                                                                                               * @returns {SurfaceShadingData} The resulting `SurfaceShadingData` object.\n                                                                                                                                                                                               *\n                                                                                                                                                                                               * @alias Autodesk.DataVisualization.Core.ModelStructureInfo#generateSurfaceShadingData\n                                                                                                                                                                                               *\n                                                                                                                                                                                               * @example\n                                                                                                                                                                                               *  // 'devices' is a list of 'Device' objects in a 'Room'.\n                                                                                                                                                                                               *  const info = new Autodesk.DataVisualization.Core.ModelStructureInfo(model);\n                                                                                                                                                                                               *  const shadingData = await info.generateSurfaceShadingData(devices);\n                                                                                                                                                                                               *  dataVizExtn.setupSurfaceShading(model, shadingData);\n                                                                                                                                                                                               */ }, { key: \"generateSurfaceShadingData\", value: function () {var _generateSurfaceShadingData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {var devices,levels,nodeName,shadingData,_loop,levelName,_args4 = arguments;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:\n                devices = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : [];levels = _args4.length > 1 ? _args4[1] : undefined;nodeName = _args4.length > 2 ? _args4[2] : undefined;if (\n                levels) {_context4.next = 9;break;}_context4.next = 6;return (\n                  this.getLevelRoomsMap(false, nodeName));case 6:levels = _context4.sent;_context4.next = 9;return (\n                  this.mapDevicesInRoom(devices, nodeName));case 9:\n\n\n                shadingData = new SurfaceShadingData();_loop = function _loop(\n                levelName) {\n                  var rooms = levels[levelName];\n                  var subGroup = new SurfaceShadingGroup(levelName);\n\n                  rooms.forEach(function (room) {\n                    var node = new SurfaceShadingNode(room.name, room.id);\n                    room.devices.forEach(function (device) {\n                      var styleId = device.deviceModel ? device.deviceModel.id : device.type;\n                      node.addPoint(\n                      new SurfaceShadingPoint(\n                      device.id,\n                      device.position,\n                      device.sensorTypes,\n                      device.name,\n                      { styleId: styleId }));\n\n\n                    });\n\n                    subGroup.addChild(node);\n                  });\n\n                  shadingData.addChild(subGroup);};for (levelName in levels) {_loop(levelName);\n                }\n\n                shadingData.initialize(this.model);return _context4.abrupt(\"return\",\n                shadingData);case 14:case \"end\":return _context4.stop();}}}, _callee4, this);}));function generateSurfaceShadingData() {return _generateSurfaceShadingData.apply(this, arguments);}return generateSurfaceShadingData;}()\n\n\n    /**\n                                                                                                                                                                                                                                          * @private\n                                                                                                                                                                                                                                          * Checks if a given point is within the bounds of a room.\n                                                                                                                                                                                                                                          *\n                                                                                                                                                                                                                                          * @param {Room} room The room against which a point is checked.\n                                                                                                                                                                                                                                          * @param {{x: number, y: number, z: number}} point The point to be checked.\n                                                                                                                                                                                                                                          * @returns {boolean} `true` if the point is within the bounds of the\n                                                                                                                                                                                                                                          * room, or `false` otherwise.\n                                                                                                                                                                                                                                          */ }, { key: \"roomGeomContainsPoint\", value: function roomGeomContainsPoint(\n    room, point) {\n      return room.bounds && room.bounds.containsPoint(point);\n    } }]);return ModelStructureInfo;}();\n\n\nexport { Room, LevelRoomsMap, ModelStructureInfo };","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**\nool that will handle the selection/hightlight for the model created by the CustomModelScene\nn\nimport { MOUSE_CLICK, MOUSE_CLICK_OUT, MOUSE_HOVERING } from \"./Constants.js\";\n\nvar av = Autodesk.Viewing;\nvar GlobalManagerMixin = av.GlobalManagerMixin;\n\nexport var SceneTool = /*#__PURE__*/function (_av$ToolInterface) {_inherits(SceneTool, _av$ToolInterface);var _super = _createSuper(SceneTool);\n  function SceneTool(viewer) {var _this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, SceneTool);\n    _this = _super.call(this);\n    _this.names = [\"HyperionTool\"];\n\n    _this.options = options;\n    _this.setGlobalManager(viewer.globalManager);\n\n    _this.viewer = viewer;\n    _this.delegate = options.delegate;\n\n    _this.init();\n\n    _this.hoveringDbId = 0;\n    _this.selectedDbId = 0;return _this;\n  }_createClass(SceneTool, [{ key: \"init\", value: function init()\n\n    {var _this2 = this;\n      var viewerImpl = this.viewer.impl;\n\n      this.activate = function (name) {\n        _this2.active = true;\n      };\n\n      this.deactivate = function (name) {\n        _this2.clearMarkedObject();\n        _this2.active = false;\n      };\n\n      this.handleSingleClick = function (event, button) {\n        var isEventHandled = false;\n\n        if (button === 0) {\n          var res = [];\n          var vpVec = viewerImpl.clientToViewport(event.canvasX, event.canvasY);\n\n          var renderer = viewerImpl.renderer();\n          var overlayIdTarget = renderer.getOverlayIdTarget();\n          if (!overlayIdTarget) {\n            return false;\n          }\n\n          var dbId = renderer.idAtPixel(vpVec.x, vpVec.y, res, [overlayIdTarget]);\n\n          // This handles two scenarios: (1) there is a change in selection\n          // (i.e. going between with/without selection, or go from one selection to\n          // another selection); (2) user continues to click outside all the sprites.\n          //\n          if (_this2.selectedDbId != dbId || _this2.selectedDbId == 0) {\n            // When `dbId === 0` user clicks on an empty spot with no sprite.\n            // If there was a selected sprite, then we need to dispatch a\n            // `MOUSE_CLICK_OUT` event so client code has the chance to clear\n            // any changes that came with the previous click-selection event.\n            //\n            if (_this2.selectedDbId) {\n              var _clickEvent = {\n                type: MOUSE_CLICK_OUT,\n                dbId: _this2.selectedDbId,\n                originalEvent: event };\n\n\n              _this2.viewer.dispatchEvent(_clickEvent);\n              if (!_clickEvent.hasStopped) {\n                _this2.clearMarkedObject();\n                _this2.viewer.impl.invalidate(false, false, true);\n              }\n            }\n\n            // Update selection to the new `dbId` (even if it is `0`)\n            _this2.selectedDbId = dbId;\n            var clickedViewPoint = viewerImpl.hitTestViewport(vpVec.clone(), false);\n\n            // If there is a new selection, raise selection event.\n            var clickEvent = {\n              type: MOUSE_CLICK,\n              dbId: dbId,\n              clickInfo: clickedViewPoint,\n              originalEvent: event };\n\n\n            _this2.viewer.dispatchEvent(clickEvent);\n            if (!clickEvent.hasStopped) {\n              _this2.markObject([dbId]);\n              _this2.viewer.impl.invalidate(false, false, true);\n            }\n\n            // Setting 'isEventHandled = true' causes default viewer object selecction\n            // to be turned off (i.e. no object that is clicked on will be selected).\n            // We only want that when user clicks on any sprite, otherwise the default\n            // viewer selection should be allowed to continue.\n            //\n            if (_this2.selectedDbId) {\n              isEventHandled = true;\n            }\n          }\n        }\n\n        return isEventHandled;\n      };\n\n      this.handleSingleTap = function (event) {\n        return _this2.handleSingleClick(event, 0);\n      };\n\n      this.handleDoubleClick = function (event, button) {\n        return false;\n      };\n\n      this.handleButtonDown = function (event) {\n        _this2.buttonDown = true;\n        return false;\n      };\n\n      this.handleButtonUp = function (event) {\n        _this2.buttonDown = false;\n        return false;\n      };\n\n      this.handleMouseMove = function (event) {\n        if (!_this2.buttonDown) {\n          var vpVec = viewerImpl.clientToViewport(event.canvasX, event.canvasY);\n          var overlayIdTarget = viewerImpl.renderer().getOverlayIdTarget();\n\n          if (!overlayIdTarget) {\n            return false;\n          }\n\n          var res = [];\n          var dbId = viewerImpl.\n          renderer().\n          idAtPixel(vpVec.x, vpVec.y, res, [overlayIdTarget]);\n\n          // There is a change in sprite that is hovered over\n          if (_this2.hoveringDbId != dbId) {\n            // The mouse has either hovered over a new sprite, or hovered off\n            // an existing sprite. When the mouse first hovers over a sprite,\n            // the `targetDbId` should be the `dbId` of the sprite that the mouse\n            // cursor just entered. When the mouse hovers off an existing sprite\n            // it was on (i.e. when `dbId` becomes `0`), then the `targetDbId`\n            // should be the `dbId` of that existing sprite (which in this case,\n            // is the `hoveringDbId`).\n            //\n            var targetDbId = dbId != 0 ? dbId : _this2.hoveringDbId;\n            _this2.hoveringDbId = dbId;\n\n            var hovering = dbId != 0;\n            _this2.viewer.dispatchEvent({\n              type: MOUSE_HOVERING,\n              dbId: targetDbId,\n              hovering: hovering,\n              originalEvent: event });\n\n\n            return true; // Dispatched the event.\n          }\n        }\n      };\n\n      this.markObject = function (dbIds) {\n        if (!(dbIds instanceof Array)) {\n          dbIds = [dbIds];\n        }\n\n        if (!_this2.delegate.hasViewables) {\n          return; // There's no viewable in the scene\n        }\n\n        var geometries = _this2.delegate.mapDbIdsToGeometries(dbIds);\n        var dbIdIndex = new Set(dbIds);\n\n        geometries.map(function (geometry) {\n          // here we need to update the attribute of the geometry\n          if (geometry && geometry.attributes[\"id\"] && geometry.attributes[\"pointScale\"]) {\n            var scale = geometry.attributes[\"pointScale\"].array;\n            var uvp = geometry.attributes[\"uvp\"].array;\n            var colors = geometry.attributes[\"color\"].array;\n            var ids = geometry.attributes[\"id\"].array;\n\n            for (var i = 0; i < ids.length; i += 3) {\n              var id = ids[i] + (ids[i + 1] << 8) + (ids[i + 2] << 16);\n              var index = i / 3;\n              var isHighlighted = dbIdIndex.has(id);\n              scale[index] = isHighlighted ? 1.5 : 1;\n              var uv = _this2.delegate.viewableData.getViewableUV(id, isHighlighted);\n\n              if (uv) {\n                uvp[index * 4] = uv.x;\n                uvp[index * 4 + 1] = uv.y;\n                uvp[index * 4 + 2] = uv.w;\n                uvp[index * 4 + 3] = uv.h;\n              }\n\n              var color = _this2.delegate.viewableData.getViewableColor(id, isHighlighted);\n\n              if (color) {\n                colors[index * 3] = color.r * 255;\n                colors[index * 3 + 1] = color.g * 255;\n                colors[index * 3 + 2] = color.b * 255;\n              }\n            }\n\n            geometry.attributes[\"pointScale\"].needsUpdate = true;\n            geometry.attributes[\"uvp\"].needsUpdate = true;\n            geometry.attributes[\"color\"].needsUpdate = true;\n          }\n        });\n\n        _this2.markedFragments = geometries;\n      };\n\n      this.clearMarkedObject = function () {\n        if (!_this2.delegate.hasViewables) {\n          _this2.markedFragments = [];\n          return; // There's no viewable in the scene\n        }\n\n        var fragments = _this2.markedFragments || [];\n        _this2.markedFragments = []; // Clear internal references.\n\n        if (fragments) {\n          fragments.map(function (geometry) {\n            // here we need to update the attribute of the geometry\n            if (geometry && geometry.attributes[\"pointScale\"]) {\n              var scale = geometry.attributes[\"pointScale\"].array;\n              var uvp = geometry.attributes[\"uvp\"].array;\n              var colors = geometry.attributes[\"color\"].array;\n              var ids = geometry.attributes[\"id\"].array;\n              for (var i = 0; i < ids.length; i += 3) {\n                var id = ids[i] + (ids[i + 1] << 8) + (ids[i + 2] << 16);\n                var index = i / 3;\n                scale[index] = 1;\n                var uv = _this2.delegate.viewableData.getViewableUV(id, false);\n                if (uv) {\n                  uvp[index * 4] = uv.x;\n                  uvp[index * 4 + 1] = uv.y;\n                  uvp[index * 4 + 2] = uv.w;\n                  uvp[index * 4 + 3] = uv.h;\n                }\n                var color = _this2.delegate.viewableData.getViewableColor(id, false);\n                if (color) {\n                  colors[index * 3] = color.r * 255;\n                  colors[index * 3 + 1] = color.g * 255;\n                  colors[index * 3 + 2] = color.b * 255;\n                }\n              }\n              geometry.attributes[\"pointScale\"].needsUpdate = true;\n              geometry.attributes[\"uvp\"].needsUpdate = true;\n              geometry.attributes[\"color\"].needsUpdate = true;\n            }\n          });\n\n          _this2.viewer.impl.invalidate(false, false, true);\n        }\n      };\n\n      this.invalidateViewablesDirect = function (dbIds, meshes, viewableData, callback) {\n        if (!dbIds || !meshes || !callback) {\n          throw new Error(\"Parameters of 'invalidateViewables' are mandatory\");\n        }\n\n        if (!(dbIds instanceof Array)) {\n          dbIds = [dbIds];\n        }\n\n        var dbIdSet = new Set(dbIds);\n\n        /** @type {Map<number, CustomViewable>} */\n        var viewables = new Map();\n        viewableData.viewables.forEach(function (v) {return viewables.set(v.dbId, v);});\n\n        var sceneUpdated = false;\n\n        var mesh = meshes[0];\n        var geometry = mesh.geometry;\n        var ids = geometry.attributes[\"id\"].array;\n\n        for (var i = 0; i < ids.length; i += 3) {\n          var dbId = ids[i] + (ids[i + 1] << 8) + (ids[i + 2] << 16);\n          if (!dbIdSet.has(dbId)) {\n            continue;\n          }\n\n          var updates = callback(viewables.get(dbId));\n          if (!updates) {\n            continue;\n          }\n\n          var pointIndex = i / 3;\n          if (updates.position) {\n            var positions = geometry.attributes[\"position\"].array;\n            geometry.attributes[\"position\"].needsUpdate = true;\n            positions[pointIndex * 3 + 0] = updates.position.x;\n            positions[pointIndex * 3 + 1] = updates.position.y;\n            positions[pointIndex * 3 + 2] = updates.position.z;\n\n            sceneUpdated = true;\n          }\n\n          if (updates.url) {\n            var uv = viewableData.getSpriteUV(updates.url);\n            if (uv) {\n              var uvp = geometry.attributes[\"uvp\"].array;\n              geometry.attributes[\"uvp\"].needsUpdate = true;\n              uvp[pointIndex * 4 + 0] = uv.x;\n              uvp[pointIndex * 4 + 1] = uv.y;\n              uvp[pointIndex * 4 + 2] = uv.w;\n              uvp[pointIndex * 4 + 3] = uv.h;\n\n              sceneUpdated = true;\n            }\n          }\n\n          if (updates.color) {\n            var colors = geometry.attributes[\"color\"].array;\n            geometry.attributes[\"color\"].needsUpdate = true;\n            colors[pointIndex * 3 + 0] = updates.color.r * 255;\n            colors[pointIndex * 3 + 1] = updates.color.g * 255;\n            colors[pointIndex * 3 + 2] = updates.color.b * 255;\n\n            sceneUpdated = true;\n          }\n\n          if (updates.scale !== undefined) {\n            if (updates.scale > 2.0 || updates.scale < 0) {\n              var msg = \"invalidateViewables: 'scale' of '\".concat(updates.scale, \"' out of range [0, 2]\");\n              console.warn(msg);\n            }\n            var scale = geometry.attributes[\"pointScale\"].array;\n            geometry.attributes[\"pointScale\"].needsUpdate = true;\n            scale[pointIndex] = updates.scale;\n\n            sceneUpdated = true;\n          }\n        }\n\n        if (sceneUpdated) {\n          _this2.viewer.impl.invalidate(false, false, true);\n        }\n      };\n    } }]);return SceneTool;}(av.ToolInterface);\n\n\nGlobalManagerMixin.call(SceneTool.prototype);","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { MaxRectsPacker } from \"maxrects-packer\";\nimport Q from \"q\";\n\nvar avp = Autodesk.Viewing.Private;var\n\nSpriteAtlas = /*#__PURE__*/function () {\n  function SpriteAtlas() {var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1920;var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1080;var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;_classCallCheck(this, SpriteAtlas);\n    this.width = width;\n    this.height = height;\n    this.padding = padding;\n\n    this.spritesMap = {};\n    this.pending = [];\n    this.images = [];\n\n    this.logger = avp.logger;\n    this.packer = new MaxRectsPacker(this.width, this.height, this.padding, {\n      smart: true,\n      pot: false,\n      square: false,\n      allowRotation: false,\n      tag: false,\n      border: 0 });\n\n    this.canvas = document.createElement(\"canvas\");\n    this.hasContent = false;\n  }_createClass(SpriteAtlas, [{ key: \"addSprite\", value: function addSprite(\n\n    url) {var _this = this;\n      if (this.spritesMap[url] == undefined) {\n        var defer = Q.defer();\n        var image = new Image();\n        image.crossOrigin = \"anonymous\";\n\n        image.onload = function () {\n          _this.images.push({\n            url: url,\n            image: image,\n            width: image.width,\n            height: image.height });\n\n          defer.resolve();\n        };\n\n        image.onerror = function (error) {\n          _this.logger.error(error);\n          defer.resolve();\n        };\n\n        image.src = url;\n        this.spritesMap[url] = 1;\n        this.pending.push(defer.promise);\n      }\n    } }, { key: \"finish\", value: function () {var _finish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var _this2 = this;var canvas;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (\n\n\n\n\n\n\n\n\n\n\n                  Q.all(this.pending));case 2:\n                canvas = this.canvas;\n\n                this.packer.addArray(this.images);\n\n                this.images.length = 0;\n                this.packer.bins.forEach(function (bin) {\n                  canvas.width = bin.width;\n                  canvas.height = bin.height;\n\n                  var ctx = canvas.getContext(\"2d\");\n\n                  bin.rects.forEach(function (rect) {\n                    if (rect.image) {\n                      ctx.drawImage(rect.image, rect.x, rect.y);\n                      rect.image = undefined;\n\n                      _this2.spritesMap[rect.url] = rect;\n                      rect.url = undefined;\n                    }\n                  });\n                });case 6:case \"end\":return _context.stop();}}}, _callee, this);}));function finish() {return _finish.apply(this, arguments);}return finish;}() }, { key: \"spriteUV\", value: function spriteUV(\n\n\n    url) {\n      var item = this.spritesMap[url];\n      if (item) {\n        return {\n          x: item.x / this.canvasWidth,\n          y: item.y / this.canvasHeight,\n          w: (item.x + item.width) / this.canvasWidth,\n          h: (item.y + item.height) / this.canvasHeight };\n\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          w: 1,\n          h: 1 };\n\n      }\n    } }, { key: \"canvasWidth\", get: function get() {return this.canvas.width;} }, { key: \"canvasHeight\", get: function get() {return this.canvas.height;} }]);return SpriteAtlas;}();\n\n\nexport {\nSpriteAtlas };","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} // 64K\n\nvar THREE = require(\"three\");\n\nvar MAX_VCOUNT = 65535;var\n\nSpriteMeshBuilder = /*#__PURE__*/function () {\"use strict\";\n\n  function SpriteMeshBuilder(meshCallback) {_classCallCheck(this, SpriteMeshBuilder);\n    this.meshCallback = meshCallback;\n    this.dbIds = [];\n    this.reset();\n  }_createClass(SpriteMeshBuilder, [{ key: \"addPoint\", value: function addPoint(\n\n    viewable, spriteAtlas) {\n      if (this.vcount + 1 > MAX_VCOUNT) {\n        this.flushBuffer();\n\n        this.reset();\n      }\n\n      var index = this.vcount;\n      this.ib[index] = index;\n\n      this.vb[index * 3] = viewable.position.x;\n      this.vb[index * 3 + 1] = viewable.position.y;\n      this.vb[index * 3 + 2] = viewable.position.z;\n\n      this.idb[index * 3] = viewable.dbId & 0xFF;\n      this.idb[index * 3 + 1] = viewable.dbId >> 8 & 0xFF;\n      this.idb[index * 3 + 2] = viewable.dbId >> 16 & 0xFF;\n\n      this.colorb[index * 3] = viewable.color.r * 255;\n      this.colorb[index * 3 + 1] = viewable.color.g * 255;\n      this.colorb[index * 3 + 2] = viewable.color.b * 255;\n\n      if (spriteAtlas) {\n        var uv = spriteAtlas.spriteUV(viewable.style.url);\n        if (uv) {\n          this.uv[index * 4] = uv.x;\n          this.uv[index * 4 + 1] = uv.y;\n          this.uv[index * 4 + 2] = uv.w;\n          this.uv[index * 4 + 3] = uv.h;\n        }\n      }\n\n      this.scale[index] = 1;\n      this.dbIds.push(viewable.dbId);\n      this.vcount++;\n    } }, { key: \"reset\", value: function reset()\n\n    {\n      this.vcount = 0;\n\n      this.ib = new Uint16Array(MAX_VCOUNT);\n      this.idb = new Uint8Array(MAX_VCOUNT * 3);\n      this.vb = new Float32Array(MAX_VCOUNT * 3);\n      this.colorb = new Uint8Array(MAX_VCOUNT * 3);\n      this.scale = new Float32Array(MAX_VCOUNT);\n      this.uv = new Float32Array(MAX_VCOUNT * 4);\n    } }, { key: \"flushBuffer\", value: function flushBuffer()\n\n    {\n      var geometry = new THREE.BufferGeometry();\n      var idAttribute = new THREE.BufferAttribute(new Uint8Array(this.idb.slice(0, this.vcount * 3)), 3);\n      idAttribute.bytesPerItem = 1;\n      idAttribute.normalize = true;\n\n      var positionAttribute = new THREE.BufferAttribute(new Float32Array(this.vb.slice(0, this.vcount * 3)), 3);\n      positionAttribute.bytesPerItem = 4;\n\n      var colorAttribute = new THREE.BufferAttribute(new Uint8Array(this.colorb.slice(0, this.vcount * 3)), 3);\n      colorAttribute.bytesPerItem = 1;\n      colorAttribute.normalize = true;\n\n      var indexAttribute = new THREE.BufferAttribute(new Uint16Array(this.ib.slice(0, this.vcount)), 1);\n\n      var uvAttribute = new THREE.BufferAttribute(new Float32Array(this.uv.slice(0, this.vcount * 4)), 4);\n\n      var scaleAttribute = new THREE.BufferAttribute(new Float32Array(this.scale.slice(0, this.vcount)), 1);\n\n      geometry.setAttribute(\"id\", idAttribute);\n      geometry.setAttribute(\"index\", indexAttribute);\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"color\", colorAttribute);\n      geometry.setAttribute(\"uvp\", uvAttribute);\n      geometry.setAttribute(\"pointScale\", scaleAttribute);\n\n      geometry.isPoints = true;\n      geometry.dbIds = this.dbIds.slice(0);\n      this.dbIds.length = 0;\n\n      if (this.meshCallback) {\n        this.meshCallback(geometry);\n      }\n      this.vcount = 0;\n    } }]);return SpriteMeshBuilder;}();\n\n\nmodule.exports = {\n  SpriteMeshBuilder: SpriteMeshBuilder };","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}export var TextureUtility = /*#__PURE__*/function () {\n  function TextureUtility(viewer) {_classCallCheck(this, TextureUtility);\n    this.viewer = viewer;\n    this._textures = {};\n    this._colors = {};\n    this._excluded = [\n    \"__defaultMaterial__\",\n    \"__fadeMaterial__\",\n    \"__highlightMaterial__\",\n    \"__dataVizSpriteMaterial__\"];\n\n  }_createClass(TextureUtility, [{ key: \"show\", value: function show()\n\n    {\n      // this.viewer.setLightPreset(this._dataModel.dasherSettings.noTexturesLighting);\n      this.hideTextures();\n      this.regen();\n      return true;\n    } }, { key: \"hide\", value: function hide()\n\n    {\n      // this.viewer.setLightPreset(this._dataModel.dasherSettings.initialLighting);\n      this.showTextures();\n      this.regen();\n      return true;\n    } }, { key: \"regen\", value: function regen()\n\n    {\n      this.viewer.refresh(true);\n      // this.viewer.impl.invalidate(true, true, false);\n    } }, { key: \"hideTextures\", value: function hideTextures()\n\n    {\n      var store = Object.keys(this._textures).length === 0;\n      var white = new THREE.Color(1, 1, 1);\n\n      var mats = this.viewer.impl.matman()._materials;\n      for (var p in mats) {\n        if (this._excluded.indexOf(p) === -1) {\n          var m = mats[p];\n          if (store) {\n            this._textures[p] = m.map;\n            this._colors[p] = m.color;\n          }\n          m.map = null;\n          m.color = white;\n          m.needsUpdate = true;\n        }\n      }\n      this.regen();\n    } }, { key: \"showTextures\", value: function showTextures()\n\n    {\n      if (Object.keys(this._textures).length > 0) {\n        var mats = this.viewer.impl.matman()._materials;\n        for (var p in mats) {\n          if (this._excluded.indexOf(p) === -1) {\n            var m = mats[p];\n            var mat = this._textures[p];\n            if (mat) {\n              m.map = mat;\n            }\n            var col = this._colors[p];\n            if (col) {\n              m.color = col;\n            }\n            m.needsUpdate = true;\n          }\n        }\n      }\n      this.regen();\n    } }]);return TextureUtility;}();","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**\nmaterial for heatmap rendering.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * @param {Array.<THREE.Vector4>} sensorVals The value of sensors where\nx, y, z components carry the position of a sensor, and w component\nrepresents the normalized value of a sensor in the range of 0.0 to 1.0.\nf the w component is a negative number, the sensor will not have any\ninfluence towards the color of the material.\nparam {Array.<THREE.Vector3>} colors An array of Vector3 each representing a\ncolor value of a stop in the grandient. The length of this array must be the\nsame as stops parameter.\nparam {Array.<number>} stops An array of normalized numbers each representing\na stop in the gradient. The numbers in this array must be in ascending order,\nand the array length must be the same as colors parameter.\nproperty {number} confidence The distance from the sensor that its value will\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * affect the heatmap before dropping off. Measured in world coordinates of the\ncurrent model.\nparam {number} [powerParameter] Optional. A positive real number. Greater\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * values of power parameter assign greater influence to values closest to the\ninterpolated point. This parameter is default to `2.0`.\nparam {number} [alpha] Optional. The transparency level of the resulting\nfragment on the heatmap, ranging from `0.0` (completely transparent) to `1.0`\nfully opaque). The default value is `1.0`.\nvar\nHeatmapMaterial = /*#__PURE__*/function (_THREE$ShaderMaterial) {_inherits(HeatmapMaterial, _THREE$ShaderMaterial);var _super = _createSuper(HeatmapMaterial);\n  function HeatmapMaterial(sensorVals, colors, stops, confidence) {var powerParameter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2.0;var alpha = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1.0;_classCallCheck(this, HeatmapMaterial);\n    if (colors.length < 2 || colors.length != stops.length) {\n      throw new Error(\"Heatmap requires at least two colors to work\");\n    }\n    if (confidence < 0.0) {\n      throw new Error(\"Heatmap 'confidence' must be a positive number\");\n    }\n    if (powerParameter < 0.0) {\n      throw new Error(\"Heatmap 'powerParameter' must be a positive number\");\n    }\n    if (alpha < 0.0 || alpha > 1.0) {\n      throw new Error(\"Heatmap 'alpha' must range between 0.0 and 1.0\");\n    }\n\n    var uniforms = {\n      uPower: { type: \"f\", value: powerParameter },\n      uAlpha: { type: \"f\", value: alpha },\n      uConfidence: { type: \"f\", value: confidence },\n      uSensors: { type: \"v4v\", value: sensorVals.map(function (v) {return v;}) },\n      uStops: { type: \"fv1\", value: stops },\n      uColors: { type: \"v3v\", value: colors } };\n\n\n    var colorCount = colors.length;\n    var sensorCount = sensorVals.length;\n\n    var vertexShader = \"\\n            varying vec4 worldCoord;\\n\\n            void main()\\n            {\\n                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n                worldCoord = modelMatrix * vec4(position, 1.0);\\n                gl_Position = projectionMatrix * mvPosition;\\n            }\\n        \";\n\n\n\n\n\n\n\n\n\n\n    var fragmentShader = \"\\n            varying vec4 worldCoord;\\n            uniform float uPower;\\n            uniform float uAlpha;\\n            uniform float uConfidence;\\n            uniform vec4 uSensors [\".concat(\n\n\n\n\n    sensorCount, \"];\\n            uniform float uStops[\").concat(\n    colorCount, \"];\\n            uniform vec3 uColors[\").concat(\n    colorCount, \"];\\n\\n            const float dotSize = 6.0;\\n            const float h_var1 = 0.4;\\n            const float h_var2 = 0.25;\\n            const float two_pi = 2.0 * 3.1415927;\\n            \\n            float lmap(float value, float inMin, float inMax, float outMin, float outMax)\\n            {\\n                return clamp(outMin + ((outMax - outMin) * (value - inMin)) / (inMax - inMin), outMin, outMax);\\n            }\\n\\n            // Gradient with multiple colors in non-equal intervals\\n            vec3 colormap(float x)\\n            {\\n                for (int i = 1; i < \").concat(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    colorCount, \"; i++) {\\n                    if (x <= uStops[i]) {\\n                        float stopPct = lmap(x, uStops[i-1], uStops[i], 0.0, 1.0);\\n                        return mix(uColors[i-1], uColors[i], stopPct);\\n                    }\\n                }\\n            \\n                // In case 'x' goes beyond upper bound.\\n                return uColors[\").concat(\n\n\n\n\n\n\n\n    colorCount, \" - 1];\\n            }\\n\\n            vec2 get_pix(float angle) {\\n                float rad = radians(angle);\\n                float c = cos(rad);\\n                float s = sin(rad);\\n                mat2 R = mat2(vec2(c, -s), vec2(s, c));\\n                return R * gl_FragCoord.xy;\\n            }\\n\\n            vec3 halftone(float tone, vec3 dotColor, vec3 backgroundColor) {\\n                vec2 u = get_pix(-45.0) / (dotSize);\\n                float h = (h_var1 + h_var2 * cos(u.x*two_pi));\\n                const float e = 0.05;\\n                float gradient = smoothstep(-e, e, h - tone);\\n                return mix(dotColor, backgroundColor, gradient);\\n            }\\n\\n            void main(void) {\\n                vec3 fragPos = vec3(worldCoord.x, worldCoord.y, worldCoord.z);\\n                float result = 0.0;\\n                float sum = 0.0;\\n                float wsum = 0.000001;\\n                float minDist = 999999999.0;\\n                bool found = false; // at exact location of the sensor\\n                int validSensors = 0;\\n\\n                for (int i=0; i < \").concat(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    sensorCount, \"; i++) {\\n                    float mydist = distance(fragPos, vec3(uSensors[i][0], uSensors[i][1], uSensors[i][2]));\\n                    if (uSensors[i][3] >= 0.0) {\\n                        if (mydist < 0.00001) {\\n                            result = uSensors[i][3];\\n                            found = true;\\n                        } else {\\n                            float w = (1.0 / (pow(mydist, uPower)));\\n                            sum += (uSensors[i][3] * w);\\n                            wsum += w;\\n                        }\\n                        validSensors += 1;\\n                        if (mydist < minDist) {\\n                            minDist = mydist;\\n                        }\\n                    }\\n                }\\n\\n                if (validSensors == 0) {\\n                    result = -1.0;\\n                } else if (!found) {\\n                    result = sum / wsum;\\n                }\\n\\n                // Defaults without influence from any sensor\\n                float confidence = 0.0;\\n                vec3 sensorColor = vec3(0.5, 0.5, 0.5);\\n\\n                if (result >= 0.0) {\\n                    result = clamp(result, 0.0, 1.0);\\n                    confidence = 1.0 - clamp(minDist / uConfidence, 0.0, 1.0);\\n                    sensorColor = colormap(result);\\n                }\\n\\n                vec3 confidenceColor = halftone(clamp(confidence, 0.3, 0.9), vec3(0.7, 0.7, 0.7), vec3(1.0, 1.0, 1.0));\\n                gl_FragColor = vec4(mix(confidenceColor, sensorColor, clamp(confidence, 0.0, 1.0)), uAlpha);\\n            }\\n        \");return _super.call(this,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      side: THREE.DoubleSide,\n      depthTest: true,\n      depthWrite: false });\n\n  }\n\n  /**\n     * Update HeatmapMaterial with new sensor values, and optionally additional\n     * configuration.\n     *\n     * @param {Array.<THREE.Vector4>} sensorVals The value of sensors where x, y, z\n     * components carry the position of a sensor, and w component represents the\n     * normalized value of a sensor in the range of 0.0 to 1.0.\n     * If the w component is a negative number, the sensor will not have any\n     * influence towards the color of the material.\n     * @property {number} [confidence] Optional. The distance from the sensor that its\n     * value will affect the heatmap before dropping off. Measured in world coordinates\n     * of the current model. The default value is `160.0`.\n     * @property {number} [powerParameter] Optional. A positive real number. Greater\n     * values of power parameter assign greater influence to values closest to the\n     * interpolated point. This parameter is default to `2.0`.\n     * @property {number} [alpha] Optional. The transparency level of the resulting\n     * fragment on the heatmap, ranging from `0.0` (completely transparent) to `1.0`\n     * (fully opaque). The default value is `1.0`.\n     */_createClass(HeatmapMaterial, [{ key: \"update\", value: function update(\n    sensorVals, confidence, powerParameter, alpha) {\n      // Note: `isNaN(null) == false` so special handling.\n      if (!isNaN(confidence) && confidence !== null) {\n        this.uniforms.uConfidence.value = confidence;\n      }\n      if (!isNaN(powerParameter) && powerParameter !== null) {\n        this.uniforms.uPower.value = powerParameter;\n      }\n      if (!isNaN(alpha) && alpha !== null) {\n        this.uniforms.uAlpha.value = alpha;\n      }\n\n      this.uniforms.uSensors.value = sensorVals;\n    } }]);return HeatmapMaterial;}(THREE.ShaderMaterial);\n\n\nfunction createColorStops(n) {\n  var res = [];\n  var inc = 1 / (n - 1);\n  for (var i = 0; i < n; i++) {\n    res.push(inc * i);\n  }\n  return res;\n}\n\nexport { HeatmapMaterial, createColorStops };","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**\nhe position of the vertex whose value is to be determined by influences\nfrom scattered nearby data points. The interpolation is done by Inverse\ndistance weighting (IDW) method.\nnnverse distance weighting\nhttps://en.wikipedia.org/wiki/Inverse_distance_weighting\nvar\nIDWProcessMaterial = /*#__PURE__*/function (_THREE$ShaderMaterial) {_inherits(IDWProcessMaterial, _THREE$ShaderMaterial);var _super = _createSuper(IDWProcessMaterial);\n  function IDWProcessMaterial(vertexTexture, dataTexture, dataCount) {var _this;var power = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;_classCallCheck(this, IDWProcessMaterial);\n    power = parseFloat(power).toFixed(3);\n\n    var uniforms = {\n      dataTexture: { type: \"t\", value: null },\n      vertexTexture: { type: \"t\", value: null },\n      uPower: { type: \"f\", value: power },\n      uDataCount: { type: \"i\", value: dataCount },\n      uDataTextureWidth: { type: \"i\", value: 1 } };\n\n\n    var vertexShader = \"\\n            varying vec2 vUV;\\n\\n            void main()\\n            {\\n                vUV = uv;\\n                vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n                gl_Position = projectionMatrix * mvPosition;\\n            }\\n        \";\n\n\n\n\n\n\n\n\n\n\n    var fragmentShader = \"\\n            varying vec2 vUV;\\n\\n            uniform float uPower;\\n            uniform int uDataCount;\\n            uniform int uDataTextureWidth;\\n            \\n            uniform sampler2D dataTexture;\\n            uniform sampler2D vertexTexture;\\n            \\n            void main(void) {\\n                // The position of the vertex whose value is to be determined.\\n                vec4 vertex = texture2D(vertexTexture, vUV);\\n            \\n                if (vertex.w < 0.) {\\n                    // This is an invalid vertex, mark as transparent.\\n                    gl_FragColor = vec4(0., 0., 0., 1.);\\n                    return;\\n                }\\n            \\n                float sum = 0.;\\n                float wsum = 0.;\\n                float factor = 1. / float(uDataTextureWidth);\\n                float textureWidth = float(uDataTextureWidth);\\n            \\n                // Compute weighted influence from all the data points.\\n                for (int index = 0; index < uDataCount; index++)\\n                {\\n                    float i = float(index);\\n                    float y = floor(i / textureWidth);\\n                    float x = mod(i, textureWidth);\\n            \\n                    vec2 dUV = vec2((x + 0.5) * factor, (y + 0.5) * factor);\\n                    vec4 dataPoint = texture2D(dataTexture, dUV);\\n            \\n                    float dist = distance(vertex.xyz, dataPoint.xyz);\\n            \\n                    if (dist < 0.0001) {\\n                        gl_FragColor = vec4(dataPoint.w, 0., 0., 1.);\\n                        return;\\n                    }\\n            \\n                    float w = 1. / dist;\\n                    w = pow(w, uPower);\\n            \\n                    sum += dataPoint.w * w;\\n                    wsum += w;\\n                }\\n            \\n                gl_FragColor = vec4(sum/wsum , 0., 0., 1.);\\n            }\\n        \";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    _this = _super.call(this, {\n      uniforms: uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      side: THREE.DoubleSide,\n      depthTest: true,\n      depthWrite: true });\n\n\n    _this.vertexTexture = vertexTexture;\n    _this.dataTexture = dataTexture;return _this;\n  }\n\n  /**\n     * Texture for vertice\n     */_createClass(IDWProcessMaterial, [{ key: \"vertexTexture\", set: function set(\n    value) {\n      if (value) {\n        this.uniforms.vertexTexture.value = value;\n      }\n    }\n\n    /**\n       * Texture for sensor locations\n       */ }, { key: \"dataTexture\", set: function set(\n    value) {\n      if (value) {\n        this.uniforms.dataTexture.value = value;\n        this.uniforms.uDataTextureWidth.value = value.image.width;\n      }\n    } }]);return IDWProcessMaterial;}(THREE.ShaderMaterial);var\n\n\nIDWDataProcessor = /*#__PURE__*/function () {\n  /**\n                                              * Constructs an instance of `IDWDataProcessor` object.\n                                              *\n                                              * @param {Viewer3D} viewer The viewer object.\n                                              * @param {number[]} vertices The input vertex positions in the form of `[x, y, z, ...]`\n                                              * @param {number[]} dataPoints The input data point positions and values in the form\n                                              * of `[x, y, z, w, ...]` where `w` represents the value of the corresponding data point.\n                                              * @param {Object} [options] The optional configuration for `IDWDataProcessor` object.\n                                              * @param {number} [min] Optional. The smallest `w` value found in `dataPoints` list.\n                                              * If this value is not specified, it is derived from the given `dataPoints` parameter.\n                                              * @param {number} [max] Optional. The largest `w` value found in `dataPoints` list.\n                                              * If this value is not specified, it is derived from the given `dataPoints` parameter.\n                                              * @param {number[]} [colors] Optional. An array of color values. See `setColors`\n                                              * function for more details.\n                                              */\n  function IDWDataProcessor(viewer, vertices, dataPoints) {var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};_classCallCheck(this, IDWDataProcessor);\n    this.viewer = viewer;\n\n    this.min = options.min;\n    this.max = options.max;var\n\n    colors = options.colors;\n    if (colors) {\n      this.setColors(colors);\n    } else {\n      this.setColors([0x0000ff, 0x00ffff, 0x00ff00, 0xffff00, 0xff0000]);\n    }\n\n    this.setVertices(vertices);\n    this.setDataPoints(dataPoints);\n\n    this.initializeRender();\n  }\n\n  /**\n     * Sets the list of mesh vertex positions.\n     *\n     * @param {number[]} vertices The input vertex positions in the form of `[x, y, z, ...]`\n     */_createClass(IDWDataProcessor, [{ key: \"setVertices\", value: function setVertices(\n    vertices) {\n      if (this.vertexTexture) {\n        this.vertexTexture.dispose();\n        this.vertexTexture = null;\n      }\n\n      var textureSize = Math.ceil(Math.sqrt(vertices.length / 3));\n      var verticesData = new Float32Array(textureSize * textureSize * 4);\n      verticesData.fill(-1);\n\n      for (var i = 0, count = vertices.length / 3; i < count; i++) {\n        verticesData[i * 4] = vertices[i * 3];\n        verticesData[i * 4 + 1] = vertices[i * 3 + 1];\n        verticesData[i * 4 + 2] = vertices[i * 3 + 2];\n        verticesData[i * 4 + 3] = 1;\n      }\n\n      var vertexTexture = new THREE.DataTexture(\n      verticesData,\n      textureSize,\n      textureSize,\n      THREE.RGBAFormat,\n      THREE.FloatType,\n      THREE.UVMapping,\n      THREE.ClampToEdgeWrapping,\n      THREE.ClampToEdgeWrapping,\n      THREE.NearestFilter,\n      THREE.NearestFilter);\n\n\n      vertexTexture.generateMipmaps = false;\n      vertexTexture.needsUpdate = true;\n      this.vertexTexture = vertexTexture;\n      this.verticesLength = vertices.length;\n\n      // Create a buffer to read computed vertex values.\n      this.vertexValues = new Uint8Array(textureSize * textureSize * 4);\n    }\n\n    /**\n       * Sets the list of data point positions and values.\n       *\n       * @param {number[]} dataPoints The input data point positions and values in the form\n       * of `[x, y, z, w, ...]` where `w` represents the value of the corresponding data point.\n       */ }, { key: \"setDataPoints\", value: function setDataPoints(\n    dataPoints) {\n      if (this.dataTexture) {\n        this.dataTexture.dispose();\n        this.dataTexture = null;\n      }\n\n      var textureSize = Math.ceil(Math.sqrt(dataPoints.length / 4));\n      var dataBuffer = new Float32Array(textureSize * textureSize * 4);var\n\n      min = this.min,max = this.max;\n      if (min == undefined || max == undefined) {\n        min = Infinity, max = -Infinity;\n\n        for (var i = 0; i < dataPoints.length; i += 4) {\n          min = Math.min(min, dataPoints[i + 3]);\n          max = Math.max(max, dataPoints[i + 3]);\n        }\n      }\n\n      var delta = max - min || 1;\n      for (var _i = 0; _i < dataPoints.length; _i += 4) {\n        dataBuffer[_i] = dataPoints[_i];\n        dataBuffer[_i + 1] = dataPoints[_i + 1];\n        dataBuffer[_i + 2] = dataPoints[_i + 2];\n        dataBuffer[_i + 3] = (dataPoints[_i + 3] - min) / delta;\n      }\n\n      var dataTexture = new THREE.DataTexture(\n      dataBuffer,\n      textureSize,\n      textureSize,\n      THREE.RGBAFormat,\n      THREE.FloatType,\n      THREE.UVMapping,\n      THREE.ClampToEdgeWrapping,\n      THREE.ClampToEdgeWrapping,\n      THREE.NearestFilter,\n      THREE.NearestFilter);\n\n\n      dataTexture.generateMipmaps = false;\n      dataTexture.needsUpdate = true;\n      this.dataTexture = dataTexture;\n      this.dataCount = dataPoints.length / 4;\n    }\n\n    /**\n       * Setup rendering related code\n       */ }, { key: \"initializeRender\", value: function initializeRender()\n    {\n      var idwMaterial = new IDWProcessMaterial(\n      this.vertexTexture,\n      this.dataTexture,\n      this.dataCount);\n\n\n      var planeGeometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1);\n      var orthCamera = new THREE.OrthographicCamera(-1, 1, -1, 1, 0, 1);\n\n      var targetSize = this.vertexTexture.image.width;\n      var renderTarget = new THREE.WebGLRenderTarget(targetSize, targetSize, {\n        minFilter: THREE.NearestFilter,\n        magFilter: THREE.NearestFilter,\n        format: THREE.RGBAFormat,\n        // type: THREE.FloatType,\n        stencilBuffer: false,\n        depthBuffer: false });\n\n\n      var planeMesh = new THREE.Mesh(planeGeometry, idwMaterial);\n      planeMesh.frustumCulled = false;\n      this.scene = new THREE.Scene();\n      this.scene.add(planeMesh);\n\n      this.material = idwMaterial;\n      this.renderTarget = renderTarget;\n      this.planeGeometry = planeGeometry;\n      this.camera = orthCamera;\n    }\n\n    /**\n       * Registers color stops for use in color interpolation. The specified color\n       * stops evenly spread out across the spectrum that represents the normalized\n       * data values ranging between 0.0 and 1.0.\n       *\n       * Expose this API to help user to try differnt color theme\n       * @param {number[]} colors An array of color values, each expressed in a\n       * 3-byte (24-bit) numerical value. Note that it is possible to specify a\n       * 4-byte (32-bit) number as color, but only 3 lower bytes will be taken.\n       * Each of the three bytes represents the intensity value between `0` and `255`,\n       * of red, green, blue color component respectively. For example, `0xff0000`\n       * represents a red color with full intensity.\n       *\n       * @example\n       *  // Register 3 color stops to visualize normalized data.\n       *  dataProcessor.setColors([0x0f2027, 0x203a43, 0x2c5364]);\n       */ }, { key: \"setColors\", value: function setColors(\n    colors) {\n      if (colors) {\n        this.colors = colors.map(function (color) {return new THREE.Color(color);});\n        this.stops = this._createColorStops(colors.length);\n\n        // Pre-generate the lookup table will save lots of time and GC pressure\n        this.colorMapData = [];\n        for (var i = 0; i < 256; i++) {\n          this.colorMapData.push(this._mapValueToColor(i / 255));\n        }\n      }\n    }\n\n    /**\n       * @private\n       * @param {number} n\n       * @returns\n       */ }, { key: \"_createColorStops\", value: function _createColorStops(\n    n) {\n      var res = [];\n      var inc = 1 / (n - 1);\n      for (var i = 0; i < n; i++) {\n        res.push(inc * i);\n      }\n      return res;\n    }\n\n    /**\n       * @private\n       * @param {number} value\n       * @returns {{r,g,b}} color\n       */ }, { key: \"_mapValueToColor\", value: function _mapValueToColor(\n    value) {var\n      colors = this.colors,stops = this.stops;\n\n      function mix(l, r, p) {\n        return l * (1 - p) + r * p;\n      }\n\n      function mixColor(c1, c2, p) {\n        var result = new THREE.Color();\n        result.r = mix(c1.r, c2.r, p);\n        result.g = mix(c1.g, c2.g, p);\n        result.b = mix(c1.b, c2.b, p);\n\n        return result;\n      }\n\n      var result = colors[stops.length - 1];\n      for (var i = 1; i < stops.length; i++) {\n        if (value <= stops[i]) {\n          var p = (value - stops[i - 1]) / (stops[i] - stops[i - 1]);\n          result = mixColor(colors[i - 1], colors[i], p);\n          break;\n        }\n      }\n\n      var r = Math.round(255 * result.r);\n      var g = Math.round(255 * result.g);\n      var b = Math.round(255 * result.b);\n\n      return { r: r, g: g, b: b };\n    }\n\n    /**\n       * Process input vertex and data points to produce per-vertex color data.\n       *\n       * @param {{colors: number[], power: number, outputTarget}} [options] The\n       * optional configuration object for the processing.\n       */ }, { key: \"process\", value: function process()\n    {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var\n      colors = options.colors,power = options.power,outputTarget = options.outputTarget;\n\n      if (colors) {\n        this.setColors(colors);\n      }\n\n      if (power === undefined || power === null) {\n        power = 1;\n      }\n\n      this.material.uniforms[\"uPower\"].value = power;\n\n      var targetSize = this.vertexTexture.image.width;\n      if (this.renderTarget.width != targetSize) {\n        this.renderTarget.setSize(targetSize, targetSize);\n      }\n\n      var renderer = this.viewer.impl.glrenderer();\n      renderer.render(this.scene, this.camera, this.renderTarget, true);\n\n      renderer.readRenderTargetPixels(\n      this.renderTarget,\n      0,\n      0,\n      targetSize,\n      targetSize,\n      this.vertexValues);\n\n\n      return this._getColorValues(outputTarget);\n    }\n\n    /**\n       * @private\n       * Compute color values for each vertex processed by `IDWDataProcessor`.\n       *\n       * @param {Uint8Array} [outputTarget] The output `Uint8Array` where color\n       * data is to be written. The output content is in the form of `[r, g, b, ...]`\n       * where each color component is in the range of `[0, 255]`.\n       *\n       * @returns If a valid object was passed in as the `outputTarget` parameter,\n       * then the same object is returned. Otherwise this function returns a new\n       * `Uint8Array` that contains the color data. The output content is in the form\n       * of `[r, g, b, ...]` where each color component is in the range of `[0, 255]`.\n       */ }, { key: \"_getColorValues\", value: function _getColorValues(\n    outputTarget) {\n      var colors;\n      if (outputTarget && outputTarget.length == this.verticesLength) {\n        colors = outputTarget;\n      } else {\n        colors = new Uint8Array(this.verticesLength);\n      }\n\n      var outputValues = this.vertexValues;\n      for (var i = 0, count = this.verticesLength / 3; i < count; i++) {\n        var index = i * 4;\n        var alpha = outputValues[index + 3];\n\n        if (alpha < 128) {\n          continue;\n        }\n\n        var value = outputValues[index];\n        var color = this.colorMapData[value];\n\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n      }\n\n      return colors;\n    }\n\n    /**\n       * Release the resources to avoid OOM\n       */ }, { key: \"cleanUp\", value: function cleanUp()\n    {var _this2 = this;\n      // There is webgl warnings if immidiately dispose the resources\n      setTimeout(function () {\n        if (_this2.vertexTexture) {\n          _this2.vertexTexture.dispose();\n          _this2.vertexTexture = null;\n        }\n\n        if (_this2.dataTexture) {\n          _this2.dataTexture.dispose();\n          _this2.dataTexture = null;\n        }\n\n        if (_this2.renderTarget) {\n          _this2.renderTarget.dispose();\n          _this2.renderTarget = null;\n        }\n\n        if (_this2.material) {\n          _this2.material.dispose();\n          _this2.material = null;\n        }\n\n        if (_this2.planeGeometry) {\n          _this2.planeGeometry.dispose();\n          _this2.planeGeometry = null;\n        }\n      }, 32);\n    } }]);return IDWDataProcessor;}();\n\n\nexport { IDWDataProcessor, IDWProcessMaterial };","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { filterShadingPointsByType } from \"./SurfaceShadingData\";\nimport h337 from \"heatmap.js\";\n\nvar surfaceShadingOverlay = \"DataVizPlanarHeatmap\";var\nPlanarHeatmap = /*#__PURE__*/function () {\n  function PlanarHeatmap(viewer, model, shadingData) {var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};_classCallCheck(this, PlanarHeatmap);\n    options = this._handleLegacyOptions(options);var _options =\n\n    options,width = _options.width,height = _options.height,minOpacity = _options.minOpacity,maxOpacity = _options.maxOpacity;\n    this.options = options;\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n\n    this.config = {\n      canvas: canvas,\n      width: width,\n      height: height,\n      minOpacity: minOpacity,\n      maxOpacity: maxOpacity,\n      radius: 20 };\n\n\n    this.model = model;\n    this.viewer = viewer;\n    this.shadingData = shadingData;\n\n    var texture = new THREE.Texture(canvas, THREE.UVMapping);\n    texture.minFilter = THREE.LinearFilter;\n    texture.flipY = false;\n\n    this.material = new THREE.MeshBasicMaterial({\n      map: texture,\n      // color: 0xFFFF00FF,\n      depthTest: true,\n      depthWrite: false,\n      transparent: true,\n      side: THREE.DoubleSide });\n\n\n    this.gradientMap = {};\n  }\n\n  /**\n     * @private\n     * \n     * For legacy client code, `slicingPosition` was provided as `position`,\n     * while `placementPosition` was provided as `placePosition`. We do not\n     * attempt to introduce the defaults for `position` and `placePosition`\n     * anymore here so if those values are specified, they will be converted\n     * to `slicingPosition` and `placementPosition` respectively.\n     */_createClass(PlanarHeatmap, [{ key: \"_handleLegacyOptions\", value: function _handleLegacyOptions(\n    options) {\n      options = Object.assign(\n      {\n        width: 1024,\n        height: 1024,\n        slicingEnabled: true },\n\n      options);\n\n\n      if (typeof options.position === \"string\") {\n        var values = { \"min\": 0.0, \"middle\": 0.5, \"max\": 1.0 };\n        options.slicingPosition = values[options.position];\n      }\n\n      if (typeof options.placePosition === \"string\") {\n        var _values = { \"min\": 0.0, \"max\": 1.0 };\n        options.placementPosition = _values[options.placePosition];\n      }\n\n      // Remove legacy options.\n      delete options.position;\n      delete options.placePosition;\n\n      function validateValueRange(value, defaultValue) {\n        if (value === undefined || value === null) {\n          return defaultValue;\n        }\n\n        if (typeof value !== \"number\") return defaultValue;\n        if (value < 0.0) return 0.0; // Capped at minimum\n        if (value > 1.0) return 1.0; // Capped at maximum\n        return value; // Valid value stays unchanged\n      }\n\n      // If the above did not result in a valid `slicingPosition` or `placementPosition`,\n      // then it means the client code did not use any legacy option, and did not supply\n      // a value for these two options. We will use default values for them.\n      //\n      options.slicingPosition = validateValueRange(options.slicingPosition, 0.5);\n      options.placementPosition = validateValueRange(options.placementPosition, 0.0);\n\n      return options;\n    }\n\n    /**\n       * Internal function, setup the heatmap instance and geometry with UV\n       * @private\n       * @param {String|[String]} nodeId - Shading data group id\n       * @param {String} sensorType - Current Shading Sensor Type\n       * @param {number} radius\n       */ }, { key: \"_setup\", value: function _setup(\n    nodeIds, sensorType) {var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n      // cacluate the bounds for the shading area\n      var model = this.model,shadingData = this.shadingData;\n      var totalBounds = new THREE.Box3();\n      var instanceTree = model.getInstanceTree();\n\n      var leafs = [];\n      var boundsMap = {};\n      var dst = [];\n      var pointDataMap = {};\n\n      if (this.gradientMap[sensorType]) {\n        this.config.gradient = this.gradientMap[sensorType];\n      }\n      this.config.radius = radius;\n\n\n      function isLeafContainsSensor(leaf) {\n        if (leaf.shadingPoints == null || leaf.shadingPoints &&\n        leaf.shadingPoints.length == 0) {\n          return false;\n        }\n\n        return !(leaf.shadingPoints.find(function (item) {return item.types.find(function (t) {return t == sensorType;});}) == null);\n      }\n\n      nodeIds.forEach(function (nodeId) {return shadingData.getLeafsById(nodeId, leafs);});\n\n      // get the total bounds\n      for (var i = 0; i < leafs.length; i++) {\n        if (isLeafContainsSensor(leafs[i])) {\n          leafs[i].dbIds.forEach(function (dbId) {\n            instanceTree.getNodeBox(dbId, dst);\n\n            if (dst[0] != Infinity) {\n              var bound = new THREE.Box3(new THREE.Vector3(dst[0], dst[1], dst[2]), new THREE.Vector3(dst[3], dst[4], dst[5]));\n\n              totalBounds.union(bound);\n              boundsMap[dbId] = bound;\n            }\n          });\n        }\n      }\n\n      var x0 = totalBounds.min.x;\n      var y0 = totalBounds.min.y;\n      var w0 = totalBounds.max.x - x0;\n      var h0 = totalBounds.max.y - y0;\n\n      // resize the canvas to keep the ratio constant\n      var _this$options = this.options,slicingEnabled = _this$options.slicingEnabled,width = _this$options.width,height = _this$options.height;\n\n      if (w0 > h0) {\n        height = width / w0 * h0;\n      } else {\n        width = height / h0 * w0;\n      }\n\n      this.config.canvas.width = width;\n      this.config.canvas.height = height;\n      this.config.width = width;\n      this.config.height = height;\n\n      if (!this.heatmapInstance) {\n\n        /** {@link https://www.patrick-wied.at/static/heatmapjs/docs.html} */\n        // 'HeatmapJS requires a 'container' to be passed in the config (from which\n        // computed styles are obtained by calling 'getComputedStyle' API). \n        // If it isn't passed in the library throws an exception. To satisfy that \n        // requirement, we create a dummy <div> element to avoid the crash.\n\n        var container = document.createElement(\"div\"); // Container for heatmap.js instance\n        container.width = width;\n        container.height = height;\n\n        this.config.container = container;\n        this.heatmapInstance = h337.create(this.config);\n\n        // Another side effect of 'h337.create()' is that it adds 'config.canvas'\n        // as a child element of 'config.container'. That obviously is undesirable so \n        // here we remove the canvas from container, before removing the reference to \n        // 'config.container' to avoid resource leak.\n        // \n        container.removeChild(this.config.canvas);\n        delete this.config.container;\n      } else {\n        // Reuse the heatmap object so that it won't be disconnected\n        // from the corresponding graphics resources (e.g. textures).\n        this.heatmapInstance.configure(this.config);\n      }\n\n      // prepare for the geometry\n      // make assumption that the geometry is not that complex, means more than 65536 vertices\n      var positions = [];\n      var uv = [];\n      var indices = [];\n\n      var cg = Autodesk.Viewing.Extensions.CompGeom;\n      var slicingPosition = this.options.slicingPosition;\n      var placementPosition = this.options.placementPosition;\n      var frags = model.getFragmentList();\n\n      for (var _i = 0; _i < leafs.length; _i++) {\n        var currentLeafNode = leafs[_i];\n\n        // Only process shading points with the matching sensor types.\n        var matchingShadingPoints = filterShadingPointsByType(\n        currentLeafNode.shadingPoints,\n        sensorType);\n\n\n        if (matchingShadingPoints.length <= 0) {\n          continue;\n        }\n\n        if (slicingEnabled) {var\n\n\n\n\n\n          intersects;(function () {var normal = new THREE.Vector3(0, 0, 1); // assume we are doing only for simple geometry section\n            // if we decide to support very complex geometry, we need put this process in Async style\n            // mark this as TODO, don't want to over engineer this part until we have the request or hit performance threshold\n            intersects = [];currentLeafNode.dbIds.forEach(function (dbId) {var bounds = boundsMap[dbId];var\n              min = bounds.min,max = bounds.max;\n\n              var zSlicing = min.z + (max.z - min.z) * slicingPosition;\n              var zPlacement = min.z + (max.z - min.z) * placementPosition;\n\n              var plane = new THREE.Plane(normal, -zSlicing);\n\n              var toPlaneCoords = cg.makePlaneBasis(plane);\n\n              var recursive = true;\n              instanceTree.enumNodeFragments(dbId, function (fragId) {\n                var m = frags.getVizmesh(fragId);\n                if (m.geometry && !m.geometry.is2d && !m.geometry.isLines && m.material.cutplanes) {\n                  cg.xMeshPlane(plane, m, intersects);\n                }\n              }, recursive);\n\n\n              // now we have all the intersection points\n              // Code Reference from SectionTool: updateCapMeshes\n              var bbox = new THREE.Box3();\n              cg.convertToPlaneCoords(toPlaneCoords, intersects, bbox);\n\n              var eset = new cg.EdgeSet(intersects, bbox, bbox.size().length() * 1e-6);\n              eset.snapEdges();\n              eset.sanitizeEdges();\n              eset.stitchContours();\n\n              //Create the 3D mesh\n              var cset = eset.triangulate();\n\n              // TODO: if required in future, the triangulate is not robuts, and it failed very frequently\n              // If we need more robust way of doing the triangulation, we can spend more time on it\n              // For simple room geometry, this is good enough\n              if (cset && !cset.triangulationFailed) {\n                var bg = cset.toPolygonMesh();\n\n                var indexStart = positions.length / 3;\n\n                var bgPosition = bg.attributes[\"position\"].array;\n\n                for (var j = 0, count = bgPosition.length; j < count; j += 3) {\n                  positions.push(\n                  bgPosition[j],\n                  bgPosition[j + 1],\n                  zPlacement);\n\n\n                  uv.push(\n                  (bgPosition[j] - x0) / w0,\n                  (bgPosition[j + 1] - y0) / h0);\n\n                }\n\n                var bgIndices = bg.attributes[\"index\"].array;\n                for (var _j = 0, _count = bgIndices.length; _j < _count; _j++) {\n                  indices.push(bgIndices[_j] + indexStart);\n                }\n              }\n            });})();\n\n        } else {\n          currentLeafNode.dbIds.forEach(function (dbId) {\n            var bounds = boundsMap[dbId];\n\n            if (!bounds.isEmpty()) {var\n              min = bounds.min,max = bounds.max;\n              var zPlacement = min.z + (max.z - min.z) * placementPosition;\n\n              var index = positions.length / 3;\n\n              indices.push(index, index + 2, index + 1, index, index + 3, index + 2);\n              positions.push(\n              min.x, min.y, zPlacement,\n              min.x, max.y, zPlacement,\n              max.x, max.y, zPlacement,\n              max.x, min.y, zPlacement);\n\n\n              uv.push(\n              (min.x - x0) / w0, (min.y - y0) / h0,\n              (min.x - x0) / w0, (max.y - y0) / h0,\n              (max.x - x0) / w0, (max.y - y0) / h0,\n              (max.x - x0) / w0, (min.y - y0) / h0);\n\n            }\n          });\n        }\n\n        // Only add shading point that matches the specific sensor type.\n        var _iterator = _createForOfIteratorHelper(matchingShadingPoints),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var point = _step.value;\n            var pData = {\n              x: Math.round((point.position.x - x0) / w0 * width), // in texture space: X, integer please!\n              y: Math.round((point.position.y - y0) / h0 * height), // in texture space: Y, integer please!\n              value: 0 };\n\n\n            pointDataMap[point.id] = {\n              data: pData,\n              shadingPoint: point };\n\n          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}\n      }\n\n      positions = new Float32Array(positions);\n      uv = new Float32Array(uv);\n      indices = new Uint16Array(indices);\n\n      // create the buffer geometry\n      var geometry = new THREE.BufferGeometry();\n      var positionAttribute = new THREE.BufferAttribute(positions, 3);\n      positionAttribute.bytesPerItem = 4;\n\n      var uvAttribute = new THREE.BufferAttribute(uv, 2);\n      uvAttribute.bytesPerItem = 4;\n\n      var indexAttribute = new THREE.BufferAttribute(indices, 1);\n\n      geometry.setAttribute(\"index\", indexAttribute);\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"uv\", uvAttribute);\n\n\n\n      // \n      this.geometry = geometry;\n      var viewerImp = this.viewer.impl;\n      viewerImp.createOverlayScene(surfaceShadingOverlay);\n\n      var mesh = new THREE.Mesh(geometry, this.material);\n      viewerImp.addOverlay(surfaceShadingOverlay, mesh);\n\n      this.totalBounds = totalBounds;\n      this.pointDataMap = pointDataMap;\n      this.currentSensorType = sensorType;\n    }\n\n    /**\n       * Renders one or more nodes with the given identifiers. This call creates\n       * necessary resources like overlay scene and materials, therefore is by \n       * design to be called only when necessary (i.e., when surface shading needs\n       * to be updated due to geometry changes). For more light weight rendering,\n       * updateShading API should be used instead.\n       * \n       * @param {string|string[]} nodeId One or more identifiers of nodes\n       * to render. These identifiers are among the ones provided through\n       * SurfaceShadingData when the SurfaceShading object is constructed.\n       * @param {string} sensorType The type of sensor to render the shading for.\n       * @param {SensorValueCallback} sensorValueCallback The callback function that\n       * will be invoked when SurfaceShading requires the sensor value to render.\n       * @param {HeatmapConfig} [heatmapConfig] Optional. The configuration of the\n       * heatmap. See documentation for `HeatmapConfig` for more details.\n       */ }, { key: \"render\", value: function render(\n    nodeIds, sensorType, sensorValueCallback, heatmapConfig) {\n      // See `SurfaceShading.render()` function for more details on how \n      // backward compatibility is being maintained with the following checks.\n      //\n      var confidenceSize = 200.0;\n      if (typeof heatmapConfig === \"number\") {\n        confidenceSize = Math.abs(heatmapConfig);\n      } else if (_typeof(heatmapConfig) === \"object\") {\n        if (heatmapConfig.confidence) {\n          confidenceSize = heatmapConfig.confidence;\n        }\n      }\n\n      if (this.geometry) {\n        this.geometry.dispose();\n        this.geometry = null;\n      }\n\n      nodeIds = nodeIds instanceof Array ? nodeIds : [nodeIds];\n      this._setup(nodeIds, sensorType, confidenceSize);\n\n      this.updateShading(sensorValueCallback);\n    }\n\n    /**\n       * This function is useful when in timeline triggered replay scenario\n       *\n       * @param {SensorValueCallback} sensorValueCallback Return a sensor value for the time context\n       */ }, { key: \"updateShading\", value: function updateShading(\n    sensorValueCallback) {\n      var dataPoints = [];\n\n      for (var key in this.pointDataMap) {\n        var point = this.pointDataMap[key];\n\n        // Pass the data in, in case user want to change the radius\n        var value = sensorValueCallback(\n        point.shadingPoint,\n        this.currentSensorType,\n        point.data);\n\n\n        // Heatmap.js does not handle absolute `0.0` well (it treats it as\n        // max value), it needs to be bumped slightly above `0.0` for it to\n        // work correctly. Also, value of `NaN` will now be excluded from \n        // contributing to the heatmap.\n        // \n        point.data.value = value === 0.0 ? 0.0001 : value;\n        if (!isNaN(point.data.value)) {\n          dataPoints.push(point.data);\n        }\n      }\n\n      this.heatmapInstance.setData({ data: dataPoints, min: 0.0, max: 1.0 });\n\n      this.material.map.needsUpdate = true;\n      this.viewer.impl.invalidate(false, false, true);\n    }\n\n    /**\n       * Cleans up overlay used for the surface shading, as well as the materials\n       * created to render surface shading.\n       */ }, { key: \"cleanUp\", value: function cleanUp()\n    {\n      this.removeShading();\n\n      if (this.geometry) {\n        this.geometry.dispose();\n        this.geometry = null;\n      }\n\n      if (this.material) {\n        this.material.dispose();\n        this.material = null;\n      }\n    }\n\n    /**\n       * Removes any surface shading created by clearing the overlay which holds\n       * the meshes used as heatmap representation. Note that this call does not\n       * release other resources like materials created.\n       */ }, { key: \"removeShading\", value: function removeShading()\n    {\n      this.viewer.impl.removeOverlayScene(surfaceShadingOverlay);\n      this.viewer.impl.invalidate(false, false, true);\n    }\n\n\n    /**\n       *\n       * @param {string} sensorType\n       * @param {number[]} colors\n       */ }, { key: \"registerSensorColors\", value: function registerSensorColors(\n    sensorType, colors) {\n      var gradient = {};\n      var size = colors.length - 1;\n\n      function intToRGB(color) {\n        var b = color & 0xFF;\n        var g = color >> 8 & 0xFF;\n        var r = color >> 16 & 0xFF;\n\n        return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n      }\n\n      for (var i = 0; i < colors.length; i++) {\n        gradient[(i / size).toFixed(3)] = intToRGB(colors[i]);\n      }\n\n      this.gradientMap[sensorType] = gradient;\n    } }]);return PlanarHeatmap;}();\n\n\nexport {\nPlanarHeatmap };","function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { createColorStops, HeatmapMaterial } from \"./HeatmapMaterial\";\nimport { filterShadingPointsByType } from \"./SurfaceShadingData\";\n\n\nvar surfaceShadingOverlay = \"DataVizSurfaceShading\";\nvar LARGE_FLOAT = 9999999.9;\nvar avp = Autodesk.Viewing.Private;var\n\nSurfaceShading = /*#__PURE__*/function () {\n  /**\n                                            * Constructs an instance of SurfaceShading object based on the given model\n                                            * and shading data.\n                                            *\n                                            * @param {GUIViewer3D} viewer The viewer in which SurfaceShading is created.\n                                            * @param {Model} model The model based on which SurfaceShading is created.\n                                            * @param {SurfaceShadingData} shadingData The data for SurfaceShading.\n                                            */\n  function SurfaceShading(viewer, model, shadingData) {_classCallCheck(this, SurfaceShading);\n    this.viewer = viewer;\n    this.model = model;\n    this.shadingData = shadingData;\n\n    this.activeShadingPoints = [];\n    this.settings = {};\n\n    // TODO: These are to be defined by client code based on device/property combinations.\n    this.registerSensorColors(\"hatchPattern\", [0xffffff, 0xffffff], 0.7);\n    this.registerSensorColors(\"__defaultSensor__\", [0x0000ff, 0x00ff00, 0xffff00, 0xff0000], 0.7);\n  }\n\n  /**\n     * Removes any surface shading created by clearing the overlay which holds\n     * the meshes used as heatmap representation. Note that this call does not\n     * release other resources like materials created.\n     */_createClass(SurfaceShading, [{ key: \"removeShading\", value: function removeShading()\n    {\n      this.viewer.impl.removeOverlayScene(surfaceShadingOverlay);\n      this.viewer.impl.invalidate(false, false, true);\n    }\n\n    /**\n       * Cleans up overlay used for the surface shading, as well as the materials\n       * created to render surface shading.\n       */ }, { key: \"cleanUp\", value: function cleanUp()\n    {\n      this.removeShading();\n      this._clearActiveShadingPoints();\n\n      if (this.hatchMaterial) {\n        this.hatchMaterial.dispose();\n        delete this.hatchMaterial;\n      }\n    } }, { key: \"_clearActiveShadingPoints\", value: function _clearActiveShadingPoints()\n\n    {\n      this.activeShadingPoints.forEach(function (s) {return s.heatmapMaterial.dispose();});\n      this.activeShadingPoints = [];\n    } }, { key: \"_createHatchMaterial\", value: function _createHatchMaterial()\n\n    {\n      var setting = this.settings[\"hatchPattern\"];\n      var material = new HeatmapMaterial(\n      [new THREE.Vector4(LARGE_FLOAT, LARGE_FLOAT, LARGE_FLOAT, -1)],\n      setting.colors,\n      setting.stops,\n      60,\n      2.0,\n      setting.alpha);\n\n\n      return material;\n    }\n\n    /**\n       *\n       * @param {string} sensorType\n       * @param {number[]} colors\n       * @param {number} alpha Alpha channel of the heatmap\n       */ }, { key: \"registerSensorColors\", value: function registerSensorColors(\n    sensorType, colors) {var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.7;\n      this.settings[sensorType] = {\n        stops: createColorStops(colors.length),\n        colors: colors.\n        map(function (c) {return new THREE.Color(c);}).\n        map(function (color) {return new THREE.Vector3(color.r, color.g, color.b);}),\n        alpha: alpha };\n\n    } }, { key: \"getSetting\", value: function getSetting(\n\n    sensorType) {\n      if (this.settings[sensorType]) {\n        return this.settings[sensorType];\n      } else {\n        return this.settings[\"__defaultSensor__\"];\n      }\n    }\n\n    /**\n       * Renders one or more nodes with the given identifiers. This call creates\n       * necessary resources like overlay scene and materials, therefore is by\n       * design to be called only when necessary (i.e., when surface shading needs\n       * to be updated due to geometry changes). For more light weight rendering,\n       * `updateShading` API should be used instead.\n       *\n       * @param {string|string[]} nodeId One or more identifiers of nodes\n       *  to render. These identifiers are among the ones provided through\n       *  SurfaceShadingData when the SurfaceShading object is constructed.\n       * @param {string} sensorType The type of sensor to render the shading for.\n       * @param {SensorValueCallback} sensorValueCallback The callback function that\n       *  will be invoked when SurfaceShading requires the sensor value to render.\n       * @param {HeatmapConfig} [heatmapConfig] Optional. The configuration of the\n       * heatmap. See documentation for `HeatmapConfig` for more details.\n       */ }, { key: \"render\", value: function render(\n    nodeId, sensorType, sensorValueCallback, heatmapConfig) {var _this = this;\n      // sanitize the input, make sure confidenceSize is positive number when it exists\n      var confidenceSize = heatmapConfig ? heatmapConfig.confidence : 0;\n      confidenceSize = !isNaN(confidenceSize) ? Math.abs(confidenceSize) : 0;\n\n      // Defaulting `powerParameter` to `2.0`\n      var powerParameter = 2.0;\n      if (heatmapConfig && typeof heatmapConfig.powerParameter === \"number\") {\n        powerParameter = heatmapConfig.powerParameter;\n      }\n\n      /** @type {SurfaceShadingNode[]} */\n      var nodes = [];\n      if (nodeId instanceof Array) {\n        nodeId.forEach(function (id) {return _this.shadingData.getLeafsById(id, nodes);});\n      } else {\n        nodes = this.shadingData.getLeafsById(nodeId);\n      }\n\n      var it = this.model.getInstanceTree();\n      this._clearActiveShadingPoints();\n\n      var viewerImp = this.viewer.impl;\n      var activeShadingPoints = this.activeShadingPoints;\n\n      viewerImp.createOverlayScene(surfaceShadingOverlay);\n      if (!this.hatchMaterial) {\n        this.hatchMaterial = this._createHatchMaterial();\n      }\n\n      function addMeshToOverlay(fragId, material) {\n        // add geometry into the overlay\n        var geometry = it.fragList.getGeometry(fragId);\n        if (!geometry) {\n          avp.logger.error(\"Geometry for the fragment is empty, FragId:\", fragId);\n          return;\n        }\n        var mesh = new THREE.Mesh(geometry, material);\n        var m = new THREE.Matrix4();\n        it.fragList.getWorldMatrix(fragId, m);\n\n        mesh.matrix.copy(m);\n        mesh.matrixWorldNeedsUpdate = true;\n        mesh.matrixAutoUpdate = false;\n        mesh.frustumCulled = false;\n\n        viewerImp.addOverlay(surfaceShadingOverlay, mesh);\n      }\n\n      var settingsForSensorType = this.getSetting(sensorType);var _loop = function _loop(\n\n      i) {\n        var node = nodes[i];\n        var shadingPoints = filterShadingPointsByType(node.shadingPoints, sensorType);\n\n        // Set default material to hatch material type which allows fragments\n        // without any shading point to render with a hatch pattern. If there\n        // are any associated shading points, then this material will be set\n        // to the newly created `HeatmapMaterial` with actual sensor values.\n        //\n        var heatmapMaterial = _this.hatchMaterial;\n\n        if (shadingPoints.length > 0) {\n          var confidence = confidenceSize;\n\n          // Caculate the confidence value if node.bounds exists\n          if (node.bounds && !confidenceSize) {\n            var bmax = node.bounds.max;\n            var bmin = node.bounds.min;\n            confidence = bmax.x - bmin.x + (bmax.y - bmin.y) + (bmax.z - bmin.z);\n          }\n\n          confidence = confidence || 160;\n\n          /** @type {THREE.Vector4[]} */\n          var sensorValues = [];\n\n          // render the sufaceMap with current sensor value\n          shadingPoints.forEach(function (shadingPoint) {\n            var p = shadingPoint.position;\n            var value = sensorValueCallback(shadingPoint, sensorType);\n            var sensorValue = new THREE.Vector4(p.x, p.y, p.z, value);\n\n            sensorValues.push(sensorValue);\n          });\n\n          heatmapMaterial = new HeatmapMaterial(\n          sensorValues,\n          settingsForSensorType.colors,\n          settingsForSensorType.stops,\n          confidence,\n          powerParameter,\n          settingsForSensorType.alpha);\n\n\n          activeShadingPoints.push({\n            shadingPoints: shadingPoints,\n            sensorType: sensorType,\n            heatmapMaterial: heatmapMaterial });\n\n        }\n\n        // Add a mesh per fragment for the current `SurfaceShadingNode`, with\n        // and without `SurfaceShadingPoint` (those nodes without valid shading \n        // points will simply be rendered as white colored, hatched volume).\n        // \n        node.fragIds.forEach(function (fragId) {return addMeshToOverlay(fragId, heatmapMaterial);});};for (var i = 0; nodes && i < nodes.length; i++) {_loop(i);\n      }\n    }\n\n    /**\n       * This function is meant to update heatmap rapidly without recreation\n       * of the underlying materials. It is useful for scenarios where frequent\n       * redraw of the heatmap is necessary (e.g. playback of timeline control).\n       *\n       * @param {SensorValueCallback} sensorValueCallback Return a sensor value\n       * for the time context\n       * @param {HeatmapConfig} [heatmapConfig] Optional. The configuration of\n       * the heatmap. See documentation for `HeatmapConfig` for more details.\n       */ }, { key: \"updateShading\", value: function updateShading(\n    sensorValueCallback, heatmapConfig) {\n      var confidence, powerParameter, alpha;\n      if (heatmapConfig) {\n        confidence = heatmapConfig.confidence;\n        powerParameter = heatmapConfig.powerParameter;\n        alpha = heatmapConfig.alpha;\n      }\n\n      for (var i = 0; i < this.activeShadingPoints.length; i++) {var _this$activeShadingPo =\n        this.activeShadingPoints[i],shadingPoints = _this$activeShadingPo.shadingPoints,sensorType = _this$activeShadingPo.sensorType,heatmapMaterial = _this$activeShadingPo.heatmapMaterial;\n        var sensorValue = [];var _iterator = _createForOfIteratorHelper(\n\n        shadingPoints),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var shadingPoint = _step.value;\n            var p = shadingPoint.position;\n            var value = sensorValueCallback(shadingPoint, sensorType);\n            sensorValue.push(new THREE.Vector4(p.x, p.y, p.z, value));\n          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}\n\n        heatmapMaterial.update(sensorValue, confidence, powerParameter, alpha);\n      }\n\n      this.viewer.impl.invalidate(false, false, true);\n    } }]);return SurfaceShading;}();\n\n\nexport { SurfaceShading };","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * Generic Data Structure to enable the Heatmap/SurfaceShading\nnn\n/**\n`SurfaceShadingPoint` object is used to represent a real-world entity that\nhas a physical position within the model. A `SurfaceShadingPoint` contains\none or more properties. Surface shading (i.e. heatmap) mechanism queries\nvalues of these properties in order to determine the color of the point where\nthis `SurfaceShadingPoint` object is located.\nnor an example, consider an IoT scenario of a physical sensor device, one that\noccupies a physical location and exposes multiple sensor properties (such as\ntemperature\" and \"humidity\"), each of which has its own numeric values.\nn this scenario, a `SurfaceShadingPoint` can be used to represent the physical\nsensor device, where properties such as \"temperature\" and \"humidity\" are `types`\ndefined in the `SurfaceShadingPoint` object.\nnclass\nmemberof Autodesk.DataVisualization.Core\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * @alias Autodesk.DataVisualization.Core.SurfaceShadingPoint\nvar\nSurfaceShadingPoint = /*#__PURE__*/function () {\"use strict\";\n  /**\n                                                               * Constructs an instance of `SurfaceShadingPoint` object.\n                                                               *\n                                                               * @param {string} id The identifier of this `SurfaceShadingPoint` object.\n                                                               * @param {{x:number, y: number, z: number}} position The position of\n                                                               *  this `SurfaceShadingPoint` object in the world space.\n                                                               * @param {string[]} types The types (of sensors, or properties) that are\n                                                               *  exposed by this `SurfaceShadingPoint` object.\n                                                               * @param {string} [name]  Optional identifier associated with\n                                                               *  this `SurfaceShadingPoint` object. Equivalent to `id` by default.\n                                                               * @param {Object} [contextData] Optional object used to track any\n                                                               *  additional information for this `SurfaceShadingPoint` object.\n                                                               *\n                                                               * @example\n                                                               *  const sensorId = \"cafeteria-entrace-01\";\n                                                               *  const position = { x: -159.2780, y: -50.4998, z: -16.9196 };\n                                                               *  const types = [\"temperature\", \"humidity\"];\n                                                               *\n                                                               *  const shadingPoint = new Autodesk.DataVisualization.Core.SurfaceShadingPoint(\n                                                               *      sensorId, position, types);\n                                                               */\n  function SurfaceShadingPoint(id, position, types) {var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : id;var contextData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};_classCallCheck(this, SurfaceShadingPoint);\n    this.id = id;\n    this.position = position;\n    this.types = types;\n    this.name = name;\n    this.contextData = contextData;\n\n    this.dbId = null;\n  }\n\n  /**\n     * Derives the position of a `SurfaceShadingPoint` from a given `DbId`.\n     * The position is calculated by taking the centroid of the union of all the\n     * geometry bounding boxes that this `DbId` corresponds to. This function is\n     * useful if a position is not supplied at the construction time.\n     *\n     * @param {Model} model The model that contains the given `DbId`.\n     * @param {number} dbId The `DbId` of the object to derive the center point from.\n     *\n     * @alias Autodesk.DataVisualization.Core.SurfaceShadingPoint#positionFromDBId\n     *\n     * @example\n     *  const sensorId = \"cafeteria-entrace-01\";\n     *  const types = [\"temperature\", \"humidity\"];\n     *\n     *  // Position of the shading point is unknown at construction time\n     *  const shadingPoint = new Autodesk.DataVisualization.Core.SurfaceShadingPoint(\n     *      sensorId, undefined, types);\n     *\n     *  shadingPoint.positionFromDBId(model, sensorDbId);\n     */_createClass(SurfaceShadingPoint, [{ key: \"positionFromDBId\", value: function positionFromDBId(\n    model, dbId) {\n      var it = model.getData().instanceTree;\n      var bounds = new THREE.Box3();\n      var fragBounds = new THREE.Box3();\n      var fragList = model.getFragmentList();\n      this.dbId = dbId;\n\n      it.enumNodeFragments(\n      dbId,\n      function (fragId) {\n        // get the center of this fragId\n        fragList.getWorldBounds(fragId, fragBounds);\n        bounds.union(fragBounds);\n      },\n      true);\n\n\n      this.position = bounds.getCenter() || this.position;\n    } }]);return SurfaceShadingPoint;}();\n\n\n/**\n                                           * A basic rendering unit that represents one or more `DbId`, each corresponds\n                                           * to a geometry.\n                                           *\n                                           * @class\n                                           * @memberof Autodesk.DataVisualization.Core\n                                           * @alias Autodesk.DataVisualization.Core.SurfaceShadingNode\n                                           */var\nSurfaceShadingNode = /*#__PURE__*/function () {\"use strict\";\n  /**\n                                                              * Constructs an instance of `SurfaceShadingNode` object that represents a\n                                                              * basic rendering unit. A `SurfaceShadingNode` contains one or more `DbId`,\n                                                              * each corresponds a geometry.\n                                                              *\n                                                              * @param {string} id The identifier of this `SurfaceShadingNode` object.\n                                                              * @param {(number|number[])} dbIds A `DbId` or an array of `DbIds`, each of\n                                                              * which represents a geometry that will be rendered when the `SurfaceShadingNode`\n                                                              * is included in calls to `renderSurfaceShading` or `updateSurfaceShading` APIs.\n                                                              * @param {SurfaceShadingPoint[]} shadingPoints An optional array\n                                                              * of `SurfaceShadingPoint` objects.\n                                                              * @param {string} [name] Optional identifier associated with\n                                                              * this `SurfaceShadingNode` object. Equivalent to `id` by default.\n                                                              *\n                                                              * @example\n                                                              *  const id = \"engine-cylinder-02\";\n                                                              *  const dbIds = [1060, 1062, 1064, 1065]; // Objects to be shaded together as one.\n                                                              *  const shadingNode = new Autodesk.DataVisualization.Core.SurfaceShadingNode(id, dbIds);\n                                                              *\n                                                              *  const vibrationSensor02 = new Autodesk.DataVisualization.Core.SurfaceShadingPoint(...);\n                                                              *  shadingNode.addPoint(vibrationSensor02); // Associate a sensor to the cylinder.\n                                                              *\n                                                              *  // User selects to visualize one cylinder from the UI\n                                                              *  onEngineCylinderSelected(cylinderName) {\n                                                              *      const sensorType = \"vibration\";\n                                                              *      const confidenceSize = 300;\n                                                              *\n                                                              *      // 'cylinderName' can be \"engine-cylinder-02\"\n                                                              *      dataVizExt.renderSurfaceShading([cylinderName],\n                                                              *          sensorType, getSensorValue, confidenceSize);\n                                                              *  }\n                                                              */\n  function SurfaceShadingNode(id, dbIds, shadingPoints) {var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : id;_classCallCheck(this, SurfaceShadingNode);\n    if (typeof dbIds == \"number\") {\n      dbIds = [dbIds];\n    }\n\n    this.dbIds = dbIds;\n    this.shadingPoints = shadingPoints || [];\n    this.isLeaf = true;\n    this.fragIds = [];\n    this.id = id;\n    this.name = name;\n    this.bounds = new THREE.Box3();\n  }\n\n  /**\n     * Adds a `SurfaceShadingPoint` object to the `SurfaceShadingNode` object.\n     *\n     * @param {SurfaceShadingPoint} point The `SurfaceShadingPoint` object to be\n     * added to the `SurfaceShadingNode` object.\n     *\n     * @alias Autodesk.DataVisualization.Core.SurfaceShadingNode#addPoint\n     */_createClass(SurfaceShadingNode, [{ key: \"addPoint\", value: function addPoint(\n    point) {\n      this.shadingPoints.push(point);\n    }\n\n    /**\n       * @private\n       * Updates the `SurfaceShadingNode` object by storing the fragment IDs that\n       * are found for each of its dbIds list.\n       *\n       * @param {Model} model The model from which fragment IDs are to be obtained.\n       *\n       * @alias Autodesk.DataVisualization.Core.SurfaceShadingNode#update\n       */ }, { key: \"update\", value: function update(\n    model) {var _this = this;\n      var it = model.getData().instanceTree;\n      var hashSet = new Set(this.fragIds);\n      var fragBounds = new THREE.Box3();\n      var fragList = model.getFragmentList();\n\n      var recursive = true;\n      this.dbIds.forEach(function (dbId) {\n        it.enumNodeFragments(dbId, function (fragId) {\n          if (!hashSet.has(fragId)) {\n            _this.fragIds.push(fragId);\n            fragList.getWorldBounds(fragId, fragBounds);\n            _this.bounds.union(fragBounds);\n          }\n        }, recursive);\n      });\n    } }]);return SurfaceShadingNode;}();\n\n\n/**\n                                          * A grouping data structure that allows rendering units to be\n                                          * organized in a hierarchical manner. It can contain zero or more\n                                          * sub-groups and/or `SurfaceShadingNode` leaf nodes as child.\n                                          *\n                                          * @class\n                                          * @memberof Autodesk.DataVisualization.Core\n                                          * @alias Autodesk.DataVisualization.Core.SurfaceShadingGroup\n                                          */var\nSurfaceShadingGroup = /*#__PURE__*/function () {\"use strict\";\n  /**\n                                                               * Constructs an instance of `SurfaceShadingGroup` object.\n                                                               *\n                                                               * @param {string} id The identifier of the group.\n                                                               * @param {string} [name]  Optional identifier associated with this `SurfaceShadingGroup` object. Equivalent to id by default.\n                                                               * @example\n                                                               *  const cylinders = [\n                                                               *      new Autodesk.DataVisualization.Core.SurfaceShadingNode(\"engine-cylinder-00\", ...),\n                                                               *      new Autodesk.DataVisualization.Core.SurfaceShadingNode(\"engine-cylinder-01\", ...),\n                                                               *      new Autodesk.DataVisualization.Core.SurfaceShadingNode(\"engine-cylinder-02\", ...),\n                                                               *      new Autodesk.DataVisualization.Core.SurfaceShadingNode(\"engine-cylinder-03\", ...),\n                                                               *  ];\n                                                               *\n                                                               *  const groupName = \"front-cylinders\";\n                                                               *  const frontCylinders = new Autodesk.DataVisualization.Core.SurfaceShadingGroup(groupName);\n                                                               *  cylinders.forEach(cylinder => frontCylinders.addChild(cylinder));\n                                                               *\n                                                               *  // User selects to visualize a group of cylinders from the UI\n                                                               *  onEngineCylinderGroupSelected(cylinderGroupName) {\n                                                               *      const sensorType = \"vibration\";\n                                                               *      const confidenceSize = 300;\n                                                               *\n                                                               *      // 'cylinderGroupName' can be \"front-cylinders\"\n                                                               *      dataVizExt.renderSurfaceShading([cylinderGroupName],\n                                                               *          sensorType, getSensorValue, confidenceSize);\n                                                               *  }\n                                                               */\n  function SurfaceShadingGroup(id) {var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id;_classCallCheck(this, SurfaceShadingGroup);\n    this.id = id;\n    this._children = [];\n    this.isGroup = true;\n    this.name = name;\n  }\n\n  /**\n     * The child nodes, each of which is either another shading group, or a\n     * shading leaf node.\n     * @returns {SurfaceShadingGroup[]|SurfaceShadingNode[]} The child nodes,\n     * each of which is either another shading group, or a shading leaf node.\n     */_createClass(SurfaceShadingGroup, [{ key: \"addChild\",\n\n\n\n\n    /**\n                                                              * Adds a child node to the shading group.\n                                                              *\n                                                              * @param {SurfaceShadingGroup|SurfaceShadingNode} child The\n                                                              * child node to be added to the shading group. A child node can\n                                                              * either be another `SurfaceShadingGroup`, or `SurfaceShadingNode`.\n                                                              *\n                                                              * @alias Autodesk.DataVisualization.Core.SurfaceShadingGroup#addChild\n                                                              */value: function addChild(\n    child) {\n      this.children.push(child);\n    }\n\n    /**\n       * @private\n       * Recursively updates all the leaf nodes.\n       * @param {Model} model The model from which fragment IDs are to be obtained.\n       * @alias Autodesk.DataVisualization.Core.SurfaceShadingGroup#update\n       */ }, { key: \"update\", value: function update(\n    model) {\n      this.children.forEach(function (child) {return child.update(model);});\n    }\n\n    /**\n       * @private\n       * For internal use only. Retrieves all the leaf nodes of a shading group,\n       * or a particular leaf node with the given identifier.\n       *\n       * @param {string} id The identifier of the leaf node to retrieve.\n       * @param {SurfaceShadingNode[]} results The input/output result list of\n       * SurfaceShadingNode that matches the search criteria.\n       * @returns {SurfaceShadingNode[]} The resulting list of SurfaceShadingNode\n       * that matches the search criteria.\n       *\n       * @alias Autodesk.DataVisualization.Core.SurfaceShadingGroup#getLeafsById\n       */ }, { key: \"getLeafsById\", value: function getLeafsById(\n    id, results) {\n      results = results || [];\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.id === id) {\n          if (child.isLeaf) {\n            results.push(child);\n          } else if (child.isGroup) {\n            child.getChildLeafs(results);\n          }\n        } else if (child.isGroup) {\n          child.getLeafsById(id, results);\n        }\n      }\n\n      return results;\n    }\n\n    /**\n       *\n       * Find a child node by matching the id\n       *\n       * @param {string} id node id\n       * @returns {SurfaceShadingGroup|SurfaceShadingNode}\n       */ }, { key: \"getNodeById\", value: function getNodeById(\n    id) {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.id === id) {\n          return child;\n        } else if (child.isGroup) {\n          var result = child.getNodeById(id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    /**\n       * @private\n       * For internal use only. Recursively retrieves all the leaf nodes\n       * of this shading group.\n       *\n       * @param {SurfaceShadingNode[]} results The resulting list of all\n       * the leaf nodes. This call always appends leaf nodes into the\n       * parameter without first clearing any existing entries in results.\n       *\n       * @alias Autodesk.DataVisualization.Core.SurfaceShadingGroup#getChildLeafs\n       */ }, { key: \"getChildLeafs\", value: function getChildLeafs(\n    results) {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.isLeaf) {\n          results.push(child);\n        } else if (child.isGroup) {\n          child.getChildLeafs(results);\n        }\n      }\n    } }, { key: \"children\", get: function get() {return this._children;} }]);return SurfaceShadingGroup;}();\n\n\n/**\n                                                                                                              * Data that describes the hierarchical object relationship the surface shading is based on.\n                                                                                                              *\n                                                                                                              * @class\n                                                                                                              * @memberof Autodesk.DataVisualization.Core\n                                                                                                              * @alias Autodesk.DataVisualization.Core.SurfaceShadingData\n                                                                                                              */var\nSurfaceShadingData = /*#__PURE__*/function (_SurfaceShadingGroup) {\"use strict\";_inherits(SurfaceShadingData, _SurfaceShadingGroup);var _super = _createSuper(SurfaceShadingData);function SurfaceShadingData() {_classCallCheck(this, SurfaceShadingData);return _super.apply(this, arguments);}_createClass(SurfaceShadingData, [{ key: \"initialize\",\n    /**\n                                                                                                                                                                                                                                                                                                                                                         * Initialize the `SurfaceShadingData` object so that it can be used as an\n                                                                                                                                                                                                                                                                                                                                                         * input to `setupSurfaceShading` API.\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         * @param {Model} model The model to initialize the surface shading for.\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         * @alias Autodesk.DataVisualization.Core.SurfaceShadingData#initialize\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         * @example\n                                                                                                                                                                                                                                                                                                                                                         *  const id = \"engine-cylinder-02\";\n                                                                                                                                                                                                                                                                                                                                                         *  const dbIds = [1060, 1062, 1064, 1065]; // Objects to be shaded together as one.\n                                                                                                                                                                                                                                                                                                                                                         *  const shadingNode = new Autodesk.DataVisualization.Core.SurfaceShadingNode(id, dbIds);\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         *  const vibrationSensor02 = new Autodesk.DataVisualization.Core.SurfaceShadingPoint(...);\n                                                                                                                                                                                                                                                                                                                                                         *  shadingNode.addPoint(vibrationSensor02); // Associate a sensor to the cylinder.\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         *  const shadingData = new Autodesk.DataVisualization.Core.SurfaceShadingData();\n                                                                                                                                                                                                                                                                                                                                                         *  shadingData.addChild(shadingNode);\n                                                                                                                                                                                                                                                                                                                                                         *  shadingData.initialize(model);\n                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                         *  dataVizExt.setupSurfaceShading(model, shadingData);\n                                                                                                                                                                                                                                                                                                                                                         */value: function initialize(\n    model) {\n      this.update(model);\n    } }]);return SurfaceShadingData;}(SurfaceShadingGroup);\n\n\n/**\n                                                             * Filters out shading points that expose the specified sensor type.\n                                                             *\n                                                             * @param {SurfaceShadingPoint[]} shadingPoints The shading points to filter from.\n                                                             * @param {string} sensorType The type of sensors to filter device with.\n                                                             * @returns {SurfaceShadingPoint[]} The shading points that expose the given sensor type.\n                                                             */\nfunction filterShadingPointsByType(shadingPoints, sensorType) {\n  shadingPoints = shadingPoints || [];\n  return shadingPoints.filter(function (d) {return d.types && d.types.includes(sensorType);});\n}\n\nmodule.exports = {\n  SurfaceShadingData: SurfaceShadingData,\n  SurfaceShadingGroup: SurfaceShadingGroup,\n  SurfaceShadingNode: SurfaceShadingNode,\n  SurfaceShadingPoint: SurfaceShadingPoint,\n  filterShadingPointsByType: filterShadingPointsByType };","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**\nxtension Entry file\nnxamples about how to use this extension can be found:\nhttps://git.autodesk.com/A360/hyperion/blob/develop/client/pages/Heatmap.jsx\nhttps://git.autodesk.com/A360/hyperion/blob/develop/client/pages/Dot.jsx\nhttps://git.autodesk.com/A360/hyperion/blob/develop/client/pages/EngineSimulation.jsx\nhttps://git.autodesk.com/A360/hyperion/blob/develop/client/pages/ReferenceApp.jsx\nnn\nimport Constants from \"./Constants.js\";\nimport { SceneTool } from \"./SceneTool.js\";\nimport { SpriteMeshBuilder } from \"./SpriteMeshBuilder\";\nimport * as CustomViewables from \"./CustomViewables\";\nimport { Room, LevelRoomsMap, ModelStructureInfo } from \"./ModelStructureInfo\";\nimport { SurfaceShading } from \"./heatmap/SurfaceShading\";\nimport { PlanarHeatmap } from \"./heatmap/PlanarHeatmap\";\nimport { TextureUtility } from \"./TextureUtils\";\nimport { IDWDataProcessor, IDWProcessMaterial } from \"./heatmap/IDWDataProcessor\";\nimport * as SurfaceShadingInfo from \"./heatmap/SurfaceShadingData\";\nimport { StreamLineBuilder } from \"./streamline/StreamLineBuilder.js\";\n\nvar extnName = \"Autodesk.DataVisualization\";\nvar extNameSpace = extnName + \".Core\";\nvar ns = AutodeskNamespace(extNameSpace);\nns = Object.assign(ns, CustomViewables);\nns = Object.assign(ns, Constants);\nns = Object.assign(ns, SurfaceShadingInfo);\n\nns.Room = Room;\nns.LevelRoomsMap = LevelRoomsMap;\nns.ModelStructureInfo = ModelStructureInfo;\nns.SurfaceShading = SurfaceShading;\nns.PlanarHeatmap = PlanarHeatmap;\nns.IDWDataProcessor = IDWDataProcessor;\nns.IDWProcessMaterial = IDWProcessMaterial;\n\nvar av = Autodesk.Viewing;\nvar avp = av.Private;\nvar datavizDotOverlay = \"DataVizDots\";\n\n/**\n                                        * Callback function to retrieve the normalized value of a sensor given a\n                                        * device identifier and sensor type. The callback function should return a\n                                        * normalized value in the range of `[0.0, 1.0]`.\n                                        *\n                                        * @callback SensorValueCallback\n                                        * @property {SurfaceShadingPoint} shadingPoint The generated SurfaceShadingPoint from\n                                        * a prior call to `ModelStructureInfo.generateSurfaceShadingData` method or one from\n                                        * a manually created {@link SurfaceShadingData}.\n                                        * @property {string} sensorType An sensor type that was specified when\n                                        * the `Device` was created.\n                                        * @property {Object} data Previous data only defined when rendering or\n                                        * updating {@link PlanarHeatmap}\n                                        * @returns {number} A normalized sensor value in the range of `[0.0, 1.0]`.\n                                        * If `NaN` (not a number) is returned, the sensor will have no influence in the\n                                        * resulting heatmap color (it is as though the sensor did not exist).\n                                        */\n\n/**\n                                            * The object that includes the value for one or more `CustomViewable` properties\n                                            * to be updated when the viewable is being invalidated. If a property is omitted,\n                                            * its value in `CustomViewable` will remain unchanged.\n                                            *\n                                            * @typedef {Object} PropertyUpdates\n                                            * @property {number} [scale] An optional property that updates the scale\n                                            * of the `CustomViewable` must be in the range [0.0, 2.0].\n                                            * @property {string} [url] An optional property that represents the sprite URL\n                                            * to be used for the `CustomViewable` as part of its update. If provided, this\n                                            * value should match one of the values added through `ViewableStyle.preloadSprite`\n                                            * API.\n                                            * @property {THREE.Color} [color] An optional property that represents the color\n                                            * to be used for the `CustomViewable` as part of its update.\n                                            * @property {THREE.Vector3} [position] An optional property that represents the\n                                            * position to be used for the `CustomViewable` as part of its update.\n                                            */\n\n/**\n                                                * The configuration used in `renderSurfaceShading` and `updateSurfaceShading` APIs\n                                                * to control the appearance of the resulting heatmap.\n                                                *\n                                                * @typedef {Object} HeatmapConfig\n                                                * @property {number} [confidence] Optional. The distance from the sensor that its\n                                                * value will affect the heatmap before dropping off. Measured in world coordinates\n                                                * of the current model. The default value is `160.0`.\n                                                * @property {number} [powerParameter] Optional. A positive real number. Greater\n                                                * values of power parameter assign greater influence to values closest to the\n                                                * interpolated point. This parameter is default to `2.0`.\n                                                * @property {number} [alpha] Optional. The transparency level of the resulting\n                                                * fragment on the heatmap, ranging from `0.0` (completely transparent) to `1.0`\n                                                * (fully opaque). The default value is `1.0`.\n                                                */\n\n/**\n                                                    * Callback function invoked when a `CustomViewable` is being invalidated through\n                                                    * a call to `invalidateViewable` API. Client code can optionally modify one or\n                                                    * more properties of `CustomViewable` during this call.\n                                                    *\n                                                    * @callback ViewableInvalidatedCallback\n                                                    * @param {CustomViewable} viewable The viewable object that is being invalidated.\n                                                    * @returns {PropertyUpdates} Object that specifies the properties to be updated.\n                                                    */\n\n/**\n                                                        * Data Visualization extension provides an API for building scenes with\n                                                        * custom sprites (dots) and heatmaps (surface shading) within model boundaries.\n                                                        *\n                                                        * The extension id is: `Autodesk.DataVisualization`\n                                                        *\n                                                        * @example\n                                                        *   const ext = await viewer.loadExtension(\"Autodesk.DataVisualization\")\n                                                        *\n                                                        * @class\n                                                        * @memberof Autodesk.DataVisualization.Core\n                                                        * @alias Autodesk.DataVisualization.Core.DataVisualization\n                                                        * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n                                                        */var\nDataVisualization = /*#__PURE__*/function (_av$Extension) {_inherits(DataVisualization, _av$Extension);var _super = _createSuper(DataVisualization);\n  /**\n                                                                                                                                                      * @param {Viewer3D} viewer - Viewer instance\n                                                                                                                                                      * @param {object} options - Configurations for the extension\n                                                                                                                                                      * @class\n                                                                                                                                                      */\n  function DataVisualization(viewer) {var _this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, DataVisualization);\n    _this = _super.call(this, viewer, options);\n    _this.textureUtility = new TextureUtility(viewer);\n    _this.pointMeshes = [];\n    _this._streamLineBuilder = null;\n    _this._onInstanceTreeReady = _this._onInstanceTreeReady.bind(_assertThisInitialized(_this));return _this;\n  }_createClass(DataVisualization, [{ key: \"load\", value: function () {var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var _this2 = this;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n\n\n                this.tool = new SceneTool(this.viewer, {\n                  delegate: this });\n\n\n                this.viewer.toolController.registerTool(this.tool);\n                this.activate();\n\n                this.instanceTreeReadyPromise = new Promise(function (resolve, reject) {\n                  _this2.instanceTreeReadyPromiseResolve = resolve;\n                  _this2.instanceTreeReadyPromiseReject = reject;\n                });\n\n                this.datavizDotOverlay = this.viewer.impl.createOverlayScene(\n                datavizDotOverlay,\n                null,\n                null,\n                null,\n                true,\n                true);\n\n\n                this.viewer.addEventListener(\n                Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n                this._onInstanceTreeReady);\n\n                this.deviceDepthOcclusion = false;return _context.abrupt(\"return\",\n                true);case 8:case \"end\":return _context.stop();}}}, _callee, this);}));function load() {return _load.apply(this, arguments);}return load;}() }, { key: \"unload\", value: function unload()\n\n\n    {\n      this.viewer.toolController.deregisterTool(this.tool);\n      this.viewer.removeEventListener(\n      Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n      this._onInstanceTreeReady);\n\n\n      this.removeSurfaceShading();\n      this.surfaceShading = null;\n      this.deactivate();\n      return true;\n    } }, { key: \"activate\", value: function activate()\n\n    {\n      this.viewer.toolController.activateTool(this.tool.getName());\n      return true;\n    } }, { key: \"deactivate\", value: function deactivate()\n\n    {\n      if (this._streamLineBuilder) {\n        this._streamLineBuilder.dispose();\n        this._streamLineBuilder = null;\n      }\n\n      this.viewer.toolController.deactivateTool(this.tool.getName());\n      this.removeSurfaceShading();\n      this.showTextures();\n      this.removeAllViewables();\n      return true;\n    } }, { key: \"_onInstanceTreeReady\", value: function _onInstanceTreeReady(\n\n    event) {\n      if (this.instanceTreeReadyPromiseResolve) {\n        this.instanceTreeReadyPromiseResolve();\n      }\n    } }, { key: \"waitForInstanceTree\", value: function () {var _waitForInstanceTree = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(\n\n      model) {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (!\n                model.getInstanceTree()) {_context2.next = 4;break;}\n                this.instanceTreeReadyPromiseResolve();_context2.next = 6;break;case 4:_context2.next = 6;return (\n\n                  this.instanceTreeReadyPromise);case 6:case \"end\":return _context2.stop();}}}, _callee2, this);}));function waitForInstanceTree(_x) {return _waitForInstanceTree.apply(this, arguments);}return waitForInstanceTree;}() }, { key: \"mapDbIdsToGeometries\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n                                                                                                                                                                                                                                                                            * @private\n                                                                                                                                                                                                                                                                            *\n                                                                                                                                                                                                                                                                            * Obtains a list of corresponding geometries given a list of `DbId`.\n                                                                                                                                                                                                                                                                            * @param {number[]} dbIds An array of `DbId` whose corresponding geometries\n                                                                                                                                                                                                                                                                            * are to be obtained.\n                                                                                                                                                                                                                                                                            * @returns The array of geometries correspond to the input `DbId` list.\n                                                                                                                                                                                                                                                                            */value: function mapDbIdsToGeometries(\n    dbIds) {\n      var idToGeometryMap = this.dbId2Geometry || {};\n\n      var geometries = new Set();\n      dbIds.map(function (id) {\n        var geometry = idToGeometryMap[id];\n        if (geometry) geometries.add(geometry);\n      });\n\n      return Array.from(geometries);\n    }\n\n    /**\n       * Adds a collection of `CustomViewable` objects for display through\n       * the `ViewableData` object that contains them.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#addViewables\n       * @param {ViewableData} data The `ViewableData` that contains all\n       * the `CustomViewable` objects which are to be added for display.\n       */ }, { key: \"addViewables\", value: function addViewables(\n    data) {var _this3 = this;\n      var sprite = THREE.ImageUtils.loadTexture(data.spriteAtlas.canvas.toDataURL());\n      sprite.minFilter = THREE.LinearFilter;\n      sprite.maxFilter = THREE.LinearFilter;\n      sprite.flipY = false;\n\n      var material = new THREE.PointCloudMaterial({\n        size: data.spriteSize * this.getWindow().devicePixelRatio,\n        map: sprite,\n        vertexColors: THREE.VertexColors,\n        alphaTest: 0.5,\n        transparent: true,\n        occlusion: 1,\n        depthTest: true,\n        depthWrite: true });\n\n\n      material.skipMrtNormals = true;\n\n      function updateDepthUniforms(viewer, mat) {\n        // When AmbientOclution is off, there is no depthTarget\n        var depthTarget = viewer.impl.renderer().getDepthTarget();\n\n        if (depthTarget) {\n          var res = new THREE.Vector2(1 / depthTarget.width, 1 / depthTarget.height);\n          mat.uniforms = Object.assign(mat.uniforms || {}, {\n            \"tDepthTest\": { type: \"t\", value: depthTarget },\n            \"tDepthResolution\": { type: \"v2\", value: res } });\n\n        }\n      }\n\n      updateDepthUniforms(this.viewer, material);\n\n      material.defines = Object.assign(material.defines || {}, {\n        PARTICLE_FRAGMENT: 1,\n        USE_VERTEX_ID: 1,\n        DEPTH_OCCLUSION: this.deviceDepthOcclusion ? 1 : 0,\n        PARTICLE_UV: 1,\n        PARTICLE_FLAGS: \"\" });\n\n\n      var viewerImpl = this.viewer.impl;\n      var matman = viewerImpl.matman();\n      matman.addMaterial(\"__dataVizSpriteMaterial__\", material, true);\n\n      this.pointMaterial = material;\n      this.viewableData = data;\n      this.dbId2Geometry = {};\n\n      this.viewer.addEventListener(av.VIEWER_RESIZE_EVENT, function () {\n        updateDepthUniforms(_this3.viewer, material);\n      });\n\n      var thisObject = this;\n      function geometryCallback(geometry) {\n        geometry.dbIds.forEach(function (dbId) {\n          thisObject.dbId2Geometry[dbId] = geometry;\n        });\n\n        var mesh = new THREE.Mesh(geometry, material);\n        viewerImpl.addOverlay(datavizDotOverlay, mesh);\n        thisObject.pointMeshes.push(mesh);\n\n        setTimeout(function () {\n          viewerImpl.invalidate(false, false, true);\n        }, 16);\n      }\n\n      var builder = new SpriteMeshBuilder(geometryCallback);\n      var viewables = data.viewables;\n      viewables.map(function (item) {\n        if (item.position) {\n          builder.addPoint(item, data.spriteAtlas);\n        }\n      });\n\n      builder.flushBuffer();\n    }\n\n    /**\n       * Removes all viewables from display.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#removeAllViewables\n       */ }, { key: \"removeAllViewables\", value: function removeAllViewables()\n    {\n      // remove all the drawable mesh from the overlay\n      if (this.pointMeshes && this.pointMeshes.length > 0) {\n        var viewerImpl = this.viewer.impl;\n        this.pointMeshes.forEach(function (mesh) {\n          viewerImpl.removeOverlay(datavizDotOverlay, mesh);\n          mesh.geometry.dispose();\n          mesh.material.dispose();\n        });\n\n        viewerImpl.invalidate(false, false, true);\n      }\n\n      // Reset viewable variables.\n      this.pointMeshes = [];\n      delete this.dbId2Geometry;\n      delete this.viewableData;\n    }\n\n    /**\n       * @description Enables or disables depth testing for custom viewable objects.\n       * When depth testing is enabled for custom viewables, they will be occluded\n       * by objects in the scene that are nearer to the camera. If depth testing is\n       * disabled for custom viewables, they will always be visible regardless of\n       * other objects that may be blocking them.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#changeOcclusion\n       * @param {boolean} enable Indicates if occlusion should be enabled. Set\n       * this parameter to `true` to enable depth testing for custom viewables,\n       * or `false` otherwise.\n       */ }, { key: \"changeOcclusion\", value: function changeOcclusion(\n    enable) {\n      if (this.deviceDepthOcclusion != enable) {\n        this.deviceDepthOcclusion = enable;\n        var occlusion = enable ? 1 : 0;\n\n        if (this.pointMaterial && this.pointMaterial.program) {\n          this.pointMaterial.defines[\"DEPTH_OCCLUSION\"] = occlusion;\n          this.pointMaterial.needsUpdate = true;\n        }\n        this.viewer.impl.invalidate(false, false, true);\n      }\n    }\n\n    /**\n       * Sets the visibility and occlusion for these custom viewables.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#showHideViewables\n       * @param {boolean} visible Indicates if all custom viewables should be visible.\n       * Set this to `true` to display all custom viewables, or `false` otherwise.\n       * @param {boolean} occlusion Indicates if occlusion should be enabled. If\n       * this parameter is set to `true`, depth testing will be enabled for custom\n       * viewables, causing them to be occluded by objects that are nearer to the\n       * camera. Set this to `false` in order to always display custom viewables on\n       * top of the view and not be occluded by other objects in the scene.\n       */ }, { key: \"showHideViewables\", value: function showHideViewables(\n    visible, occlusion) {\n      this.changeOcclusion(occlusion);\n\n      if (this.pointMaterial) {\n        this.pointMaterial.visible = visible;\n        this.pointMaterial.needsUpdate = true;\n      }\n\n      this.viewer.impl.invalidate(false, false, true);\n    }\n\n    /**\n       * Highlights one or more existing custom viewables in the scene.\n       * Highlighted viewables can be cleared with `clearHighlightedViewables` API.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#highlightViewables\n       * @param {number|number[]} dbIds The `DbId` of one or more custom viewables\n       * to highlight.\n       */ }, { key: \"highlightViewables\", value: function highlightViewables(\n    dbIds) {\n      if (this.tool) {\n        this.tool.markObject(dbIds);\n      }\n    }\n\n    /**\n       * Clears any existing highlighted custom viewable that was highlighted\n       * with a prior call to `highlightViewables` API.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#clearHighlightedViewables\n       */ }, { key: \"clearHighlightedViewables\", value: function clearHighlightedViewables()\n    {\n      if (this.tool) {\n        this.tool.clearMarkedObject();\n      }\n    }\n\n    /**\n       * Invalidates one or more `CustomViewable` objects, causing them to update\n       * with new properties (e.g. sprite image, position, etc.). Since this call\n       * updates all relevant viewable objects in a single batch, it is recommended\n       * that more viewables to be batched in less number of `invalidateViewables`\n       * calls.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#invalidateViewables\n       *\n       * @param {number|number[]} dbIds One or more `DbId` values of viewables to\n       * be updated in this call.\n       * @param {ViewableInvalidatedCallback} callback The client specified callback\n       * function to be invoked for each of the `CustomViewable` objects being\n       * invalidated. The callback function should return new property values that\n       * the `CustomViewable` object is to be updated with.\n       */ }, { key: \"invalidateViewables\", value: function invalidateViewables(\n    dbIds, callback) {\n      if (!dbIds || dbIds.length <= 0) {\n        console.warn(\"All parameters of 'invalidateViewables' are mandatory\");\n        return;\n      }\n\n      if (!this.pointMeshes || this.pointMeshes.length <= 0 || !this.viewableData) {\n        console.warn(\"'addViewables' must be called before 'invalidateViewables'\");\n        return;\n      }\n\n      if (this.tool) {\n        this.tool.invalidateViewablesDirect(\n        dbIds,\n        this.pointMeshes,\n        this.viewableData,\n        callback);\n\n      }\n    }\n\n    /**\n       * Enables texture display in the current scene.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#showTextures\n       */ }, { key: \"showTextures\", value: function showTextures()\n    {\n      this.textureUtility.showTextures();\n    }\n\n    /**\n       * Disables texture display in the current scene.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#hideTextures\n       */ }, { key: \"hideTextures\", value: function hideTextures()\n    {\n      this.textureUtility.hideTextures();\n    }\n\n    /**\n       * Sets up surface shading (heatmap display) for the model.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#setupSurfaceShading\n       * @param {Model} model The model to set up the shading for. It is used to\n       * establish connections between `DbId` and the corresponding fragments\n       * so that heatmap can be rendered. Note that this model may not always\n       * be the same one representing the main loaded model. If the shading is\n       * set up for models built by `SceneBuilder`, then this parameter should\n       * be the model within that same `SceneBuilder`. See example for more.\n       * @param {SurfaceShadingData} shadingData The surface shading data generated\n       * with a prior call to `ModelStructureInfo.generateSurfaceShadingData`.\n       * This value is used to set up the surface shading.\n       * @param {Object} [options] Extra configuration options for surface shading.\n       * The `options` parameter is only used for setting up `PlanarHeatmap` (i.e.\n       * when `options.type` is set to `PlanarHeatmap`).\n       * @param {string} options.type To create a planar heatmap, this must be set\n       * to `\"PlanarHeatmap\"`.\n       * @param {number} [options.width] Optional. The width in pixels of the\n       * underlying texture used for rendering the heatmap. If the bounding box of\n       * the geometry turns out to be portrait, then `width` value will be adjusted\n       * with respect to `height` value to retain the aspect ratio. If unspecified,\n       * the default value of `1024` pixels is used.\n       * @param {number} [options.height] Optional. The height in pixels of the\n       * underlying texture used for rendering the heatmap. If the bounding box of\n       * the geometry turns out to be landscape, then `height` value will be\n       * adjusted with respect to `width` value to retain the aspect ratio.\n       * If unspecified, the default value of `1024` pixels is used.\n       * @param {boolean} [options.slicingEnabled] Optional. Set this to `true` to\n       * enable geometry slicing through the use of `CompGeom` viewer extension.\n       * This allows edges to be built as boundaries for irregularly shaped geometries,\n       * but may fail for complex geometries. When set to `false`, the axis-aligned\n       * bounding boxes of relevant geometries will be used to display heatmap texture.\n       * If unspecified, this parameter will be set to `true`.\n       * @param {number} [options.slicingPosition] Optional. A number representing the\n       * point at which slicing should happen. Valid value range is `[0.0, 1.0]`. If\n       * unspecified, the default value of `0.5` will be used, slicing geometry through\n       * the vertical mid-point of the bounding box. This value will be used only\n       * if `options.slicingEnabled` is set to `true`.\n       * @param {number} [options.placementPosition] Optional. A number in the range\n       * of `[0.0, 1.0]`, indicating the placement position of the resulting plane.\n       * When set to `0.0`, the plane will be positioned at the lowest `z` coordinate\n       * of the bounding box. When set to `1.0`, the plane will be positioned at the\n       * highest point of the bounding box. If unspecified, the default value of `0.0`\n       * will be used.\n       * @param {number} [options.minOpacity] Optional. The minimum opacity the lowest\n       * value in the heatmap will have. This value is in the range of `[0.0, 1.0]`. If\n       * unspecified the default value of `0.0` will be used.\n       * @param {number} [options.maxOpacity] Optional. The maximal opacity the highest\n       * value in the heatmap will have. This value is in the range of `[0.0, 1.0]`. If\n       * unspecified the default value of `1.0` will be used.\n       *\n       * @example\n       *  // 'devices' is a list of 'Device' objects\n       *  const info = new Autodesk.DataVisualization.Core.ModelStructureInfo(model);\n       *  const shadingData = await info.generateSurfaceShadingData(devices);\n       *\n       *  // The call to 'generateSurfaceShadingData' above generates 'shadingData'\n       *  // based on 'model' that is passed to 'ModelStructureInfo', therefore the\n       *  // 'DbId' within 'shadingData' are all originated from the same 'model'.\n       *  // In this case, the first parameter is the same 'model' above.\n       *  //\n       *  dataVizExtn.setupSurfaceShading(model, shadingData);\n       *\n       *  // If the 'SurfaceShadingData' passed to 'setupSurfaceShading' is constructed\n       *  // with 'DbId' coming from a 'SceneBuilder', then the first parameter must be\n       *  // the same model that 'SurfaceShadingData' was created from:\n       *  //\n       *  // const anotherModel = sceneBuilder.modelBuilder.model;\n       *  // dataVizExtn.setupSurfaceShading(anotherModel, shadingData);\n       */ }, { key: \"setupSurfaceShading\", value: function () {var _setupSurfaceShading = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(\n      model, shadingData) {var _this4 = this;var options,createSetup,_args4 = arguments;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                createSetup = /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:\n                            if (_this4.surfaceShading) {\n                              _this4.surfaceShading.cleanUp();\n                            }if (!(\n\n                            options.type == \"PlanarHeatmap\")) {_context3.next = 7;break;}_context3.next = 4;return (\n                              _this4.viewer.loadExtension(\"Autodesk.CompGeom\"));case 4:\n                            _this4.surfaceShading = new PlanarHeatmap(_this4.viewer, model, shadingData, options);_context3.next = 8;break;case 7:\n\n                            _this4.surfaceShading = new SurfaceShading(_this4.viewer, model, shadingData);case 8:case \"end\":return _context3.stop();}}}, _callee3);}));return function createSetup() {return _ref.apply(this, arguments);};}();_context4.next = 4;return (\n\n\n\n                  this.waitForInstanceTree(model));case 4:return _context4.abrupt(\"return\",\n                createSetup());case 5:case \"end\":return _context4.stop();}}}, _callee4, this);}));function setupSurfaceShading(_x2, _x3) {return _setupSurfaceShading.apply(this, arguments);}return setupSurfaceShading;}()\n\n\n    /**\n                                                                                                                                                                                                                              * Renders one or more nodes with the given identifiers. This call creates\n                                                                                                                                                                                                                              * necessary resources like overlay scene and materials, therefore is by\n                                                                                                                                                                                                                              * design to be called only when necessary (i.e., when surface shading needs\n                                                                                                                                                                                                                              * to be updated due to geometry changes). For more lightweight\n                                                                                                                                                                                                                              * rendering, `updateSurfaceShading` API should be used instead.\n                                                                                                                                                                                                                              *\n                                                                                                                                                                                                                              * @alias Autodesk.DataVisualization.Core.DataVisualization#renderSurfaceShading\n                                                                                                                                                                                                                              * @param {string|string[]} nodeIds One or more identifiers of nodes\n                                                                                                                                                                                                                              * to render. These identifiers are among the ones provided\n                                                                                                                                                                                                                              * through `SurfaceShadingData` in a prior call to `setupSurfaceShading` API.\n                                                                                                                                                                                                                              * @param {string} sensorType The type of sensor to render the shading for.\n                                                                                                                                                                                                                              * @param {SensorValueCallback} valueCallback The callback function that\n                                                                                                                                                                                                                              * will be invoked when surface shading requires the sensor value to render.\n                                                                                                                                                                                                                              * @param {HeatmapConfig} [heatmapConfig] Optional. The configuration of\n                                                                                                                                                                                                                              * the heatmap. See documentation for `HeatmapConfig` for more details.\n                                                                                                                                                                                                                              *\n                                                                                                                                                                                                                              * @example\n                                                                                                                                                                                                                              *  // This callback will be invoked multiple times for each call to\n                                                                                                                                                                                                                              *  // 'renderSurfaceShading' below, once for each of the devices on\n                                                                                                                                                                                                                              *  // the floor.\n                                                                                                                                                                                                                              *  function getSensorValue(deviceInfo, sensorType) {\n                                                                                                                                                                                                                              *      const deviceId = deviceInfo.id;\n                                                                                                                                                                                                                              *      const sensorValue = readSensorValue(deviceId, sensorType);\n                                                                                                                                                                                                                              *      return clamp(sensorValue, 0.0, 1.0); // Normalize sensor value\n                                                                                                                                                                                                                              *  }\n                                                                                                                                                                                                                              *\n                                                                                                                                                                                                                              *  function onFloorSelectedOnUi(floorName) {\n                                                                                                                                                                                                                              *      const sensorType = \"CO₂\";\n                                                                                                                                                                                                                              *      dataVizExtn.renderSurfaceShading(floorName, sensorType, getSensorValue);\n                                                                                                                                                                                                                              *  }\n                                                                                                                                                                                                                              */ }, { key: \"renderSurfaceShading\", value: function renderSurfaceShading(\n    nodeIds, sensorType, valueCallback, heatmapConfig) {\n      // The following handles the API update without breaking existing client\n      // codes that can be in one of two categories: code that omits the 4th\n      // parameter (i.e. `confidenceSize`), and code that specifies a number as\n      // the 4th parameter. For the first category, `confidenceSize` defaults\n      // to `160.0` while for the second category, `confidenceSize` will be set\n      // to the number client code provides.\n      //\n      // For newer client code that provides `HeatmapConfig`, its value will be\n      // further validated in volumetric and planar heatmap, depending on the\n      // values that make sense of them.\n      //\n      if (heatmapConfig === null || typeof heatmapConfig === \"undefined\") {\n        heatmapConfig = { confidence: 160.0 };\n      } else if (typeof heatmapConfig === \"number\") {\n        heatmapConfig = { confidence: Math.abs(heatmapConfig) };\n      }\n\n      if (this.surfaceShading) {\n        this.surfaceShading.render(nodeIds, sensorType, valueCallback, heatmapConfig);\n      } else {\n        avp.logger.error(\"Please call setupSurfaceShading first\");\n      }\n    }\n\n    /**\n       * Updates the surface shading (heatmap) with the latest sensor values.\n       * This API simply updates the resources created in a prior call to\n       * the `renderSurfaceShading` without recreating them, therefore it is\n       * a more lightweight alternatives suited for high frequency calls.\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#updateSurfaceShading\n       * @param {SensorValueCallback} valueCallback The callback function that\n       * will be invoked when surface shading requires the sensor value to render.\n       * @param {HeatmapConfig} [heatmapConfig] Optional. The configuration of\n       * the heatmap. See documentation for `HeatmapConfig` for more details.\n       *\n       * @example\n       *  let seconds; // Selected time on the UI\n       *\n       *  // This callback will be invoked multiple times for each call to\n       *  // 'renderSurfaceShading' below, once for each of the devices on\n       *  // the floor.\n       *  function getSensorValue(deviceInfo, sensorType) {\n       *      const deviceId = deviceInfo.id;\n       *      const sensorValue = readSensorValue(deviceId, sensorType, seconds);\n       *      return clamp(sensorValue, 0.0, 1.0); // Normalize sensor value\n       *  }\n       *\n       *  // Handler for slider events that is triggered rapidly\n       *  function onTimeSliderValueChanged(timeInSeconds) {\n       *      seconds = timeInSeconds;\n       *      dataVizExtn.updateSurfaceShading(getSensorValue);\n       *  }\n       */ }, { key: \"updateSurfaceShading\", value: function updateSurfaceShading(\n    valueCallback, heatmapConfig) {\n      if (this.surfaceShading) {\n        this.surfaceShading.updateShading(valueCallback, heatmapConfig);\n      } else {\n        avp.logger.error(\"Please call setupSurfaceShading first\");\n      }\n    }\n\n    /**\n       * Registers color stops for use in heatmap colorization. The specified color\n       * stops evenly spread out across the spectrum that represents the normalized\n       * sensor values ranging between 0.0 and 1.0.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#registerSurfaceShadingColors\n       *\n       * @param {string} sensorType The sensor type to define the color stops for.\n       * @param {number[]} colors An array of color values, each expressed in a\n       * 3-byte (24-bit) numerical value. Note that it is possible to specify a\n       * 4-byte (32-bit) number as color, but only 3 lower bytes will be taken.\n       * Each of the three bytes represents the intensity value between `0` and `255`,\n       * of red, green, blue color component respectively. For example, `0xff0000`\n       * represents a red color with full intensity.\n       *\n       * @param {number} alpha The opacity of the heatmap for the specified sensorType\n       *\n       * @example\n       *  // Register 3 color stops for CO₂ sensor values\n       *  const dataVizExt = await viewer.loadExtension(\"Autodesk.DataVisualization\");\n       *  dataVizExt.registerSurfaceShadingColors(\"CO₂\", [0x0f2027, 0x203a43, 0x2c5364]);\n       */ }, { key: \"registerSurfaceShadingColors\", value: function registerSurfaceShadingColors(\n    sensorType, colors) {var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.7;\n      if (this.surfaceShading) {\n        this.surfaceShading.registerSensorColors(sensorType, colors, alpha);\n      } else {\n        avp.logger.error(\"Please call setupSurfaceShading first\");\n      }\n    }\n\n    /**\n       * Removes any surface shading created by clearing the overlay\n       * which holds the meshes used as heatmap representation.\n       *\n       * @alias Autodesk.DataVisualization.Core.DataVisualization#removeSurfaceShading\n       */ }, { key: \"removeSurfaceShading\", value: function removeSurfaceShading()\n    {\n      if (this.surfaceShading) {\n        this.surfaceShading.removeShading();\n      }\n    } }, { key: \"hasViewables\", get: function get() {return this.pointMeshes && this.pointMeshes.length > 0 && this.viewableData;} }, { key: \"streamLineBuilder\", get: function get() {if (!this._streamLineBuilder) {this._streamLineBuilder = new StreamLineBuilder(this.viewer);}return this._streamLineBuilder;} }]);return DataVisualization;}(av.Extension);\n\n\nav.theExtensionManager.registerExtension(extnName, DataVisualization);","/*\n * heatmap.js v2.0.5 | JavaScript Heatmap Library\n *\n * Copyright 2008-2016 Patrick Wied <heatmapjs@patrick-wied.at> - All rights reserved.\n * Dual licensed under MIT and Beerware license \n *\n * :: 2016-09-05 01:16\n */\n;(function (name, context, factory) {\n\n  // Supports UMD. AMD, CommonJS/Node.js and browser context\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else {\n    context[name] = factory();\n  }\n\n})(\"h337\", this, function () {\n\n  // Heatmap Config stores default values and will be merged with instance config\n  var HeatmapConfig = {\n    defaultRadius: 40,\n    defaultRenderer: 'canvas2d',\n    defaultGradient: { 0.25: \"rgb(0,0,255)\", 0.55: \"rgb(0,255,0)\", 0.85: \"yellow\", 1.0: \"rgb(255,0,0)\" },\n    defaultMaxOpacity: 1,\n    defaultMinOpacity: 0,\n    defaultBlur: .85,\n    defaultXField: 'x',\n    defaultYField: 'y',\n    defaultValueField: 'value',\n    plugins: {} };\n\n  var Store = function StoreClosure() {\n\n    var Store = function Store(config) {\n      this._coordinator = {};\n      this._data = [];\n      this._radi = [];\n      this._min = 10;\n      this._max = 1;\n      this._xField = config['xField'] || config.defaultXField;\n      this._yField = config['yField'] || config.defaultYField;\n      this._valueField = config['valueField'] || config.defaultValueField;\n\n      if (config[\"radius\"]) {\n        this._cfgRadius = config[\"radius\"];\n      }\n    };\n\n    var defaultRadius = HeatmapConfig.defaultRadius;\n\n    Store.prototype = {\n      // when forceRender = false -> called from setData, omits renderall event\n      _organiseData: function _organiseData(dataPoint, forceRender) {\n        var x = dataPoint[this._xField];\n        var y = dataPoint[this._yField];\n        var radi = this._radi;\n        var store = this._data;\n        var max = this._max;\n        var min = this._min;\n        var value = dataPoint[this._valueField] || 1;\n        var radius = dataPoint.radius || this._cfgRadius || defaultRadius;\n\n        if (!store[x]) {\n          store[x] = [];\n          radi[x] = [];\n        }\n\n        if (!store[x][y]) {\n          store[x][y] = value;\n          radi[x][y] = radius;\n        } else {\n          store[x][y] += value;\n        }\n        var storedVal = store[x][y];\n\n        if (storedVal > max) {\n          if (!forceRender) {\n            this._max = storedVal;\n          } else {\n            this.setDataMax(storedVal);\n          }\n          return false;\n        } else if (storedVal < min) {\n          if (!forceRender) {\n            this._min = storedVal;\n          } else {\n            this.setDataMin(storedVal);\n          }\n          return false;\n        } else {\n          return {\n            x: x,\n            y: y,\n            value: value,\n            radius: radius,\n            min: min,\n            max: max };\n\n        }\n      },\n      _unOrganizeData: function _unOrganizeData() {\n        var unorganizedData = [];\n        var data = this._data;\n        var radi = this._radi;\n\n        for (var x in data) {\n          for (var y in data[x]) {\n\n            unorganizedData.push({\n              x: x,\n              y: y,\n              radius: radi[x][y],\n              value: data[x][y] });\n\n\n          }\n        }\n        return {\n          min: this._min,\n          max: this._max,\n          data: unorganizedData };\n\n      },\n      _onExtremaChange: function _onExtremaChange() {\n        this._coordinator.emit('extremachange', {\n          min: this._min,\n          max: this._max });\n\n      },\n      addData: function addData() {\n        if (arguments[0].length > 0) {\n          var dataArr = arguments[0];\n          var dataLen = dataArr.length;\n          while (dataLen--) {\n            this.addData.call(this, dataArr[dataLen]);\n          }\n        } else {\n          // add to store  \n          var organisedEntry = this._organiseData(arguments[0], true);\n          if (organisedEntry) {\n            // if it's the first datapoint initialize the extremas with it\n            if (this._data.length === 0) {\n              this._min = this._max = organisedEntry.value;\n            }\n            this._coordinator.emit('renderpartial', {\n              min: this._min,\n              max: this._max,\n              data: [organisedEntry] });\n\n          }\n        }\n        return this;\n      },\n      setData: function setData(data) {\n        var dataPoints = data.data;\n        var pointsLen = dataPoints.length;\n\n\n        // reset data arrays\n        this._data = [];\n        this._radi = [];\n\n        for (var i = 0; i < pointsLen; i++) {\n          this._organiseData(dataPoints[i], false);\n        }\n        this._max = data.max;\n        this._min = data.min || 0;\n\n        this._onExtremaChange();\n        this._coordinator.emit('renderall', this._getInternalData());\n        return this;\n      },\n      removeData: function removeData() {\n        // TODO: implement\n      },\n      setDataMax: function setDataMax(max) {\n        this._max = max;\n        this._onExtremaChange();\n        this._coordinator.emit('renderall', this._getInternalData());\n        return this;\n      },\n      setDataMin: function setDataMin(min) {\n        this._min = min;\n        this._onExtremaChange();\n        this._coordinator.emit('renderall', this._getInternalData());\n        return this;\n      },\n      setCoordinator: function setCoordinator(coordinator) {\n        this._coordinator = coordinator;\n      },\n      _getInternalData: function _getInternalData() {\n        return {\n          max: this._max,\n          min: this._min,\n          data: this._data,\n          radi: this._radi };\n\n      },\n      getData: function getData() {\n        return this._unOrganizeData();\n      } /*,\n          TODO: rethink.\n        getValueAt: function(point) {\n         var value;\n         var radius = 100;\n         var x = point.x;\n         var y = point.y;\n         var data = this._data;\n          if (data[x] && data[x][y]) {\n           return data[x][y];\n         } else {\n           var values = [];\n           // radial search for datapoints based on default radius\n           for(var distance = 1; distance < radius; distance++) {\n             var neighbors = distance * 2 +1;\n             var startX = x - distance;\n             var startY = y - distance;\n              for(var i = 0; i < neighbors; i++) {\n               for (var o = 0; o < neighbors; o++) {\n                 if ((i == 0 || i == neighbors-1) || (o == 0 || o == neighbors-1)) {\n                   if (data[startY+i] && data[startY+i][startX+o]) {\n                     values.push(data[startY+i][startX+o]);\n                   }\n                 } else {\n                   continue;\n                 } \n               }\n             }\n           }\n           if (values.length > 0) {\n             return Math.max.apply(Math, values);\n           }\n         }\n         return false;\n        }*/ };\n\n\n\n\n\n\n\n    return Store;\n  }();\n\n  var Canvas2dRenderer = function Canvas2dRendererClosure() {\n\n    var _getColorPalette = function _getColorPalette(config) {\n      var gradientConfig = config.gradient || config.defaultGradient;\n      var paletteCanvas = document.createElement('canvas');\n      var paletteCtx = paletteCanvas.getContext('2d');\n\n      paletteCanvas.width = 256;\n      paletteCanvas.height = 1;\n\n      var gradient = paletteCtx.createLinearGradient(0, 0, 256, 1);\n      for (var key in gradientConfig) {\n        gradient.addColorStop(key, gradientConfig[key]);\n      }\n\n      paletteCtx.fillStyle = gradient;\n      paletteCtx.fillRect(0, 0, 256, 1);\n\n      return paletteCtx.getImageData(0, 0, 256, 1).data;\n    };\n\n    var _getPointTemplate = function _getPointTemplate(radius, blurFactor) {\n      var tplCanvas = document.createElement('canvas');\n      var tplCtx = tplCanvas.getContext('2d');\n      var x = radius;\n      var y = radius;\n      tplCanvas.width = tplCanvas.height = radius * 2;\n\n      if (blurFactor == 1) {\n        tplCtx.beginPath();\n        tplCtx.arc(x, y, radius, 0, 2 * Math.PI, false);\n        tplCtx.fillStyle = 'rgba(0,0,0,1)';\n        tplCtx.fill();\n      } else {\n        var gradient = tplCtx.createRadialGradient(x, y, radius * blurFactor, x, y, radius);\n        gradient.addColorStop(0, 'rgba(0,0,0,1)');\n        gradient.addColorStop(1, 'rgba(0,0,0,0)');\n        tplCtx.fillStyle = gradient;\n        tplCtx.fillRect(0, 0, 2 * radius, 2 * radius);\n      }\n\n\n\n      return tplCanvas;\n    };\n\n    var _prepareData = function _prepareData(data) {\n      var renderData = [];\n      var min = data.min;\n      var max = data.max;\n      var radi = data.radi;\n      var data = data.data;\n\n      var xValues = Object.keys(data);\n      var xValuesLen = xValues.length;\n\n      while (xValuesLen--) {\n        var xValue = xValues[xValuesLen];\n        var yValues = Object.keys(data[xValue]);\n        var yValuesLen = yValues.length;\n        while (yValuesLen--) {\n          var yValue = yValues[yValuesLen];\n          var value = data[xValue][yValue];\n          var radius = radi[xValue][yValue];\n          renderData.push({\n            x: xValue,\n            y: yValue,\n            value: value,\n            radius: radius });\n\n        }\n      }\n\n      return {\n        min: min,\n        max: max,\n        data: renderData };\n\n    };\n\n\n    function Canvas2dRenderer(config) {\n      var container = config.container;\n      var shadowCanvas = this.shadowCanvas = document.createElement('canvas');\n      var canvas = this.canvas = config.canvas || document.createElement('canvas');\n      var renderBoundaries = this._renderBoundaries = [10000, 10000, 0, 0];\n\n      var computed = getComputedStyle(config.container) || {};\n\n      canvas.className = 'heatmap-canvas';\n\n      this._width = canvas.width = shadowCanvas.width = config.width || +computed.width.replace(/px/, '');\n      this._height = canvas.height = shadowCanvas.height = config.height || +computed.height.replace(/px/, '');\n\n      this.shadowCtx = shadowCanvas.getContext('2d');\n      this.ctx = canvas.getContext('2d');\n\n      // @TODO:\n      // conditional wrapper\n\n      canvas.style.cssText = shadowCanvas.style.cssText = 'position:absolute;left:0;top:0;';\n\n      container.style.position = 'relative';\n      container.appendChild(canvas);\n\n      this._palette = _getColorPalette(config);\n      this._templates = {};\n\n      this._setStyles(config);\n    };\n\n    Canvas2dRenderer.prototype = {\n      renderPartial: function renderPartial(data) {\n        if (data.data.length > 0) {\n          this._drawAlpha(data);\n          this._colorize();\n        }\n      },\n      renderAll: function renderAll(data) {\n        // reset render boundaries\n        this._clear();\n        if (data.data.length > 0) {\n          this._drawAlpha(_prepareData(data));\n          this._colorize();\n        }\n      },\n      _updateGradient: function _updateGradient(config) {\n        this._palette = _getColorPalette(config);\n      },\n      updateConfig: function updateConfig(config) {\n        if (config['gradient']) {\n          this._updateGradient(config);\n        }\n        this._setStyles(config);\n      },\n      setDimensions: function setDimensions(width, height) {\n        this._width = width;\n        this._height = height;\n        this.canvas.width = this.shadowCanvas.width = width;\n        this.canvas.height = this.shadowCanvas.height = height;\n      },\n      _clear: function _clear() {\n        this.shadowCtx.clearRect(0, 0, this._width, this._height);\n        this.ctx.clearRect(0, 0, this._width, this._height);\n      },\n      _setStyles: function _setStyles(config) {\n        this._blur = config.blur == 0 ? 0 : config.blur || config.defaultBlur;\n\n        if (config.backgroundColor) {\n          this.canvas.style.backgroundColor = config.backgroundColor;\n        }\n\n        this._width = this.canvas.width = this.shadowCanvas.width = config.width || this._width;\n        this._height = this.canvas.height = this.shadowCanvas.height = config.height || this._height;\n\n\n        this._opacity = (config.opacity || 0) * 255;\n        this._maxOpacity = (config.maxOpacity || config.defaultMaxOpacity) * 255;\n        this._minOpacity = (config.minOpacity || config.defaultMinOpacity) * 255;\n        this._useGradientOpacity = !!config.useGradientOpacity;\n      },\n      _drawAlpha: function _drawAlpha(data) {\n        var min = this._min = data.min;\n        var max = this._max = data.max;\n        var data = data.data || [];\n        var dataLen = data.length;\n        // on a point basis?\n        var blur = 1 - this._blur;\n\n        while (dataLen--) {\n\n          var point = data[dataLen];\n\n          var x = point.x;\n          var y = point.y;\n          var radius = point.radius;\n          // if value is bigger than max\n          // use max as value\n          var value = Math.min(point.value, max);\n          var rectX = x - radius;\n          var rectY = y - radius;\n          var shadowCtx = this.shadowCtx;\n\n\n\n\n          var tpl;\n          if (!this._templates[radius]) {\n            this._templates[radius] = tpl = _getPointTemplate(radius, blur);\n          } else {\n            tpl = this._templates[radius];\n          }\n          // value from minimum / value range\n          // => [0, 1]\n          var templateAlpha = (value - min) / (max - min);\n          // this fixes #176: small values are not visible because globalAlpha < .01 cannot be read from imageData\n          shadowCtx.globalAlpha = templateAlpha < .01 ? .01 : templateAlpha;\n\n          shadowCtx.drawImage(tpl, rectX, rectY);\n\n          // update renderBoundaries\n          if (rectX < this._renderBoundaries[0]) {\n            this._renderBoundaries[0] = rectX;\n          }\n          if (rectY < this._renderBoundaries[1]) {\n            this._renderBoundaries[1] = rectY;\n          }\n          if (rectX + 2 * radius > this._renderBoundaries[2]) {\n            this._renderBoundaries[2] = rectX + 2 * radius;\n          }\n          if (rectY + 2 * radius > this._renderBoundaries[3]) {\n            this._renderBoundaries[3] = rectY + 2 * radius;\n          }\n\n        }\n      },\n      _colorize: function _colorize() {\n        var x = this._renderBoundaries[0];\n        var y = this._renderBoundaries[1];\n        var width = this._renderBoundaries[2] - x;\n        var height = this._renderBoundaries[3] - y;\n        var maxWidth = this._width;\n        var maxHeight = this._height;\n        var opacity = this._opacity;\n        var maxOpacity = this._maxOpacity;\n        var minOpacity = this._minOpacity;\n        var useGradientOpacity = this._useGradientOpacity;\n\n        if (x < 0) {\n          x = 0;\n        }\n        if (y < 0) {\n          y = 0;\n        }\n        if (x + width > maxWidth) {\n          width = maxWidth - x;\n        }\n        if (y + height > maxHeight) {\n          height = maxHeight - y;\n        }\n\n        var img = this.shadowCtx.getImageData(x, y, width, height);\n        var imgData = img.data;\n        var len = imgData.length;\n        var palette = this._palette;\n\n\n        for (var i = 3; i < len; i += 4) {\n          var alpha = imgData[i];\n          var offset = alpha * 4;\n\n\n          if (!offset) {\n            continue;\n          }\n\n          var finalAlpha;\n          if (opacity > 0) {\n            finalAlpha = opacity;\n          } else {\n            if (alpha < maxOpacity) {\n              if (alpha < minOpacity) {\n                finalAlpha = minOpacity;\n              } else {\n                finalAlpha = alpha;\n              }\n            } else {\n              finalAlpha = maxOpacity;\n            }\n          }\n\n          imgData[i - 3] = palette[offset];\n          imgData[i - 2] = palette[offset + 1];\n          imgData[i - 1] = palette[offset + 2];\n          imgData[i] = useGradientOpacity ? palette[offset + 3] : finalAlpha;\n\n        }\n\n        img.data = imgData;\n        this.ctx.putImageData(img, x, y);\n\n        this._renderBoundaries = [1000, 1000, 0, 0];\n\n      },\n      getValueAt: function getValueAt(point) {\n        var value;\n        var shadowCtx = this.shadowCtx;\n        var img = shadowCtx.getImageData(point.x, point.y, 1, 1);\n        var data = img.data[3];\n        var max = this._max;\n        var min = this._min;\n\n        value = Math.abs(max - min) * (data / 255) >> 0;\n\n        return value;\n      },\n      getDataURL: function getDataURL() {\n        return this.canvas.toDataURL();\n      } };\n\n\n\n    return Canvas2dRenderer;\n  }();\n\n\n  var Renderer = function RendererClosure() {\n\n    var rendererFn = false;\n\n    if (HeatmapConfig['defaultRenderer'] === 'canvas2d') {\n      rendererFn = Canvas2dRenderer;\n    }\n\n    return rendererFn;\n  }();\n\n\n  var Util = {\n    merge: function merge() {\n      var merged = {};\n      var argsLen = arguments.length;\n      for (var i = 0; i < argsLen; i++) {\n        var obj = arguments[i];\n        for (var key in obj) {\n          merged[key] = obj[key];\n        }\n      }\n      return merged;\n    } };\n\n  // Heatmap Constructor\n  var Heatmap = function HeatmapClosure() {\n\n    var Coordinator = function CoordinatorClosure() {\n\n      function Coordinator() {\n        this.cStore = {};\n      };\n\n      Coordinator.prototype = {\n        on: function on(evtName, callback, scope) {\n          var cStore = this.cStore;\n\n          if (!cStore[evtName]) {\n            cStore[evtName] = [];\n          }\n          cStore[evtName].push(function (data) {\n            return callback.call(scope, data);\n          });\n        },\n        emit: function emit(evtName, data) {\n          var cStore = this.cStore;\n          if (cStore[evtName]) {\n            var len = cStore[evtName].length;\n            for (var i = 0; i < len; i++) {\n              var callback = cStore[evtName][i];\n              callback(data);\n            }\n          }\n        } };\n\n\n      return Coordinator;\n    }();\n\n\n    var _connect = function _connect(scope) {\n      var renderer = scope._renderer;\n      var coordinator = scope._coordinator;\n      var store = scope._store;\n\n      coordinator.on('renderpartial', renderer.renderPartial, renderer);\n      coordinator.on('renderall', renderer.renderAll, renderer);\n      coordinator.on('extremachange', function (data) {\n        scope._config.onExtremaChange &&\n        scope._config.onExtremaChange({\n          min: data.min,\n          max: data.max,\n          gradient: scope._config['gradient'] || scope._config['defaultGradient'] });\n\n      });\n      store.setCoordinator(coordinator);\n    };\n\n\n    function Heatmap() {\n      var config = this._config = Util.merge(HeatmapConfig, arguments[0] || {});\n      this._coordinator = new Coordinator();\n      if (config['plugin']) {\n        var pluginToLoad = config['plugin'];\n        if (!HeatmapConfig.plugins[pluginToLoad]) {\n          throw new Error('Plugin \\'' + pluginToLoad + '\\' not found. Maybe it was not registered.');\n        } else {\n          var plugin = HeatmapConfig.plugins[pluginToLoad];\n          // set plugin renderer and store\n          this._renderer = new plugin.renderer(config);\n          this._store = new plugin.store(config);\n        }\n      } else {\n        this._renderer = new Renderer(config);\n        this._store = new Store(config);\n      }\n      _connect(this);\n    };\n\n    // @TODO:\n    // add API documentation\n    Heatmap.prototype = {\n      addData: function addData() {\n        this._store.addData.apply(this._store, arguments);\n        return this;\n      },\n      removeData: function removeData() {\n        this._store.removeData && this._store.removeData.apply(this._store, arguments);\n        return this;\n      },\n      setData: function setData() {\n        this._store.setData.apply(this._store, arguments);\n        return this;\n      },\n      setDataMax: function setDataMax() {\n        this._store.setDataMax.apply(this._store, arguments);\n        return this;\n      },\n      setDataMin: function setDataMin() {\n        this._store.setDataMin.apply(this._store, arguments);\n        return this;\n      },\n      configure: function configure(config) {\n        this._config = Util.merge(this._config, config);\n        this._renderer.updateConfig(this._config);\n        this._coordinator.emit('renderall', this._store._getInternalData());\n        return this;\n      },\n      repaint: function repaint() {\n        this._coordinator.emit('renderall', this._store._getInternalData());\n        return this;\n      },\n      getData: function getData() {\n        return this._store.getData();\n      },\n      getDataURL: function getDataURL() {\n        return this._renderer.getDataURL();\n      },\n      getValueAt: function getValueAt(point) {\n\n        if (this._store.getValueAt) {\n          return this._store.getValueAt(point);\n        } else if (this._renderer.getValueAt) {\n          return this._renderer.getValueAt(point);\n        } else {\n          return null;\n        }\n      } };\n\n\n    return Heatmap;\n\n  }();\n\n\n  // core\n  var heatmapFactory = {\n    create: function create(config) {\n      return new Heatmap(config);\n    },\n    register: function register(pluginKey, plugin) {\n      HeatmapConfig.plugins[pluginKey] = plugin;\n    } };\n\n\n  return heatmapFactory;\n\n\n});","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);} // vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n  \"use strict\";\n\n  // This file will function properly as a <script> tag, or a module\n  // using CommonJS and NodeJS or RequireJS module formats.  In\n  // Common/Node/RequireJS, the module exports the Q API and when\n  // executed as a simple <script>, it creates a Q global instead.\n\n  // Montage Require\n  if (typeof bootstrap === \"function\") {\n    bootstrap(\"promise\", definition);\n\n    // CommonJS\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\" && (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\") {\n    module.exports = definition();\n\n    // RequireJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(definition);\n\n    // SES (Secure EcmaScript)\n  } else if (typeof ses !== \"undefined\") {\n    if (!ses.ok()) {\n      return;\n    } else {\n      ses.makeQ = definition;\n    }\n\n    // <script>\n  } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n    // Prefer window over self for add-on scripts. Use self for\n    // non-windowed contexts.\n    var global = typeof window !== \"undefined\" ? window : self;\n\n    // Get the `window` object, save the previous Q global\n    // and initialize Q as a global.\n    var previousQ = global.Q;\n    global.Q = definition();\n\n    // Add a noConflict function so Q can be removed from the\n    // global namespace.\n    global.Q.noConflict = function () {\n      global.Q = previousQ;\n      return this;\n    };\n\n  } else {\n    throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n  }\n\n})(function () {\n  \"use strict\";\n\n  var hasStacks = false;\n  try {\n    throw new Error();\n  } catch (e) {\n    hasStacks = !!e.stack;\n  }\n\n  // All code after this point will be filtered from stack traces reported\n  // by Q.\n  var qStartingLine = captureLine();\n  var qFileName;\n\n  // shims\n\n  // used for fallback in \"allResolved\"\n  var noop = function noop() {};\n\n  // Use the fastest possible means to execute a task in a future turn\n  // of the event loop.\n  var nextTick = function () {\n    // linked list of tasks (single, with head node)\n    var head = { task: void 0, next: null };\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n      /* jshint loopfunc: true */\n      var task, domain;\n\n      while (head.next) {\n        head = head.next;\n        task = head.task;\n        head.task = void 0;\n        domain = head.domain;\n\n        if (domain) {\n          head.domain = void 0;\n          domain.enter();\n        }\n        runSingle(task, domain);\n\n      }\n      while (laterQueue.length) {\n        task = laterQueue.pop();\n        runSingle(task);\n      }\n      flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n      try {\n        task();\n\n      } catch (e) {\n        if (isNodeJS) {\n          // In node, uncaught exceptions are considered fatal errors.\n          // Re-throw them synchronously to interrupt flushing!\n\n          // Ensure continuation if the uncaught exception is suppressed\n          // listening \"uncaughtException\" events (as domains does).\n          // Continue in next event to avoid tick recursion.\n          if (domain) {\n            domain.exit();\n          }\n          setTimeout(flush, 0);\n          if (domain) {\n            domain.enter();\n          }\n\n          throw e;\n\n        } else {\n          // In browsers, uncaught exceptions are not fatal.\n          // Re-throw them asynchronously to avoid slow-downs.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      }\n\n      if (domain) {\n        domain.exit();\n      }\n    }\n\n    nextTick = function nextTick(task) {\n      tail = tail.next = {\n        task: task,\n        domain: isNodeJS && process.domain,\n        next: null };\n\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" &&\n    process.toString() === \"[object process]\" && process.nextTick) {\n      // Ensure Q is in a real Node environment, with a `process.nextTick`.\n      // To see through fake Node environments:\n      // * Mocha test runner - exposes a `process` global without a `nextTick`\n      // * Browserify - exposes a `process.nexTick` function that uses\n      //   `setTimeout`. In this case `setImmediate` is preferred because\n      //    it is faster. Browserify's `process.toString()` yields\n      //   \"[object Object]\", while in a real Node environment\n      //   `process.toString()` yields \"[object process]\".\n      isNodeJS = true;\n\n      requestTick = function requestTick() {\n        process.nextTick(flush);\n      };\n\n    } else if (typeof setImmediate === \"function\") {\n      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n      if (typeof window !== \"undefined\") {\n        requestTick = setImmediate.bind(window, flush);\n      } else {\n        requestTick = function requestTick() {\n          setImmediate(flush);\n        };\n      }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n      // modern browsers\n      // http://www.nonblocking.io/2011/06/windownexttick.html\n      var channel = new MessageChannel();\n      // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n      // working message ports the first time a page loads.\n      channel.port1.onmessage = function () {\n        requestTick = requestPortTick;\n        channel.port1.onmessage = flush;\n        flush();\n      };\n      var requestPortTick = function requestPortTick() {\n        // Opera requires us to provide a message payload, regardless of\n        // whether we use it.\n        channel.port2.postMessage(0);\n      };\n      requestTick = function requestTick() {\n        setTimeout(flush, 0);\n        requestPortTick();\n      };\n\n    } else {\n      // old browsers\n      requestTick = function requestTick() {\n        setTimeout(flush, 0);\n      };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n      laterQueue.push(task);\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n    return nextTick;\n  }();\n\n  // Attempt to make generics safe in the face of downstream\n  // modifications.\n  // There is no situation where this is necessary.\n  // If you need a security guarantee, these primordials need to be\n  // deeply frozen anyway, and if you don’t need a security guarantee,\n  // this is just plain paranoid.\n  // However, this **might** have the nice side-effect of reducing the size of\n  // the minified code by reducing x.call() to merely x()\n  // See Mark Miller’s explanation of what this does.\n  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n  var call = Function.call;\n  function uncurryThis(f) {\n    return function () {\n      return call.apply(f, arguments);\n    };\n  }\n  // This is equivalent, but slower:\n  // uncurryThis = Function_bind.bind(Function_bind.call);\n  // http://jsperf.com/uncurrythis\n\n  var array_slice = uncurryThis(Array.prototype.slice);\n\n  var array_reduce = uncurryThis(\n  Array.prototype.reduce || function (callback, basis) {\n    var index = 0,\n    length = this.length;\n    // concerning the initial value, if one is not provided\n    if (arguments.length === 1) {\n      // seek to the first value in the array, accounting\n      // for the possibility that is is a sparse array\n      do {\n        if (index in this) {\n          basis = this[index++];\n          break;\n        }\n        if (++index >= length) {\n          throw new TypeError();\n        }\n      } while (1);\n    }\n    // reduce\n    for (; index < length; index++) {\n      // account for the possibility that the array is sparse\n      if (index in this) {\n        basis = callback(basis, this[index], index);\n      }\n    }\n    return basis;\n  });\n\n\n  var array_indexOf = uncurryThis(\n  Array.prototype.indexOf || function (value) {\n    // not a very good shim, but good enough for our one use of it\n    for (var i = 0; i < this.length; i++) {\n      if (this[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  });\n\n\n  var array_map = uncurryThis(\n  Array.prototype.map || function (callback, thisp) {\n    var self = this;\n    var collect = [];\n    array_reduce(self, function (undefined, value, index) {\n      collect.push(callback.call(thisp, value, index, self));\n    }, void 0);\n    return collect;\n  });\n\n\n  var object_create = Object.create || function (prototype) {\n    function Type() {}\n    Type.prototype = prototype;\n    return new Type();\n  };\n\n  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n  };\n\n  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n  var object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n      if (object_hasOwnProperty(object, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n\n  var object_toString = uncurryThis(Object.prototype.toString);\n\n  function isObject(value) {\n    return value === Object(value);\n  }\n\n  // generator related shims\n\n  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n  function isStopIteration(exception) {\n    return (\n      object_toString(exception) === \"[object StopIteration]\" ||\n      exception instanceof QReturnValue);\n\n  }\n\n  // FIXME: Remove this helper and Q.return once ES6 generators are in\n  // SpiderMonkey.\n  var QReturnValue;\n  if (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n  } else {\n    QReturnValue = function QReturnValue(value) {\n      this.value = value;\n    };\n  }\n\n  // long stack traces\n\n  var STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n  function makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n    promise.stack &&\n    _typeof(error) === \"object\" &&\n    error !== null &&\n    error.stack)\n    {\n      var stacks = [];\n      for (var p = promise; !!p; p = p.source) {\n        if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n          object_defineProperty(error, \"__minimumStackCounter__\", { value: p.stackCounter, configurable: true });\n          stacks.unshift(p.stack);\n        }\n      }\n      stacks.unshift(error.stack);\n\n      var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n      var stack = filterStackString(concatedStacks);\n      object_defineProperty(error, \"stack\", { value: stack, configurable: true });\n    }\n  }\n\n  function filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n\n      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n        desiredLines.push(line);\n      }\n    }\n    return desiredLines.join(\"\\n\");\n  }\n\n  function isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n    stackLine.indexOf(\"(node.js:\") !== -1;\n  }\n\n  function getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n      return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n      return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n      return [attempt3[1], Number(attempt3[2])];\n    }\n  }\n\n  function isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n      return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n    lineNumber >= qStartingLine &&\n    lineNumber <= qEndingLine;\n  }\n\n  // discover own file name and line number range for filtering stack\n  // traces\n  function captureLine() {\n    if (!hasStacks) {\n      return;\n    }\n\n    try {\n      throw new Error();\n    } catch (e) {\n      var lines = e.stack.split(\"\\n\");\n      var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n      if (!fileNameAndLineNumber) {\n        return;\n      }\n\n      qFileName = fileNameAndLineNumber[0];\n      return fileNameAndLineNumber[1];\n    }\n  }\n\n  function deprecate(callback, name, alternative) {\n    return function () {\n      if (typeof console !== \"undefined\" &&\n      typeof console.warn === \"function\") {\n        console.warn(name + \" is deprecated, use \" + alternative +\n        \" instead.\", new Error(\"\").stack);\n      }\n      return callback.apply(callback, arguments);\n    };\n  }\n\n  // end of shims\n  // beginning of real work\n\n  /**\n   * Constructs a promise for an immediate reference, passes promises through, or\n   * coerces promises from different systems.\n   * @param value immediate reference or promise\n   */\n  function Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n      return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n      return coerce(value);\n    } else {\n      return fulfill(value);\n    }\n  }\n  Q.resolve = Q;\n\n  /**\n                  * Performs a task in a future turn of the event loop.\n                  * @param {Function} task\n                  */\n  Q.nextTick = nextTick;\n\n  /**\n                          * Controls whether or not long stack traces will be on\n                          */\n  Q.longStackSupport = false;\n\n  /**\n                               * The counter is used to determine the stopping point for building\n                               * long stack traces. In makeStackTraceLong we walk backwards through\n                               * the linked list of promises, only stacks which were created before\n                               * the rejection are concatenated.\n                               */\n  var longStackCounter = 1;\n\n  // enable long stacks if Q_DEBUG is set\n  if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n  }\n\n  /**\n     * Constructs a {promise, resolve, reject} object.\n     *\n     * `resolve` is a callback to invoke with a more resolved value for the\n     * promise. To fulfill the promise, invoke `resolve` with any value that is\n     * not a thenable. To reject the promise, invoke `resolve` with a rejected\n     * thenable, or invoke `reject` with the reason directly. To resolve the\n     * promise to another thenable, thus putting it in the same state, invoke\n     * `resolve` with that other thenable.\n     */\n  Q.defer = defer;\n  function defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [],progressListeners = [],resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n      var args = array_slice(arguments);\n      if (messages) {\n        messages.push(args);\n        if (op === \"when\" && operands[1]) {// progress operand\n          progressListeners.push(operands[1]);\n        }\n      } else {\n        Q.nextTick(function () {\n          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n        });\n      }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n      if (messages) {\n        return promise;\n      }\n      var nearerValue = nearer(resolvedPromise);\n      if (isPromise(nearerValue)) {\n        resolvedPromise = nearerValue; // shorten chain\n      }\n      return nearerValue;\n    };\n\n    promise.inspect = function () {\n      if (!resolvedPromise) {\n        return { state: \"pending\" };\n      }\n      return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n      try {\n        throw new Error();\n      } catch (e) {\n        // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n        // accessor around; that causes memory leaks as per GH-111. Just\n        // reify the stack trace as a string ASAP.\n        //\n        // At the same time, cut off the first line; it's always just\n        // \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        promise.stackCounter = longStackCounter++;\n      }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n      resolvedPromise = newPromise;\n\n      if (Q.longStackSupport && hasStacks) {\n        // Only hold a reference to the new promise if long stacks\n        // are enabled to reduce memory usage\n        promise.source = newPromise;\n      }\n\n      array_reduce(messages, function (undefined, message) {\n        Q.nextTick(function () {\n          newPromise.promiseDispatch.apply(newPromise, message);\n        });\n      }, void 0);\n\n      messages = void 0;\n      progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      array_reduce(progressListeners, function (undefined, progressListener) {\n        Q.nextTick(function () {\n          progressListener(progress);\n        });\n      }, void 0);\n    };\n\n    return deferred;\n  }\n\n  /**\n     * Creates a Node-style callback that will resolve or reject the deferred\n     * promise.\n     * @returns a nodeback\n     */\n  defer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n      if (error) {\n        self.reject(error);\n      } else if (arguments.length > 2) {\n        self.resolve(array_slice(arguments, 1));\n      } else {\n        self.resolve(value);\n      }\n    };\n  };\n\n  /**\n      * @param resolver {Function} a function that returns nothing and accepts\n      * the resolve, reject, and notify functions for a deferred.\n      * @returns a promise that may be resolved with the given resolve and reject\n      * functions, or rejected by a thrown exception in resolver\n      */\n  Q.Promise = promise; // ES6\n  Q.promise = promise;\n  function promise(resolver) {\n    if (typeof resolver !== \"function\") {\n      throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n      resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n      deferred.reject(reason);\n    }\n    return deferred.promise;\n  }\n\n  promise.race = race; // ES6\n  promise.all = all; // ES6\n  promise.reject = reject; // ES6\n  promise.resolve = Q; // ES6\n\n  // XXX experimental.  This method is a way to denote that a local value is\n  // serializable and should be immediately dispatched to a remote upon request,\n  // instead of passing a reference.\n  Q.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n  };\n\n  Promise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n  };\n\n  /**\n      * If two promises eventually fulfill to the same value, promises that value,\n      * but otherwise rejects.\n      * @param x {Any*}\n      * @param y {Any*}\n      * @returns {Any*} a promise for x and y if they are the same, but a rejection\n      * otherwise.\n      *\n      */\n  Q.join = function (x, y) {\n    return Q(x).join(y);\n  };\n\n  Promise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n      if (x === y) {\n        // TODO: \"===\" should be Object.is or equiv\n        return x;\n      } else {\n        throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n      }\n    });\n  };\n\n  /**\n      * Returns a promise for the first of an array of promises to become settled.\n      * @param answers {Array[Any*]} promises to race\n      * @returns {Any*} the first promise to be settled\n      */\n  Q.race = race;\n  function race(answerPs) {\n    return promise(function (resolve, reject) {\n      // Switch to this once we can assume at least ES5\n      // answerPs.forEach(function (answerP) {\n      //     Q(answerP).then(resolve, reject);\n      // });\n      // Use this in the meantime\n      for (var i = 0, len = answerPs.length; i < len; i++) {\n        Q(answerPs[i]).then(resolve, reject);\n      }\n    });\n  }\n\n  Promise.prototype.race = function () {\n    return this.then(Q.race);\n  };\n\n  /**\n      * Constructs a Promise with a promise descriptor object and optional fallback\n      * function.  The descriptor contains methods like when(rejected), get(name),\n      * set(name, value), post(name, args), and delete(name), which all\n      * return either a value, a promise for a value, or a rejection.  The fallback\n      * accepts the operation name, a resolver, and any further arguments that would\n      * have been forwarded to the appropriate method above had a method been\n      * provided with the proper name.  The API makes no guarantees about the nature\n      * of the returned object, apart from that it is usable whereever promises are\n      * bought and sold.\n      */\n  Q.makePromise = Promise;\n  function Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n      fallback = function fallback(op) {\n        return reject(new Error(\n        \"Promise does not support operation: \" + op));\n\n      };\n    }\n    if (inspect === void 0) {\n      inspect = function inspect() {\n        return { state: \"unknown\" };\n      };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n      var result;\n      try {\n        if (descriptor[op]) {\n          result = descriptor[op].apply(promise, args);\n        } else {\n          result = fallback.call(promise, op, args);\n        }\n      } catch (exception) {\n        result = reject(exception);\n      }\n      if (resolve) {\n        resolve(result);\n      }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n      var inspected = inspect();\n      if (inspected.state === \"rejected\") {\n        promise.exception = inspected.reason;\n      }\n\n      promise.valueOf = function () {\n        var inspected = inspect();\n        if (inspected.state === \"pending\" ||\n        inspected.state === \"rejected\") {\n          return promise;\n        }\n        return inspected.value;\n      };\n    }\n\n    return promise;\n  }\n\n  Promise.prototype.toString = function () {\n    return \"[object Promise]\";\n  };\n\n  Promise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false; // ensure the untrusted promise makes at most a\n    // single call to one of the callbacks\n\n    function _fulfilled(value) {\n      try {\n        return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n      } catch (exception) {\n        return reject(exception);\n      }\n    }\n\n    function _rejected(exception) {\n      if (typeof rejected === \"function\") {\n        makeStackTraceLong(exception, self);\n        try {\n          return rejected(exception);\n        } catch (newException) {\n          return reject(newException);\n        }\n      }\n      return reject(exception);\n    }\n\n    function _progressed(value) {\n      return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n      self.promiseDispatch(function (value) {\n        if (done) {\n          return;\n        }\n        done = true;\n\n        deferred.resolve(_fulfilled(value));\n      }, \"when\", [function (exception) {\n        if (done) {\n          return;\n        }\n        done = true;\n\n        deferred.resolve(_rejected(exception));\n      }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n      var newValue;\n      var threw = false;\n      try {\n        newValue = _progressed(value);\n      } catch (e) {\n        threw = true;\n        if (Q.onerror) {\n          Q.onerror(e);\n        } else {\n          throw e;\n        }\n      }\n\n      if (!threw) {\n        deferred.notify(newValue);\n      }\n    }]);\n\n    return deferred.promise;\n  };\n\n  Q.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n  };\n\n  /**\n      * Works almost like \"finally\", but not called for rejections.\n      * Original resolution value is passed through callback unaffected.\n      * Callback may return a promise that will be awaited for.\n      * @param {Function} callback\n      * @returns {Q.Promise}\n      * @example\n      * doSomething()\n      *   .then(...)\n      *   .tap(console.log)\n      *   .then(...);\n      */\n  Promise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n      return callback.fcall(value).thenResolve(value);\n    });\n  };\n\n  /**\n      * Registers an observer on a promise.\n      *\n      * Guarantees:\n      *\n      * 1. that fulfilled and rejected will be called only once.\n      * 2. that either the fulfilled callback or the rejected callback will be\n      *    called, but not both.\n      * 3. that fulfilled and rejected will not be called in this turn.\n      *\n      * @param value      promise or immediate reference to observe\n      * @param fulfilled  function to be called with the fulfilled value\n      * @param rejected   function to be called with the rejection exception\n      * @param progressed function to be called on any progress notifications\n      * @return promise for the return value from the invoked callback\n      */\n  Q.when = when;\n  function when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n  }\n\n  Promise.prototype.thenResolve = function (value) {\n    return this.then(function () {return value;});\n  };\n\n  Q.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n  };\n\n  Promise.prototype.thenReject = function (reason) {\n    return this.then(function () {throw reason;});\n  };\n\n  Q.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n  };\n\n  /**\n      * If an object is not a promise, it is as \"near\" as possible.\n      * If a promise is rejected, it is as \"near\" as possible too.\n      * If it’s a fulfilled promise, the fulfillment value is nearer.\n      * If it’s a deferred promise and the deferred has been resolved, the\n      * resolution is \"nearer\".\n      * @param object\n      * @returns most resolved (nearest) form of the object\n      */\n\n  // XXX should we re-do this?\n  Q.nearer = nearer;\n  function nearer(value) {\n    if (isPromise(value)) {\n      var inspected = value.inspect();\n      if (inspected.state === \"fulfilled\") {\n        return inspected.value;\n      }\n    }\n    return value;\n  }\n\n  /**\n     * @returns whether the given object is a promise.\n     * Otherwise it is a fulfilled value.\n     */\n  Q.isPromise = isPromise;\n  function isPromise(object) {\n    return object instanceof Promise;\n  }\n\n  Q.isPromiseAlike = isPromiseAlike;\n  function isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n  }\n\n  /**\n     * @returns whether the given object is a pending promise, meaning not\n     * fulfilled or rejected.\n     */\n  Q.isPending = isPending;\n  function isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n  }\n\n  Promise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n  };\n\n  /**\n      * @returns whether the given object is a value or fulfilled\n      * promise.\n      */\n  Q.isFulfilled = isFulfilled;\n  function isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n  }\n\n  Promise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n  };\n\n  /**\n      * @returns whether the given object is a rejected promise.\n      */\n  Q.isRejected = isRejected;\n  function isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n  }\n\n  Promise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n  };\n\n  //// BEGIN UNHANDLED REJECTION TRACKING\n\n  // This promise library consumes exceptions thrown in handlers so they can be\n  // handled by a subsequent promise.  The exceptions get added to this array when\n  // they are created, and removed when they are handled.  Note that in ES6 or\n  // shimmed environments, this would naturally be a `Set`.\n  var unhandledReasons = [];\n  var unhandledRejections = [];\n  var reportedUnhandledRejections = [];\n  var trackUnhandledRejections = true;\n\n  function resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n      trackUnhandledRejections = true;\n    }\n  }\n\n  function trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n    if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && typeof process.emit === \"function\") {\n      Q.nextTick.runAfter(function () {\n        if (array_indexOf(unhandledRejections, promise) !== -1) {\n          process.emit(\"unhandledRejection\", reason, promise);\n          reportedUnhandledRejections.push(promise);\n        }\n      });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n      unhandledReasons.push(reason.stack);\n    } else {\n      unhandledReasons.push(\"(no stack) \" + reason);\n    }\n  }\n\n  function untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n      if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n          var atReport = array_indexOf(reportedUnhandledRejections, promise);\n          if (atReport !== -1) {\n            process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n            reportedUnhandledRejections.splice(atReport, 1);\n          }\n        });\n      }\n      unhandledRejections.splice(at, 1);\n      unhandledReasons.splice(at, 1);\n    }\n  }\n\n  Q.resetUnhandledRejections = resetUnhandledRejections;\n\n  Q.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n  };\n\n  Q.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n  };\n\n  resetUnhandledRejections();\n\n  //// END UNHANDLED REJECTION TRACKING\n\n  /**\n   * Constructs a rejected promise.\n   * @param reason value describing the failure\n   */\n  Q.reject = reject;\n  function reject(reason) {\n    var rejection = Promise({\n      \"when\": function when(rejected) {\n        // note that the error has been handled\n        if (rejected) {\n          untrackRejection(this);\n        }\n        return rejected ? rejected(reason) : this;\n      } },\n    function fallback() {\n      return this;\n    }, function inspect() {\n      return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n  }\n\n  /**\n     * Constructs a fulfilled promise for an immediate reference.\n     * @param value immediate reference\n     */\n  Q.fulfill = fulfill;\n  function fulfill(value) {\n    return Promise({\n      \"when\": function when() {\n        return value;\n      },\n      \"get\": function get(name) {\n        return value[name];\n      },\n      \"set\": function set(name, rhs) {\n        value[name] = rhs;\n      },\n      \"delete\": function _delete(name) {\n        delete value[name];\n      },\n      \"post\": function post(name, args) {\n        // Mark Miller proposes that post with no name should apply a\n        // promised function.\n        if (name === null || name === void 0) {\n          return value.apply(void 0, args);\n        } else {\n          return value[name].apply(value, args);\n        }\n      },\n      \"apply\": function apply(thisp, args) {\n        return value.apply(thisp, args);\n      },\n      \"keys\": function keys() {\n        return object_keys(value);\n      } },\n    void 0, function inspect() {\n      return { state: \"fulfilled\", value: value };\n    });\n  }\n\n  /**\n     * Converts thenables to Q promises.\n     * @param promise thenable promise\n     * @returns a Q promise\n     */\n  function coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n      try {\n        promise.then(deferred.resolve, deferred.reject, deferred.notify);\n      } catch (exception) {\n        deferred.reject(exception);\n      }\n    });\n    return deferred.promise;\n  }\n\n  /**\n     * Annotates an object such that it will never be\n     * transferred away from this process over any promise\n     * communication channel.\n     * @param object\n     * @returns promise a wrapping of that object that\n     * additionally responds to the \"isDef\" message\n     * without a rejection.\n     */\n  Q.master = master;\n  function master(object) {\n    return Promise({\n      \"isDef\": function isDef() {} },\n    function fallback(op, args) {\n      return dispatch(object, op, args);\n    }, function () {\n      return Q(object).inspect();\n    });\n  }\n\n  /**\n     * Spreads the values of a promised array of arguments into the\n     * fulfillment callback.\n     * @param fulfilled callback that receives variadic arguments from the\n     * promised array\n     * @param rejected callback that receives the exception if the promise\n     * is rejected.\n     * @returns a promise for the return value or thrown exception of\n     * either callback.\n     */\n  Q.spread = spread;\n  function spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n  }\n\n  Promise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n      return fulfilled.apply(void 0, array);\n    }, rejected);\n  };\n\n  /**\n      * The async function is a decorator for generator functions, turning\n      * them into asynchronous generators.  Although generators are only part\n      * of the newest ECMAScript 6 drafts, this code does not cause syntax\n      * errors in older engines.  This code should continue to work and will\n      * in fact improve over time as the language improves.\n      *\n      * ES6 generators are currently part of V8 version 3.19 with the\n      * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n      * for longer, but under an older Python-inspired form.  This function\n      * works on both kinds of generators.\n      *\n      * Decorates a generator function such that:\n      *  - it may yield promises\n      *  - execution will continue when that promise is fulfilled\n      *  - the value of the yield expression will be the fulfilled value\n      *  - it returns a promise for the return value (when the generator\n      *    stops iterating)\n      *  - the decorated function returns a promise for the return value\n      *    of the generator or the first rejected promise among those\n      *    yielded.\n      *  - if an error is thrown in the generator, it propagates through\n      *    every following yield until it is caught, or until it escapes\n      *    the generator function altogether, and is translated into a\n      *    rejection for the promise returned by the decorated generator.\n      */\n  Q.async = async;\n  function async(makeGenerator) {\n    return function () {\n      // when verb is \"send\", arg is a value\n      // when verb is \"throw\", arg is an exception\n      function continuer(verb, arg) {\n        var result;\n\n        // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n        // engine that has a deployed base of browsers that support generators.\n        // However, SM's generators use the Python-inspired semantics of\n        // outdated ES6 drafts.  We would like to support ES6, but we'd also\n        // like to make it possible to use generators in deployed browsers, so\n        // we also support Python-style generators.  At some point we can remove\n        // this block.\n\n        if (typeof StopIteration === \"undefined\") {\n          // ES6 Generators\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            return reject(exception);\n          }\n          if (result.done) {\n            return Q(result.value);\n          } else {\n            return when(result.value, callback, errback);\n          }\n        } else {\n          // SpiderMonkey Generators\n          // FIXME: Remove this case when SM does ES6 generators.\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            if (isStopIteration(exception)) {\n              return Q(exception.value);\n            } else {\n              return reject(exception);\n            }\n          }\n          return when(result, callback, errback);\n        }\n      }\n      var generator = makeGenerator.apply(this, arguments);\n      var callback = continuer.bind(continuer, \"next\");\n      var errback = continuer.bind(continuer, \"throw\");\n      return callback();\n    };\n  }\n\n  /**\n     * The spawn function is a small wrapper around async that immediately\n     * calls the generator and also ends the promise chain, so that any\n     * unhandled errors are thrown instead of forwarded to the error\n     * handler. This is useful because it's extremely common to run\n     * generators at the top-level to work with libraries.\n     */\n  Q.spawn = spawn;\n  function spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n  }\n\n  // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n  /**\n   * Throws a ReturnValue exception to stop an asynchronous generator.\n   *\n   * This interface is a stop-gap measure to support generator return\n   * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n   * generators like Chromium 29, just use \"return\" in your generator\n   * functions.\n   *\n   * @param value the return value for the surrounding generator\n   * @throws ReturnValue exception with the value.\n   * @example\n   * // ES6 style\n   * Q.async(function* () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      return foo + bar;\n   * })\n   * // Older SpiderMonkey style\n   * Q.async(function () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      Q.return(foo + bar);\n   * })\n   */\n  Q[\"return\"] = _return;\n  function _return(value) {\n    throw new QReturnValue(value);\n  }\n\n  /**\n     * The promised function decorator ensures that any promise arguments\n     * are settled and passed as values (`this` is also settled and passed\n     * as a value).  It will also ensure that the result of a function is\n     * always a promise.\n     *\n     * @example\n     * var add = Q.promised(function (a, b) {\n     *     return a + b;\n     * });\n     * add(Q(a), Q(B));\n     *\n     * @param {function} callback The function to decorate\n     * @returns {function} a function that has been decorated.\n     */\n  Q.promised = promised;\n  function promised(callback) {\n    return function () {\n      return spread([this, all(arguments)], function (self, args) {\n        return callback.apply(self, args);\n      });\n    };\n  }\n\n  /**\n     * sends a message to a value in a future turn\n     * @param object* the recipient\n     * @param op the name of the message operation, e.g., \"when\",\n     * @param args further arguments to be forwarded to the operation\n     * @returns result {Promise} a promise for the result of the operation\n     */\n  Q.dispatch = dispatch;\n  function dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n  }\n\n  Promise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n      self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n  };\n\n  /**\n      * Gets the value of a property in a future turn.\n      * @param object    promise or immediate reference for target object\n      * @param name      name of property to get\n      * @return promise for the property value\n      */\n  Q.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n  };\n\n  Promise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n  };\n\n  /**\n      * Sets the value of a property in a future turn.\n      * @param object    promise or immediate reference for object object\n      * @param name      name of property to set\n      * @param value     new value of property\n      * @return promise for the return value\n      */\n  Q.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n  };\n\n  Promise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n  };\n\n  /**\n      * Deletes a property in a future turn.\n      * @param object    promise or immediate reference for target object\n      * @param name      name of property to delete\n      * @return promise for the return value\n      */\n  Q.del = // XXX legacy\n  Q[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n  };\n\n  Promise.prototype.del = // XXX legacy\n  Promise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n  };\n\n  /**\n      * Invokes a method in a future turn.\n      * @param object    promise or immediate reference for target object\n      * @param name      name of method to invoke\n      * @param value     a value to post, typically an array of\n      *                  invocation arguments for promises that\n      *                  are ultimately backed with `resolve` values,\n      *                  as opposed to those backed with URLs\n      *                  wherein the posted value can be any\n      *                  JSON serializable object.\n      * @return promise for the return value\n      */\n  // bound locally because it is used by other methods\n  Q.mapply = // XXX As proposed by \"Redsandro\"\n  Q.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n  };\n\n  Promise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n  };\n\n  /**\n      * Invokes a method in a future turn.\n      * @param object    promise or immediate reference for target object\n      * @param name      name of method to invoke\n      * @param ...args   array of invocation arguments\n      * @return promise for the return value\n      */\n  Q.send = // XXX Mark Miller's proposed parlance\n  Q.mcall = // XXX As proposed by \"Redsandro\"\n  Q.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n  };\n\n  Promise.prototype.send = // XXX Mark Miller's proposed parlance\n  Promise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n  };\n\n  /**\n      * Applies the promised function in a future turn.\n      * @param object    promise or immediate reference for target function\n      * @param args      array of application arguments\n      */\n  Q.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n  };\n\n  Promise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n  };\n\n  /**\n      * Calls the promised function in a future turn.\n      * @param object    promise or immediate reference for target function\n      * @param ...args   array of application arguments\n      */\n  Q[\"try\"] =\n  Q.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n  };\n\n  Promise.prototype.fcall = function () /*...args*/{\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n  };\n\n  /**\n      * Binds the promised function, transforming return values into a fulfilled\n      * promise and thrown errors into a rejected one.\n      * @param object    promise or immediate reference for target function\n      * @param ...args   array of application arguments\n      */\n  Q.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [\n      this,\n      args.concat(array_slice(arguments))]);\n\n    };\n  };\n  Promise.prototype.fbind = function () /*...args*/{\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [\n      this,\n      args.concat(array_slice(arguments))]);\n\n    };\n  };\n\n  /**\n      * Requests the names of the owned properties of a promised\n      * object in a future turn.\n      * @param object    promise or immediate reference for target object\n      * @return promise for the keys of the eventually settled object\n      */\n  Q.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n  };\n\n  Promise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n  };\n\n  /**\n      * Turns an array of promises into a promise for an array.  If any of\n      * the promises gets rejected, the whole array is rejected immediately.\n      * @param {Array*} an array (or promise for an array) of values (or\n      * promises for values)\n      * @returns a promise for an array of the corresponding values\n      */\n  // By Mark Miller\n  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n  Q.all = all;\n  function all(promises) {\n    return when(promises, function (promises) {\n      var pendingCount = 0;\n      var deferred = defer();\n      array_reduce(promises, function (undefined, promise, index) {\n        var snapshot;\n        if (\n        isPromise(promise) &&\n        (snapshot = promise.inspect()).state === \"fulfilled\")\n        {\n          promises[index] = snapshot.value;\n        } else {\n          ++pendingCount;\n          when(\n          promise,\n          function (value) {\n            promises[index] = value;\n            if (--pendingCount === 0) {\n              deferred.resolve(promises);\n            }\n          },\n          deferred.reject,\n          function (progress) {\n            deferred.notify({ index: index, value: progress });\n          });\n\n        }\n      }, void 0);\n      if (pendingCount === 0) {\n        deferred.resolve(promises);\n      }\n      return deferred.promise;\n    });\n  }\n\n  Promise.prototype.all = function () {\n    return all(this);\n  };\n\n  /**\n      * Returns the first resolved promise of an array. Prior rejected promises are\n      * ignored.  Rejects only if all promises are rejected.\n      * @param {Array*} an array containing values or promises for values\n      * @returns a promise fulfilled with the value of the first resolved promise,\n      * or a rejected promise if all promises are rejected.\n      */\n  Q.any = any;\n\n  function any(promises) {\n    if (promises.length === 0) {\n      return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n      var promise = promises[index];\n\n      pendingCount++;\n\n      when(promise, onFulfilled, onRejected, onProgress);\n      function onFulfilled(result) {\n        deferred.resolve(result);\n      }\n      function onRejected(err) {\n        pendingCount--;\n        if (pendingCount === 0) {\n          var rejection = err || new Error(\"\" + err);\n\n          rejection.message = \"Q can't get fulfillment value from any promise, all \" +\n          \"promises were rejected. Last error message: \" + rejection.message;\n\n          deferred.reject(rejection);\n        }\n      }\n      function onProgress(progress) {\n        deferred.notify({\n          index: index,\n          value: progress });\n\n      }\n    }, undefined);\n\n    return deferred.promise;\n  }\n\n  Promise.prototype.any = function () {\n    return any(this);\n  };\n\n  /**\n      * Waits for all promises to be settled, either fulfilled or\n      * rejected.  This is distinct from `all` since that would stop\n      * waiting at the first rejection.  The promise returned by\n      * `allResolved` will never be rejected.\n      * @param promises a promise for an array (or an array) of promises\n      * (or values)\n      * @return a promise for an array of promises\n      */\n  Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n  function allResolved(promises) {\n    return when(promises, function (promises) {\n      promises = array_map(promises, Q);\n      return when(all(array_map(promises, function (promise) {\n        return when(promise, noop, noop);\n      })), function () {\n        return promises;\n      });\n    });\n  }\n\n  Promise.prototype.allResolved = function () {\n    return allResolved(this);\n  };\n\n  /**\n      * @see Promise#allSettled\n      */\n  Q.allSettled = allSettled;\n  function allSettled(promises) {\n    return Q(promises).allSettled();\n  }\n\n  /**\n     * Turns an array of promises into a promise for an array of their states (as\n     * returned by `inspect`) when they have all settled.\n     * @param {Array[Any*]} values an array (or promise for an array) of values (or\n     * promises for values)\n     * @returns {Array[State]} an array of states for the respective values.\n     */\n  Promise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n      return all(array_map(promises, function (promise) {\n        promise = Q(promise);\n        function regardless() {\n          return promise.inspect();\n        }\n        return promise.then(regardless, regardless);\n      }));\n    });\n  };\n\n  /**\n      * Captures the failure of a promise, giving an oportunity to recover\n      * with a callback.  If the given promise is fulfilled, the returned\n      * promise is fulfilled.\n      * @param {Any*} promise for something\n      * @param {Function} callback to fulfill the returned promise if the\n      * given promise is rejected\n      * @returns a promise for the return value of the callback\n      */\n  Q.fail = // XXX legacy\n  Q[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n  };\n\n  Promise.prototype.fail = // XXX legacy\n  Promise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n  };\n\n  /**\n      * Attaches a listener that can respond to progress notifications from a\n      * promise's originating deferred. This listener receives the exact arguments\n      * passed to ``deferred.notify``.\n      * @param {Any*} promise for something\n      * @param {Function} callback to receive any progress notifications\n      * @returns the given promise, unchanged\n      */\n  Q.progress = progress;\n  function progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n  }\n\n  Promise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n  };\n\n  /**\n      * Provides an opportunity to observe the settling of a promise,\n      * regardless of whether the promise is fulfilled or rejected.  Forwards\n      * the resolution to the returned promise when the callback is done.\n      * The callback can return a promise to defer completion.\n      * @param {Any*} promise\n      * @param {Function} callback to observe the resolution of the given\n      * promise, takes no arguments.\n      * @returns a promise for the resolution of the given promise when\n      * ``fin`` is done.\n      */\n  Q.fin = // XXX legacy\n  Q[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n  };\n\n  Promise.prototype.fin = // XXX legacy\n  Promise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n      throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall().then(function () {\n        return value;\n      });\n    }, function (reason) {\n      // TODO attempt to recycle the rejection with \"this\".\n      return callback.fcall().then(function () {\n        throw reason;\n      });\n    });\n  };\n\n  /**\n      * Terminates a chain of promises, forcing rejections to be\n      * thrown as exceptions.\n      * @param {Any*} promise at the end of a chain of promises\n      * @returns nothing\n      */\n  Q.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n  };\n\n  Promise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function onUnhandledError(error) {\n      // forward to a future turn so that ``when``\n      // does not catch it and turn it into a rejection.\n      Q.nextTick(function () {\n        makeStackTraceLong(error, promise);\n        if (Q.onerror) {\n          Q.onerror(error);\n        } else {\n          throw error;\n        }\n      });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n    this.then(fulfilled, rejected, progress) :\n    this;\n\n    if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && process && process.domain) {\n      onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n  };\n\n  /**\n      * Causes a promise to be rejected if it does not get fulfilled before\n      * some milliseconds time out.\n      * @param {Any*} promise\n      * @param {Number} milliseconds timeout\n      * @param {Any*} custom error message or Error object (optional)\n      * @returns a promise for the resolution of the given promise if it is\n      * fulfilled before the timeout, otherwise rejected.\n      */\n  Q.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n  };\n\n  Promise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n      if (!error || \"string\" === typeof error) {\n        error = new Error(error || \"Timed out after \" + ms + \" ms\");\n        error.code = \"ETIMEDOUT\";\n      }\n      deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n      clearTimeout(timeoutId);\n      deferred.resolve(value);\n    }, function (exception) {\n      clearTimeout(timeoutId);\n      deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n  };\n\n  /**\n      * Returns a promise for the given value (or promised value), some\n      * milliseconds after it resolved. Passes rejections immediately.\n      * @param {Any*} promise\n      * @param {Number} milliseconds\n      * @returns a promise for the resolution of the given promise after milliseconds\n      * time has elapsed since the resolution of the given promise.\n      * If the given promise rejects, that is passed immediately.\n      */\n  Q.delay = function (object, timeout) {\n    if (timeout === void 0) {\n      timeout = object;\n      object = void 0;\n    }\n    return Q(object).delay(timeout);\n  };\n\n  Promise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n      var deferred = defer();\n      setTimeout(function () {\n        deferred.resolve(value);\n      }, timeout);\n      return deferred.promise;\n    });\n  };\n\n  /**\n      * Passes a continuation to a Node function, which is called with the given\n      * arguments provided as an array, and returns a promise.\n      *\n      *      Q.nfapply(FS.readFile, [__filename])\n      *      .then(function (content) {\n      *      })\n      *\n      */\n  Q.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n      * Passes a continuation to a Node function, which is called with the given\n      * arguments provided individually, and returns a promise.\n      * @example\n      * Q.nfcall(FS.readFile, __filename)\n      * .then(function (content) {\n      * })\n      *\n      */\n  Q.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfcall = function () /*...args*/{\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n      * Wraps a NodeJS continuation passing function and returns an equivalent\n      * version that returns a promise.\n      * @example\n      * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n      * .then(console.log)\n      * .done()\n      */\n  Q.nfbind =\n  Q.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n      throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      Q(callback).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nfbind =\n  Promise.prototype.denodeify = function () /*...args*/{\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n  };\n\n  Q.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      function bound() {\n        return callback.apply(thisp, arguments);\n      }\n      Q(bound).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nbind = function () /*thisp, ...args*/{\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n  };\n\n  /**\n      * Calls a method of a Node-style object that accepts a Node-style\n      * callback with a given array of arguments, plus a provided callback.\n      * @param object an object that has the named method\n      * @param {String} name name of the method of object\n      * @param {Array} args arguments to pass to the method; the callback\n      * will be provided by Q and appended to these arguments.\n      * @returns a promise for the value or error\n      */\n  Q.nmapply = // XXX As proposed by \"Redsandro\"\n  Q.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n  };\n\n  Promise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n      * Calls a method of a Node-style object that accepts a Node-style\n      * callback, forwarding the given variadic arguments, plus a provided\n      * callback argument.\n      * @param object an object that has the named method\n      * @param {String} name name of the method of object\n      * @param ...args arguments to pass to the method; the callback will\n      * be provided by Q and appended to these arguments.\n      * @returns a promise for the value or error\n      */\n  Q.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Q.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Q.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Promise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Promise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n      * If a function would like to support both Node continuation-passing-style and\n      * promise-returning-style, it can end its internal promise chain with\n      * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n      * elects to use a nodeback, the result will be sent there.  If they do not\n      * pass a nodeback, they will receive the result promise.\n      * @param object a result (or a promise for a result)\n      * @param {Function} nodeback a Node.js-style callback\n      * @returns either the promise or nothing\n      */\n  Q.nodeify = nodeify;\n  function nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n  }\n\n  Promise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n      this.then(function (value) {\n        Q.nextTick(function () {\n          nodeback(null, value);\n        });\n      }, function (error) {\n        Q.nextTick(function () {\n          nodeback(error);\n        });\n      });\n    } else {\n      return this;\n    }\n  };\n\n  Q.noConflict = function () {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n  };\n\n  // All code before this point will be filtered from stack traces.\n  var qEndingLine = captureLine();\n\n  return Q;\n\n});","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function memcpy(src, srcOffset, dst, dstOffset, length) {\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n\n  src = srcOffset ?\n  src.subarray ?\n  src.subarray(srcOffset, length && srcOffset + length) :\n  src.slice(srcOffset, length && srcOffset + length) :\n  src;\n\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (var i = 0; i < src.length; i++) {\n      dst[i + dstOffset] = src[i];\n    }\n  }\n\n  return dst;\n}var\n\nStreamLine = /*#__PURE__*/function () {\n  function StreamLine() {_classCallCheck(this, StreamLine);\n    this._position = [];\n    this._prev = [];\n    this._next = [];\n    this._side = [];\n    this._width = [];\n    this._index = [];\n\n    this._widthCallback = null;\n    this._geometry = null; // THREE.BufferGeometry();\n  }_createClass(StreamLine, [{ key: \"dispose\", value: function dispose()\n\n\n\n\n\n    {\n      if (this._geometry) {\n        this._geometry.dispose();\n        this._geometry = null;\n      }\n    } }, { key: \"setPoints\", value: function setPoints(\n\n    points, wcb) {\n      if (!(points instanceof Float32Array) || points.length === 0) {\n        throw new Error(\"Input points must be of Float32Array type\");\n      }\n\n      this._widthCallback = wcb;\n      this._position = [];\n\n      for (var j = 0; j < points.length; j += 3) {\n        this._position.push(points[j], points[j + 1], points[j + 2]);\n        this._position.push(points[j], points[j + 1], points[j + 2]);\n      }\n\n      this.process();\n    } }, { key: \"compareV3\", value: function compareV3(\n\n    a, b) {\n      var aa = a * 6;\n      var ab = b * 6;\n\n      return (\n        this._position[aa] === this._position[ab] &&\n        this._position[aa + 1] === this._position[ab + 1] &&\n        this._position[aa + 2] === this._position[ab + 2]);\n\n    } }, { key: \"copyV3\", value: function copyV3(\n\n    a) {\n      var aa = a * 6;\n      return {\n        x: this._position[aa],\n        y: this._position[aa + 1],\n        z: this._position[aa + 2] };\n\n    } }, { key: \"updateAttribute\", value: function updateAttribute(\n\n    attribute, dataArray) {\n      attribute.set(dataArray);\n      attribute.needsUpdate = true;\n    } }, { key: \"process\", value: function process()\n\n    {\n      var l = this._position.length / 6;\n\n      this._prev = [];\n      this._next = [];\n      this._side = [];\n      this._width = [];\n      this._index = [];\n\n      var isLoop = this.compareV3(0, l - 1);\n\n      {\n        // Create a 'previous point' for the first point of line. This 'previous'\n        // point of the first point can either be the same as the first point itself\n        // (when the line does not form a loop), or the second last point (when the\n        // line is a loop).\n        //\n        var copyFromIndex = isLoop ? l - 2 : 0;var _this$copyV =\n        this.copyV3(copyFromIndex),x = _this$copyV.x,y = _this$copyV.y,z = _this$copyV.z;\n\n        this._prev.push(x, y, z);\n        this._prev.push(x, y, z);\n      }\n\n      for (var j = 0; j < l; j++) {\n        // sides\n        this._side.push(1);\n        this._side.push(-1);\n\n        // widths\n        var w = 1.0;\n        if (this._widthCallback) {\n          w = this._widthCallback(j / (l - 1));\n        }\n\n        this._width.push(w);\n        this._width.push(w);\n\n        if (j < l - 1) {\n          // points prev to poisitions\n          var _this$copyV2 = this.copyV3(j),_x = _this$copyV2.x,_y = _this$copyV2.y,_z = _this$copyV2.z;\n          this._prev.push(_x, _y, _z);\n          this._prev.push(_x, _y, _z);\n\n          // indices\n          var n = j * 2;\n          this._index.push(n, n + 1, n + 2);\n          this._index.push(n + 2, n + 1, n + 3);\n        }\n        if (j > 0) {\n          // points after poisitions\n          var _this$copyV3 = this.copyV3(j),_x2 = _this$copyV3.x,_y2 = _this$copyV3.y,_z2 = _this$copyV3.z;\n          this._next.push(_x2, _y2, _z2);\n          this._next.push(_x2, _y2, _z2);\n        }\n      }\n\n      {\n        // Create a 'next point' for the last point in the line. This 'next' point\n        // of the last point in line can either be the same as the last point itself\n        // (when the line does not form a loop), or the second point in line (when\n        // the line is a loop).\n        //\n        var _copyFromIndex = isLoop ? 1 : l - 1;var _this$copyV4 =\n        this.copyV3(_copyFromIndex),_x3 = _this$copyV4.x,_y3 = _this$copyV4.y,_z3 = _this$copyV4.z;\n\n        this._next.push(_x3, _y3, _z3);\n        this._next.push(_x3, _y3, _z3);\n      }\n\n      var positionArray = new Float32Array(this._position);\n      var prevArray = new Float32Array(this._prev);\n      var nextArray = new Float32Array(this._next);\n      var sideArray = new Float32Array(this._side);\n      var widthArray = new Float32Array(this._width);\n      var indexArray = new Uint16Array(this._index);\n\n      if (!this._attributes || this._attributes.position.length !== this._position.length) {\n        this._attributes = {\n          position: new THREE.BufferAttribute(positionArray, 3),\n          prev: new THREE.BufferAttribute(prevArray, 3),\n          next: new THREE.BufferAttribute(nextArray, 3),\n          side: new THREE.BufferAttribute(sideArray, 1),\n          width: new THREE.BufferAttribute(widthArray, 1),\n          index: new THREE.BufferAttribute(indexArray, 1) };\n\n      } else {\n        this.updateAttribute(this._attributes.position, positionArray);\n        this.updateAttribute(this._attributes.prev, prevArray);\n        this.updateAttribute(this._attributes.next, nextArray);\n        this.updateAttribute(this._attributes.side, sideArray);\n        this.updateAttribute(this._attributes.width, widthArray);\n        this.updateAttribute(this._attributes.index, indexArray);\n      }\n\n      if (!this._geometry) {\n        this._geometry = new THREE.BufferGeometry();\n      }\n\n      this._geometry.setAttribute(\"position\", this._attributes.position);\n      this._geometry.setAttribute(\"prev\", this._attributes.prev);\n      this._geometry.setAttribute(\"next\", this._attributes.next);\n      this._geometry.setAttribute(\"side\", this._attributes.side);\n      this._geometry.setAttribute(\"width\", this._attributes.width);\n      this._geometry.setAttribute(\"index\", this._attributes.index);\n\n      this._geometry.computeBoundingSphere();\n      this._geometry.computeBoundingBox();\n      this._geometry.visible = true;\n    }\n\n    /**\n       * Fast method to advance the line by one position.  The oldest position is removed.\n       * @param position\n       */ }, { key: \"advance\", value: function advance(\n    position) {\n      var positions = this._attributes.position.array;\n      var prev = this._attributes.prev.array;\n      var next = this._attributes.next.array;\n      var l = positions.length;\n\n      // PREV\n      memcpy(positions, 0, prev, 0, l);\n\n      // POSITIONS\n      memcpy(positions, 6, positions, 0, l - 6);\n\n      positions[l - 6] = position.x;\n      positions[l - 5] = position.y;\n      positions[l - 4] = position.z;\n      positions[l - 3] = position.x;\n      positions[l - 2] = position.y;\n      positions[l - 1] = position.z;\n\n      // NEXT\n      memcpy(positions, 6, next, 0, l - 6);\n\n      next[l - 6] = position.x;\n      next[l - 5] = position.y;\n      next[l - 4] = position.z;\n      next[l - 3] = position.x;\n      next[l - 2] = position.y;\n      next[l - 1] = position.z;\n\n      this._attributes.position.needsUpdate = true;\n      this._attributes.prev.needsUpdate = true;\n      this._attributes.next.needsUpdate = true;\n    } }, { key: \"geometry\", get: function get() {return this._geometry;} }]);return StreamLine;}();\n\n\nexport { StreamLine };","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { StreamLine } from \"./StreamLine.js\";\nimport { StreamLineMaterial } from \"./StreamLineMaterial.js\";\n\n/**\n                                                               * A callback function that will be invoked when `StreamLineBuilder` needs to determine the\n                                                               * line thickness for a given point along the `StreamLine`. This callback function can be\n                                                               * specified in a call to `StreamLineBuilder.createStreamLine` API.\n                                                               *\n                                                               * @callback GetLineWidthScaleFunc\n                                                               * @param {number} fraction The fraction number indicating the point this call is meant for.\n                                                               * For example, for point `200` in a line segment with `250` points, this value will be `0.8`.\n                                                               * @returns {number} The fraction of line thickness for this given point on the line. If this\n                                                               * value is `1.0`, the line thickness at this point will be equivalent to the thickness value\n                                                               * specified in `StreamLineSpecs.lineWidth`. If this value is `1.5` then the line thickness at\n                                                               * this point will be `1.5` times the value of `StreamLineSpecs.lineWidth`.\n                                                               */\n\n/**\n                                                                   * An object which carries the coordinates and colors of points that made up the line.\n                                                                   *\n                                                                   * @typedef {Object} StreamLineData\n                                                                   * @property {Float32Array} points The point array specified as `Float32Array`. It is a linear\n                                                                   * array that carries the coordinates of the points forming the line `[x0, y0, z0, x1, ... ]`.\n                                                                   * @property {Float32Array} [colors] The colors for each point specified in the `points`\n                                                                   * array. This array is specified as a `Float32Array` and carries point colors in the form\n                                                                   * of `[ r0, g0, b0, r1, g1, ... ]`. If this parameter is specified, it should contain as many\n                                                                   * elements as there are in `points` parameter.\n                                                                   * @property {GetLineWidthScaleFunc} [scaleCallback] The callback for line segment thickness.\n                                                                   * See `GetLineWidthScaleFunc` for further details.\n                                                                   */\n\n/**\n                                                                       * An object representing the specifications of a stream line to be created. This object is\n                                                                       * used in `StreamLineBuilder.createStreamLine` API.\n                                                                       *\n                                                                       * @typedef {Object} StreamLineSpecs\n                                                                       * @property {number} lineWidth The width of the `StreamLine` object in terms of pixels.\n                                                                       * Individual line segment widths can be specified as a fraction of this value through\n                                                                       * `scaleCallback` function. See `GetLineWidthScaleFunc` for more details.\n                                                                       * @property {THREE.Color} lineColor The global uniform line color. Individual segment colors\n                                                                       * can be specified through `StreamLineData.colors` array. See `StreamLineData` for more\n                                                                       * details.\n                                                                       * @property {number} opacity The global uniform line opacity in the range of `[0.0, 1.0]`.\n                                                                       * @property {StreamLineData} lineData The point data to initialize the `StreamLine` object\n                                                                       * with. See `StreamLineData` for more details.\n                                                                       */\n\nvar overlayName = \"StreamLineOverlay\";\n\n/**\n                                        * An object that assists in building `StreamLine` objects.\n                                        * @class\n                                        * @memberof Autodesk.DataVisualization.Core\n                                        * @alias Autodesk.DataVisualization.Core.StreamLineBuilder\n                                        */var\nStreamLineBuilder = /*#__PURE__*/function () {\n  /**\n                                               * Constructs an instance of `StreamLineBuilder` object. For proper resource management\n                                               * it is recommended to obtain a `StreamLineBuilder` through `DataVisualization` class.\n                                               *\n                                               * @param {Viewer3D} viewer The instance a `Viewer3D` to associate this object with.\n                                               *\n                                               * @example\n                                               *  const dataVizExtn = await viewer.loadExtension(\"Autodesk.DataVisualization\");\n                                               *  const streamLineBuilder = dataVizExtn.streamLineBuilder;\n                                               */\n  function StreamLineBuilder(viewer) {_classCallCheck(this, StreamLineBuilder);\n    this._viewer = viewer;\n    this._overlayCreated = false;\n    this._streamLines = [];\n    this._cachedMaterials = {};\n  }\n\n  /**\n     * Dispose of all the underlying `StreamLine` objects that are associated with this\n     * `StreamLineBuilder` object. This also releases their corresponding material and\n     * geometrical data.\n     * @alias Autodesk.DataVisualization.Core.StreamLineBuilder#dispose\n     */_createClass(StreamLineBuilder, [{ key: \"dispose\", value: function dispose()\n    {var _this = this;\n      // Dispose of all the 'Mesh' and 'StreamLine' objects first.\n      this._streamLines.forEach(function (_ref) {var streamLine = _ref.streamLine,mesh = _ref.mesh;\n        _this._removeMeshFromScene(mesh);\n        streamLine.dispose();\n      });\n\n      this._streamLines = [];\n\n      // Dispose of all 'StreamLineMaterial' instances.\n      var materials = Object.values(this._cachedMaterials);\n      materials.forEach(function (cachedMaterial) {return cachedMaterial.dispose();});\n      this._cachedMaterials = {};\n\n      if (this._overlayCreated) {\n        this._overlayCreated = false;\n        this._viewer.impl.removeOverlayScene(overlayName);\n      }\n    }\n\n    /**\n       * Creates `StreamLine` objects using the {@link StreamLineSpecs} and associates them with the\n       * `StreamLineBuilder` object.\n       * @param {StreamLineSpecs} streamLineSpecs See `StreamLineSpecs` for more details.\n       * @returns {StreamLine}\n       * @alias Autodesk.DataVisualization.Core.StreamLineBuilder#createStreamLine\n       */ }, { key: \"createStreamLine\", value: function createStreamLine(\n    streamLineSpecs) {\n      var streamLine = new StreamLine();\n      streamLine.setPoints(new Float32Array(streamLineSpecs.lineData.points));\n\n      var material = this._getOrCreateMaterial(streamLineSpecs);\n      var mesh = new THREE.Mesh(streamLine.geometry, material);\n      this._addMeshToScene(mesh);\n\n      this._streamLines.push({ streamLine: streamLine, mesh: mesh });\n      return streamLine;\n    }\n\n    /**\n       * Removes the `StreamLine` object from the scene. This\n       * method releases the geometrical data associated with the `StreamLine` object.\n       * @alias Autodesk.DataVisualization.Core.StreamLineBuilder#destroyStreamLine\n       * @param {StreamLine} streamLine The `StreamLine` object to be disposed of.\n       * @alias Autodesk.DataVisualization.Core.StreamLineBuilder#destroyStreamLine\n       */ }, { key: \"destroyStreamLine\", value: function destroyStreamLine(\n    streamLine) {\n      var index = this._streamLines.findIndex(function (entry) {\n        return entry.streamLine === streamLine;\n      });\n\n      if (index >= 0) {\n        var removed = this._streamLines.splice(index, 1);\n        this._removeMeshFromScene(removed[0].mesh);\n        removed[0].streamLine.dispose();\n      }\n    }\n\n    /**\n       * @private\n       * @param {THREE.Mesh} mesh\n       */ }, { key: \"_addMeshToScene\", value: function _addMeshToScene(\n    mesh) {\n      if (!this._overlayCreated) {\n        this._overlayCreated = true;\n        this._viewer.impl.createOverlayScene(overlayName);\n      }\n\n      this._viewer.impl.addOverlay(overlayName, mesh);\n    }\n\n    /**\n       * @private\n       * @param {THREE.Mesh} mesh\n       */ }, { key: \"_removeMeshFromScene\", value: function _removeMeshFromScene(\n    mesh) {\n      if (this._overlayCreated) {\n        this._viewer.impl.removeOverlay(overlayName, mesh);\n      }\n    }\n\n    /**\n       * @private\n       * @param {StreamLineSpecs} streamLineSpecs\n       */ }, { key: \"_getOrCreateMaterial\", value: function _getOrCreateMaterial(\n    streamLineSpecs) {\n      var lineColor = streamLineSpecs.lineColor;\n      var opacity = streamLineSpecs.opacity;\n      var lineWidth = streamLineSpecs.lineWidth;\n\n      var id = StreamLineMaterial.generateId(lineColor, opacity, lineWidth);\n      var cachedMaterial = this._cachedMaterials[id];\n\n      if (!cachedMaterial) {\n        cachedMaterial = new StreamLineMaterial({ lineColor: lineColor, opacity: opacity, lineWidth: lineWidth });\n        this._cachedMaterials[id] = cachedMaterial;\n      }\n\n      return cachedMaterial;\n    } }]);return StreamLineBuilder;}();\n\n\nexport { StreamLineBuilder };","import { StreamLineVert, StreamLineFrag } from \"./StreamLineShaders.js\";\n\nfunction StreamLineMaterial(parameters) {\n  function check(v, d) {\n    return v === undefined ? d : v;\n  }\n\n  THREE.Material.call(this);\n\n  parameters = parameters || {};\n  parameters = Object.assign(parameters, {\n    side: THREE.DoubleSide,\n    depthTest: true,\n    depthWrite: false });\n\n\n  this.lineColor = check(parameters.lineColor, new THREE.Color(0xffffff));\n  this.opacity = check(parameters.opacity, 1.0);\n  this.lineWidth = check(parameters.lineWidth, 6.0);\n\n  delete parameters.lineColor;\n  delete parameters.opacity;\n  delete parameters.lineWidth;\n\n  var vertexShader = StreamLineVert;\n  var fragmentShader = StreamLineFrag;\n\n  var material = new THREE.RawShaderMaterial({\n    uniforms: {\n      lineWidth: { type: \"f\", value: this.lineWidth },\n      color: { type: \"c\", value: this.lineColor },\n      opacity: { type: \"f\", value: this.opacity },\n      resolution: { type: \"v2\", value: new THREE.Vector2(1920, 1080) },\n      sizeAttenuation: { type: \"f\", value: 0.0 } },\n\n    attributes: {\n      position: { type: \"v3\", value: new THREE.Vector3() },\n      prev: { type: \"v3\", value: new THREE.Vector3() },\n      next: { type: \"v3\", value: new THREE.Vector3() },\n      side: { type: \"f\", value: 0.0 },\n      width: { type: \"f\", value: 0.0 } },\n\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader });\n\n\n  material.type = \"StreamLineMaterial\";\n  material.setValues(parameters);\n  return material;\n}\n\nStreamLineMaterial.prototype = Object.create(THREE.Material.prototype);\nStreamLineMaterial.prototype.constructor = StreamLineMaterial;\n\nStreamLineMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  return this;\n};\n\nStreamLineMaterial.prototype.id = function () {\n  return StreamLineMaterial.generateId(this.lineColor, this.opacity, this.lineWidth);\n};\n\n// Static function on 'StreamLineMaterial' object.\nStreamLineMaterial.generateId = function (lineColor, opacity, lineWidth) {\n  var _lineColor = lineColor.getHexString();\n  var _opacity = opacity.toFixed(4);\n  var _lineWidth = lineWidth.toFixed(4);\n  return \"\".concat(_lineColor, \"-\").concat(_opacity, \"-\").concat(_lineWidth);\n};\n\nexport { StreamLineMaterial };","var StreamLineVert = \"\\n    attribute vec3 position;\\n    attribute vec3 prev;\\n    attribute vec3 next;\\n    attribute float side;\\n    attribute float width;\\n\\n    uniform mat4 projectionMatrix;\\n    uniform mat4 modelViewMatrix;\\n    uniform vec2 resolution;\\n    uniform float lineWidth;\\n    uniform vec3 color;\\n    uniform float opacity;\\n    uniform float sizeAttenuation;\\n\\n    varying vec4 vColor;\\n\\n    vec2 fix( vec4 i, float aspect ) {\\n\\n        vec2 res = i.xy / i.w;\\n        res.x *= aspect;\\n        return res;\\n    }\\n\\n    void main() {\\n        float aspect = resolution.x / resolution.y;\\n\\n        vColor = vec4( color, opacity );\\n\\n        mat4 m = projectionMatrix * modelViewMatrix;\\n        vec4 finalPosition = m * vec4( position, 1.0 );\\n        vec4 prevPos = m * vec4( prev, 1.0 );\\n        vec4 nextPos = m * vec4( next, 1.0 );\\n\\n        vec2 currP = fix( finalPosition, aspect );\\n        vec2 prevP = fix( prevPos, aspect );\\n        vec2 nextP = fix( nextPos, aspect );\\n\\n        float w = lineWidth * width;\\n\\n        vec2 dir;\\n        if ( nextP == currP ) {\\n            dir = normalize( currP - prevP );\\n        }\\n        else if( prevP == currP ) {\\n            dir = normalize( nextP - currP );\\n        }\\n        else {\\n            vec2 dir1 = normalize( currP - prevP );\\n            vec2 dir2 = normalize( nextP - currP );\\n            dir = normalize( dir1 + dir2 );\\n\\n            vec2 perp = vec2( -dir1.y, dir1.x );\\n            vec2 miter = vec2( -dir.y, dir.x );\\n            w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\\n        }\\n\\n        vec4 normal = vec4( -dir.y, dir.x, 0., 1. );\\n        normal.xy *= .5 * w;\\n        normal *= projectionMatrix;\\n\\n        if ( sizeAttenuation == 0. ) {\\n            normal.xy *= finalPosition.w;\\n            normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;\\n        }\\n\\n        finalPosition.xy += normal.xy * side;\\n        gl_Position = finalPosition;\\n    }\\n\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar StreamLineFrag = \"\\n    varying vec4 vColor;\\n\\n    void main() {\\n        gl_FragColor = vColor;\\n    }\\n\";\n\n\n\n\n\n\n\nexport { StreamLineVert, StreamLineFrag };","class Rectangle {\n    /**\n     * Creates an instance of Rectangle.\n     *\n     * @param {number} [width=0]\n     * @param {number} [height=0]\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {boolean} [rot=false]\n     * @param {boolean} [allowRotation=false]\n     * @memberof Rectangle\n     */\n    constructor(width = 0, height = 0, x = 0, y = 0, rot = false, allowRotation = undefined) {\n        /**\n         * Oversized tag on rectangle which is bigger than packer itself.\n         *\n         * @type {boolean}\n         * @memberof Rectangle\n         */\n        this.oversized = false;\n        this._rot = false;\n        this._allowRotation = undefined;\n        this._dirty = 0;\n        this._width = width;\n        this._height = height;\n        this._x = x;\n        this._y = y;\n        this._data = {};\n        this._rot = rot;\n        this._allowRotation = allowRotation;\n    }\n    /**\n     * Test if two given rectangle collide each other\n     *\n     * @static\n     * @param {IRectangle} first\n     * @param {IRectangle} second\n     * @returns\n     * @memberof Rectangle\n     */\n    static Collide(first, second) { return first.collide(second); }\n    /**\n     * Test if the first rectangle contains the second one\n     *\n     * @static\n     * @param {IRectangle} first\n     * @param {IRectangle} second\n     * @returns\n     * @memberof Rectangle\n     */\n    static Contain(first, second) { return first.contain(second); }\n    /**\n     * Get the area (w * h) of the rectangle\n     *\n     * @returns {number}\n     * @memberof Rectangle\n     */\n    area() { return this.width * this.height; }\n    /**\n     * Test if the given rectangle collide with this rectangle.\n     *\n     * @param {IRectangle} rect\n     * @returns {boolean}\n     * @memberof Rectangle\n     */\n    collide(rect) {\n        return (rect.x < this.x + this.width &&\n            rect.x + rect.width > this.x &&\n            rect.y < this.y + this.height &&\n            rect.y + rect.height > this.y);\n    }\n    /**\n     * Test if this rectangle contains the given rectangle.\n     *\n     * @param {IRectangle} rect\n     * @returns {boolean}\n     * @memberof Rectangle\n     */\n    contain(rect) {\n        return (rect.x >= this.x && rect.y >= this.y &&\n            rect.x + rect.width <= this.x + this.width && rect.y + rect.height <= this.y + this.height);\n    }\n    get width() { return this._width; }\n    set width(value) {\n        if (value === this._width)\n            return;\n        this._width = value;\n        this._dirty++;\n    }\n    get height() { return this._height; }\n    set height(value) {\n        if (value === this._height)\n            return;\n        this._height = value;\n        this._dirty++;\n    }\n    get x() { return this._x; }\n    set x(value) {\n        if (value === this._x)\n            return;\n        this._x = value;\n        this._dirty++;\n    }\n    get y() { return this._y; }\n    set y(value) {\n        if (value === this._y)\n            return;\n        this._y = value;\n        this._dirty++;\n    }\n    /**\n     * If the rectangle is rotated\n     *\n     * @type {boolean}\n     * @memberof Rectangle\n     */\n    get rot() { return this._rot; }\n    /**\n     * Set the rotate tag of the rectangle.\n     *\n     * note: after `rot` is set, `width/height` of this rectangle is swaped.\n     *\n     * @memberof Rectangle\n     */\n    set rot(value) {\n        if (this._allowRotation === false)\n            return;\n        if (this._rot !== value) {\n            const tmp = this.width;\n            this.width = this.height;\n            this.height = tmp;\n            this._rot = value;\n            this._dirty++;\n        }\n    }\n    /**\n     * If the rectangle allow rotation\n     *\n     * @type {boolean}\n     * @memberof Rectangle\n     */\n    get allowRotation() { return this._allowRotation; }\n    /**\n     * Set the allowRotation tag of the rectangle.\n     *\n     * @memberof Rectangle\n     */\n    set allowRotation(value) {\n        if (this._allowRotation !== value) {\n            this._allowRotation = value;\n            this._dirty++;\n        }\n    }\n    get data() { return this._data; }\n    set data(value) {\n        if (value === null || value === this._data)\n            return;\n        this._data = value;\n        // extract allowRotation settings\n        if (typeof value === \"object\" && value.hasOwnProperty(\"allowRotation\")) {\n            this._allowRotation = value.allowRotation;\n        }\n        this._dirty++;\n    }\n    get dirty() { return this._dirty > 0; }\n    setDirty(value = true) { this._dirty = value ? this._dirty + 1 : 0; }\n}\n\nclass Bin {\n    constructor() {\n        this._dirty = 0;\n    }\n    get dirty() { return this._dirty > 0 || this.rects.some(rect => rect.dirty); }\n    /**\n     * Set bin dirty status\n     *\n     * @memberof Bin\n     */\n    setDirty(value = true) {\n        this._dirty = value ? this._dirty + 1 : 0;\n        if (!value) {\n            for (let rect of this.rects) {\n                if (rect.setDirty)\n                    rect.setDirty(false);\n            }\n        }\n    }\n}\n\nclass MaxRectsBin extends Bin {\n    constructor(maxWidth = EDGE_MAX_VALUE, maxHeight = EDGE_MAX_VALUE, padding = 0, options = {}) {\n        super();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this.padding = padding;\n        this.freeRects = [];\n        this.rects = [];\n        this.verticalExpand = false;\n        this.options = {\n            smart: true,\n            pot: true,\n            square: true,\n            allowRotation: false,\n            tag: false,\n            exclusiveTag: true,\n            border: 0,\n            logic: PACKING_LOGIC.MAX_EDGE\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.width = this.options.smart ? 0 : maxWidth;\n        this.height = this.options.smart ? 0 : maxHeight;\n        this.border = this.options.border ? this.options.border : 0;\n        this.freeRects.push(new Rectangle(this.maxWidth + this.padding - this.border * 2, this.maxHeight + this.padding - this.border * 2, this.border, this.border));\n        this.stage = new Rectangle(this.width, this.height);\n    }\n    add(...args) {\n        let data;\n        let rect;\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object')\n                throw new Error(\"MacrectsBin.add(): Wrong parameters\");\n            rect = args[0];\n            // Check if rect.tag match bin.tag, if bin.tag not defined, it will accept any rect\n            let tag = (rect.data && rect.data.tag) ? rect.data.tag : rect.tag ? rect.tag : undefined;\n            if (this.options.tag && this.options.exclusiveTag && this.tag !== tag)\n                return undefined;\n        }\n        else {\n            data = args.length > 2 ? args[2] : null;\n            // Check if data.tag match bin.tag, if bin.tag not defined, it will accept any rect\n            if (this.options.tag && this.options.exclusiveTag) {\n                if (data && this.tag !== data.tag)\n                    return undefined;\n                if (!data && this.tag)\n                    return undefined;\n            }\n            rect = new Rectangle(args[0], args[1]);\n            rect.data = data;\n            rect.setDirty(false);\n        }\n        const result = this.place(rect);\n        if (result)\n            this.rects.push(result);\n        return result;\n    }\n    repack() {\n        let unpacked = [];\n        this.reset();\n        // re-sort rects from big to small\n        this.rects.sort((a, b) => {\n            const result = Math.max(b.width, b.height) - Math.max(a.width, a.height);\n            if (result === 0 && a.hash && b.hash) {\n                return a.hash > b.hash ? -1 : 1;\n            }\n            else\n                return result;\n        });\n        for (let rect of this.rects) {\n            if (!this.place(rect)) {\n                unpacked.push(rect);\n            }\n        }\n        for (let rect of unpacked)\n            this.rects.splice(this.rects.indexOf(rect), 1);\n        return unpacked.length > 0 ? unpacked : undefined;\n    }\n    reset(deepReset = false, resetOption = false) {\n        if (deepReset) {\n            if (this.data)\n                delete this.data;\n            if (this.tag)\n                delete this.tag;\n            this.rects = [];\n            if (resetOption) {\n                this.options = {\n                    smart: true,\n                    pot: true,\n                    square: true,\n                    allowRotation: false,\n                    tag: false,\n                    border: 0\n                };\n            }\n        }\n        this.width = this.options.smart ? 0 : this.maxWidth;\n        this.height = this.options.smart ? 0 : this.maxHeight;\n        this.border = this.options.border ? this.options.border : 0;\n        this.freeRects = [new Rectangle(this.maxWidth + this.padding - this.border * 2, this.maxHeight + this.padding - this.border * 2, this.border, this.border)];\n        this.stage = new Rectangle(this.width, this.height);\n        this._dirty = 0;\n    }\n    clone() {\n        let clonedBin = new MaxRectsBin(this.maxWidth, this.maxHeight, this.padding, this.options);\n        for (let rect of this.rects) {\n            clonedBin.add(rect);\n        }\n        return clonedBin;\n    }\n    place(rect) {\n        // recheck if tag matched\n        let tag = (rect.data && rect.data.tag) ? rect.data.tag : rect.tag ? rect.tag : undefined;\n        if (this.options.tag && this.options.exclusiveTag && this.tag !== tag)\n            return undefined;\n        let node;\n        let allowRotation;\n        // getter/setter do not support hasOwnProperty()\n        if (rect.hasOwnProperty(\"_allowRotation\") && rect.allowRotation !== undefined) {\n            allowRotation = rect.allowRotation; // Per Rectangle allowRotation override packer settings\n        }\n        else {\n            allowRotation = this.options.allowRotation;\n        }\n        node = this.findNode(rect.width + this.padding, rect.height + this.padding, allowRotation);\n        if (node) {\n            this.updateBinSize(node);\n            let numRectToProcess = this.freeRects.length;\n            let i = 0;\n            while (i < numRectToProcess) {\n                if (this.splitNode(this.freeRects[i], node)) {\n                    this.freeRects.splice(i, 1);\n                    numRectToProcess--;\n                    i--;\n                }\n                i++;\n            }\n            this.pruneFreeList();\n            this.verticalExpand = this.width > this.height ? true : false;\n            rect.x = node.x;\n            rect.y = node.y;\n            if (rect.rot === undefined)\n                rect.rot = false;\n            rect.rot = node.rot ? !rect.rot : rect.rot;\n            this._dirty++;\n            return rect;\n        }\n        else if (!this.verticalExpand) {\n            if (this.updateBinSize(new Rectangle(rect.width + this.padding, rect.height + this.padding, this.width + this.padding - this.border, this.border)) || this.updateBinSize(new Rectangle(rect.width + this.padding, rect.height + this.padding, this.border, this.height + this.padding - this.border))) {\n                return this.place(rect);\n            }\n        }\n        else {\n            if (this.updateBinSize(new Rectangle(rect.width + this.padding, rect.height + this.padding, this.border, this.height + this.padding - this.border)) || this.updateBinSize(new Rectangle(rect.width + this.padding, rect.height + this.padding, this.width + this.padding - this.border, this.border))) {\n                return this.place(rect);\n            }\n        }\n        return undefined;\n    }\n    findNode(width, height, allowRotation) {\n        let score = Number.MAX_VALUE;\n        let areaFit;\n        let r;\n        let bestNode;\n        for (let i in this.freeRects) {\n            r = this.freeRects[i];\n            if (r.width >= width && r.height >= height) {\n                areaFit = (this.options.logic === PACKING_LOGIC.MAX_AREA) ?\n                    r.width * r.height - width * height :\n                    Math.min(r.width - width, r.height - height);\n                if (areaFit < score) {\n                    bestNode = new Rectangle(width, height, r.x, r.y);\n                    score = areaFit;\n                }\n            }\n            if (!allowRotation)\n                continue;\n            // Continue to test 90-degree rotated rectangle\n            if (r.width >= height && r.height >= width) {\n                areaFit = (this.options.logic === PACKING_LOGIC.MAX_AREA) ?\n                    r.width * r.height - height * width :\n                    Math.min(r.height - width, r.width - height);\n                if (areaFit < score) {\n                    bestNode = new Rectangle(height, width, r.x, r.y, true); // Rotated node\n                    score = areaFit;\n                }\n            }\n        }\n        return bestNode;\n    }\n    splitNode(freeRect, usedNode) {\n        // Test if usedNode intersect with freeRect\n        if (!freeRect.collide(usedNode))\n            return false;\n        // Do vertical split\n        if (usedNode.x < freeRect.x + freeRect.width && usedNode.x + usedNode.width > freeRect.x) {\n            // New node at the top side of the used node\n            if (usedNode.y > freeRect.y && usedNode.y < freeRect.y + freeRect.height) {\n                let newNode = new Rectangle(freeRect.width, usedNode.y - freeRect.y, freeRect.x, freeRect.y);\n                this.freeRects.push(newNode);\n            }\n            // New node at the bottom side of the used node\n            if (usedNode.y + usedNode.height < freeRect.y + freeRect.height) {\n                let newNode = new Rectangle(freeRect.width, freeRect.y + freeRect.height - (usedNode.y + usedNode.height), freeRect.x, usedNode.y + usedNode.height);\n                this.freeRects.push(newNode);\n            }\n        }\n        // Do Horizontal split\n        if (usedNode.y < freeRect.y + freeRect.height &&\n            usedNode.y + usedNode.height > freeRect.y) {\n            // New node at the left side of the used node.\n            if (usedNode.x > freeRect.x && usedNode.x < freeRect.x + freeRect.width) {\n                let newNode = new Rectangle(usedNode.x - freeRect.x, freeRect.height, freeRect.x, freeRect.y);\n                this.freeRects.push(newNode);\n            }\n            // New node at the right side of the used node.\n            if (usedNode.x + usedNode.width < freeRect.x + freeRect.width) {\n                let newNode = new Rectangle(freeRect.x + freeRect.width - (usedNode.x + usedNode.width), freeRect.height, usedNode.x + usedNode.width, freeRect.y);\n                this.freeRects.push(newNode);\n            }\n        }\n        return true;\n    }\n    pruneFreeList() {\n        // Go through each pair of freeRects and remove any rects that is redundant\n        let i = 0;\n        let j = 0;\n        let len = this.freeRects.length;\n        while (i < len) {\n            j = i + 1;\n            let tmpRect1 = this.freeRects[i];\n            while (j < len) {\n                let tmpRect2 = this.freeRects[j];\n                if (tmpRect2.contain(tmpRect1)) {\n                    this.freeRects.splice(i, 1);\n                    i--;\n                    len--;\n                    break;\n                }\n                if (tmpRect1.contain(tmpRect2)) {\n                    this.freeRects.splice(j, 1);\n                    j--;\n                    len--;\n                }\n                j++;\n            }\n            i++;\n        }\n    }\n    updateBinSize(node) {\n        if (!this.options.smart)\n            return false;\n        if (this.stage.contain(node))\n            return false;\n        let tmpWidth = Math.max(this.width, node.x + node.width - this.padding + this.border);\n        let tmpHeight = Math.max(this.height, node.y + node.height - this.padding + this.border);\n        if (this.options.allowRotation) {\n            // do extra test on rotated node whether it's a better choice\n            const rotWidth = Math.max(this.width, node.x + node.height - this.padding + this.border);\n            const rotHeight = Math.max(this.height, node.y + node.width - this.padding + this.border);\n            if (rotWidth * rotHeight < tmpWidth * tmpHeight) {\n                tmpWidth = rotWidth;\n                tmpHeight = rotHeight;\n            }\n        }\n        if (this.options.pot) {\n            tmpWidth = Math.pow(2, Math.ceil(Math.log(tmpWidth) * Math.LOG2E));\n            tmpHeight = Math.pow(2, Math.ceil(Math.log(tmpHeight) * Math.LOG2E));\n        }\n        if (this.options.square) {\n            tmpWidth = tmpHeight = Math.max(tmpWidth, tmpHeight);\n        }\n        if (tmpWidth > this.maxWidth + this.padding || tmpHeight > this.maxHeight + this.padding) {\n            return false;\n        }\n        this.expandFreeRects(tmpWidth + this.padding, tmpHeight + this.padding);\n        this.width = this.stage.width = tmpWidth;\n        this.height = this.stage.height = tmpHeight;\n        return true;\n    }\n    expandFreeRects(width, height) {\n        this.freeRects.forEach((freeRect, index) => {\n            if (freeRect.x + freeRect.width >= Math.min(this.width + this.padding - this.border, width)) {\n                freeRect.width = width - freeRect.x - this.border;\n            }\n            if (freeRect.y + freeRect.height >= Math.min(this.height + this.padding - this.border, height)) {\n                freeRect.height = height - freeRect.y - this.border;\n            }\n        }, this);\n        this.freeRects.push(new Rectangle(width - this.width - this.padding, height - this.border * 2, this.width + this.padding - this.border, this.border));\n        this.freeRects.push(new Rectangle(width - this.border * 2, height - this.height - this.padding, this.border, this.height + this.padding - this.border));\n        this.freeRects = this.freeRects.filter(freeRect => {\n            return !(freeRect.width <= 0 || freeRect.height <= 0 || freeRect.x < this.border || freeRect.y < this.border);\n        });\n        this.pruneFreeList();\n    }\n}\n\nclass OversizedElementBin extends Bin {\n    constructor(...args) {\n        super();\n        this.rects = [];\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object')\n                throw new Error(\"OversizedElementBin: Wrong parameters\");\n            const rect = args[0];\n            this.rects = [rect];\n            this.width = rect.width;\n            this.height = rect.height;\n            this.data = rect.data;\n            rect.oversized = true;\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n            this.data = args.length > 2 ? args[2] : null;\n            const rect = new Rectangle(this.width, this.height);\n            rect.oversized = true;\n            rect.data = this.data;\n            this.rects.push(rect);\n        }\n        this.freeRects = [];\n        this.maxWidth = this.width;\n        this.maxHeight = this.height;\n        this.options = { smart: false, pot: false, square: false };\n    }\n    add() { return undefined; }\n    reset(deepReset = false) {\n        // nothing to do here\n    }\n    repack() { return undefined; }\n    clone() {\n        let clonedBin = new OversizedElementBin(this.rects[0]);\n        return clonedBin;\n    }\n}\n\nconst EDGE_MAX_VALUE = 4096;\nvar PACKING_LOGIC;\n(function (PACKING_LOGIC) {\n    PACKING_LOGIC[PACKING_LOGIC[\"MAX_AREA\"] = 0] = \"MAX_AREA\";\n    PACKING_LOGIC[PACKING_LOGIC[\"MAX_EDGE\"] = 1] = \"MAX_EDGE\";\n})(PACKING_LOGIC || (PACKING_LOGIC = {}));\nclass MaxRectsPacker {\n    /**\n     * Creates an instance of MaxRectsPacker.\n     * @param {number} width of the output atlas (default is 4096)\n     * @param {number} height of the output atlas (default is 4096)\n     * @param {number} padding between glyphs/images (default is 0)\n     * @param {IOption} [options={}] (Optional) packing options\n     * @memberof MaxRectsPacker\n     */\n    constructor(width = EDGE_MAX_VALUE, height = EDGE_MAX_VALUE, padding = 0, options = {}) {\n        this.width = width;\n        this.height = height;\n        this.padding = padding;\n        /**\n         * Options for MaxRect Packer\n         * @property {boolean} options.smart Smart sizing packer (default is true)\n         * @property {boolean} options.pot use power of 2 sizing (default is true)\n         * @property {boolean} options.square use square size (default is false)\n         * @property {boolean} options.allowRotation allow rotation packing (default is false)\n         * @property {boolean} options.tag allow auto grouping based on `rect.tag` (default is false)\n         * @property {boolean} options.exclusiveTag tagged rects will have dependent bin, if set to `false`, packer will try to put tag rects into the same bin (default is true)\n         * @property {boolean} options.border atlas edge spacing (default is 0)\n         * @property {PACKING_LOGIC} options.logic MAX_AREA or MAX_EDGE based sorting logic (default is MAX_EDGE)\n         * @export\n         * @interface Option\n         */\n        this.options = {\n            smart: true,\n            pot: true,\n            square: false,\n            allowRotation: false,\n            tag: false,\n            exclusiveTag: true,\n            border: 0,\n            logic: PACKING_LOGIC.MAX_EDGE\n        };\n        this._currentBinIndex = 0;\n        this.bins = [];\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n    add(...args) {\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object')\n                throw new Error(\"MacrectsPacker.add(): Wrong parameters\");\n            const rect = args[0];\n            if (rect.width > this.width || rect.height > this.height) {\n                this.bins.push(new OversizedElementBin(rect));\n            }\n            else {\n                let added = this.bins.slice(this._currentBinIndex).find(bin => bin.add(rect) !== undefined);\n                if (!added) {\n                    let bin = new MaxRectsBin(this.width, this.height, this.padding, this.options);\n                    let tag = (rect.data && rect.data.tag) ? rect.data.tag : rect.tag ? rect.tag : undefined;\n                    if (this.options.tag && tag)\n                        bin.tag = tag;\n                    bin.add(rect);\n                    this.bins.push(bin);\n                }\n            }\n            return rect;\n        }\n        else {\n            const rect = new Rectangle(args[0], args[1]);\n            if (args.length > 2)\n                rect.data = args[2];\n            if (rect.width > this.width || rect.height > this.height) {\n                this.bins.push(new OversizedElementBin(rect));\n            }\n            else {\n                let added = this.bins.slice(this._currentBinIndex).find(bin => bin.add(rect) !== undefined);\n                if (!added) {\n                    let bin = new MaxRectsBin(this.width, this.height, this.padding, this.options);\n                    if (this.options.tag && rect.data.tag)\n                        bin.tag = rect.data.tag;\n                    bin.add(rect);\n                    this.bins.push(bin);\n                }\n            }\n            return rect;\n        }\n    }\n    /**\n     * Add an Array of bins/rectangles to the packer.\n     *\n     * `Javascript`: Any object has property: { width, height, ... } is accepted.\n     *\n     * `Typescript`: object shall extends `MaxrectsPacker.IRectangle`.\n     *\n     * note: object has `hash` property will have more stable packing result\n     *\n     * @param {IRectangle[]} rects Array of bin/rectangles\n     * @memberof MaxRectsPacker\n     */\n    addArray(rects) {\n        if (!this.options.tag || this.options.exclusiveTag) {\n            // if not using tag or using exclusiveTag, old approach\n            this.sort(rects, this.options.logic).forEach(rect => this.add(rect));\n        }\n        else {\n            // sort rects by tags first\n            if (rects.length === 0)\n                return;\n            rects.sort((a, b) => {\n                const aTag = (a.data && a.data.tag) ? a.data.tag : a.tag ? a.tag : undefined;\n                const bTag = (b.data && b.data.tag) ? b.data.tag : b.tag ? b.tag : undefined;\n                return bTag === undefined ? -1 : aTag === undefined ? 1 : bTag > aTag ? -1 : 1;\n            });\n            // iterate all bins to find the first bin which can place rects with same tag\n            //\n            let currentTag;\n            let currentIdx = 0;\n            let targetBin = this.bins.slice(this._currentBinIndex).find(bin => {\n                let testBin = bin.clone();\n                for (let i = currentIdx; i < rects.length; i++) {\n                    const rect = rects[i];\n                    const tag = (rect.data && rect.data.tag) ? rect.data.tag : rect.tag ? rect.tag : undefined;\n                    // initialize currentTag\n                    if (i === 0)\n                        currentTag = tag;\n                    if (tag !== currentTag) {\n                        // all current tag memeber tested successfully\n                        currentTag = tag;\n                        // do addArray()\n                        this.sort(rects.slice(currentIdx, i), this.options.logic).forEach(r => bin.add(r));\n                        currentIdx = i;\n                        // recrusively addArray() with remaining rects\n                        this.addArray(rects.slice(i));\n                        return true;\n                    }\n                    // remaining untagged rect will use normal addArray()\n                    if (tag === undefined) {\n                        // do addArray()\n                        this.sort(rects.slice(i), this.options.logic).forEach(r => this.add(r));\n                        currentIdx = rects.length;\n                        // end test\n                        return true;\n                    }\n                    // still in the same tag group\n                    if (testBin.add(rect) === undefined) {\n                        // current bin cannot contain all tag members\n                        // procceed to test next bin\n                        return false;\n                    }\n                }\n                // all rects tested\n                // do addArray() to the remaining tag group\n                this.sort(rects.slice(currentIdx), this.options.logic).forEach(r => bin.add(r));\n                return true;\n            });\n            // create a new bin if no current bin fit\n            if (!targetBin) {\n                const rect = rects[currentIdx];\n                const bin = new MaxRectsBin(this.width, this.height, this.padding, this.options);\n                const tag = (rect.data && rect.data.tag) ? rect.data.tag : rect.tag ? rect.tag : undefined;\n                if (this.options.tag && this.options.exclusiveTag && tag)\n                    bin.tag = tag;\n                this.bins.push(bin);\n                this.addArray(rects.slice(currentIdx));\n            }\n        }\n    }\n    /**\n     * Reset entire packer to initial states, keep settings\n     *\n     * @memberof MaxRectsPacker\n     */\n    reset() {\n        this.bins = [];\n        this._currentBinIndex = 0;\n    }\n    /**\n     * Repack all elements inside bins\n     *\n     * @param {boolean} [quick=true] quick repack only dirty bins\n     * @returns {void}\n     * @memberof MaxRectsPacker\n     */\n    repack(quick = true) {\n        if (quick) {\n            let unpack = [];\n            for (let bin of this.bins) {\n                if (bin.dirty) {\n                    let up = bin.repack();\n                    if (up)\n                        unpack.push(...up);\n                }\n            }\n            this.addArray(unpack);\n            return;\n        }\n        if (!this.dirty)\n            return;\n        const allRects = this.rects;\n        this.reset();\n        this.addArray(allRects);\n    }\n    /**\n     * Stop adding new element to the current bin and return a new bin.\n     *\n     * note: After calling `next()` all elements will no longer added to previous bins.\n     *\n     * @returns {Bin}\n     * @memberof MaxRectsPacker\n     */\n    next() {\n        this._currentBinIndex = this.bins.length;\n        return this._currentBinIndex;\n    }\n    /**\n     * Load bins to the packer, overwrite exist bins\n     * @param {MaxRectsBin[]} bins MaxRectsBin objects\n     * @memberof MaxRectsPacker\n     */\n    load(bins) {\n        bins.forEach((bin, index) => {\n            if (bin.maxWidth > this.width || bin.maxHeight > this.height) {\n                this.bins.push(new OversizedElementBin(bin.width, bin.height, {}));\n            }\n            else {\n                let newBin = new MaxRectsBin(this.width, this.height, this.padding, bin.options);\n                newBin.freeRects.splice(0);\n                bin.freeRects.forEach((r, i) => {\n                    newBin.freeRects.push(new Rectangle(r.width, r.height, r.x, r.y));\n                });\n                newBin.width = bin.width;\n                newBin.height = bin.height;\n                if (bin.tag)\n                    newBin.tag = bin.tag;\n                this.bins[index] = newBin;\n            }\n        }, this);\n    }\n    /**\n     * Output current bins to save\n     * @memberof MaxRectsPacker\n     */\n    save() {\n        let saveBins = [];\n        this.bins.forEach((bin => {\n            let saveBin = {\n                width: bin.width,\n                height: bin.height,\n                maxWidth: bin.maxWidth,\n                maxHeight: bin.maxHeight,\n                freeRects: [],\n                rects: [],\n                options: bin.options\n            };\n            if (bin.tag)\n                saveBin = Object.assign(Object.assign({}, saveBin), { tag: bin.tag });\n            bin.freeRects.forEach(r => {\n                saveBin.freeRects.push({\n                    x: r.x,\n                    y: r.y,\n                    width: r.width,\n                    height: r.height\n                });\n            });\n            saveBins.push(saveBin);\n        }));\n        return saveBins;\n    }\n    /**\n     * Sort the given rects based on longest edge or surface area.\n     *\n     * If rects have the same sort value, will sort by second key `hash` if presented.\n     *\n     * @private\n     * @param {T[]} rects\n     * @param {PACKING_LOGIC} [logic=PACKING_LOGIC.MAX_EDGE] sorting logic, \"area\" or \"edge\"\n     * @returns\n     * @memberof MaxRectsPacker\n     */\n    sort(rects, logic = PACKING_LOGIC.MAX_EDGE) {\n        return rects.slice().sort((a, b) => {\n            const result = (logic === PACKING_LOGIC.MAX_EDGE) ?\n                Math.max(b.width, b.height) - Math.max(a.width, a.height) :\n                b.width * b.height - a.width * a.height;\n            if (result === 0 && a.hash && b.hash) {\n                return a.hash > b.hash ? -1 : 1;\n            }\n            else\n                return result;\n        });\n    }\n    /**\n     * Return current functioning bin index, perior to this wont accept any new elements\n     *\n     * @readonly\n     * @type {number}\n     * @memberof MaxRectsPacker\n     */\n    get currentBinIndex() { return this._currentBinIndex; }\n    /**\n     * Returns dirty status of all child bins\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof MaxRectsPacker\n     */\n    get dirty() { return this.bins.some(bin => bin.dirty); }\n    /**\n     * Return all rectangles in this packer\n     *\n     * @readonly\n     * @type {T[]}\n     * @memberof MaxRectsPacker\n     */\n    get rects() {\n        let allRects = [];\n        for (let bin of this.bins) {\n            allRects.push(...bin.rects);\n        }\n        return allRects;\n    }\n}\n\nexport { Bin, MaxRectsBin, MaxRectsPacker, OversizedElementBin, PACKING_LOGIC, Rectangle };\n//# sourceMappingURL=maxrects-packer.mjs.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+wfpGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvpdejlsntBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA,mhpLA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtjvzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}